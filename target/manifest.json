<<<<<<< HEAD
{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.0", "generated_at": "2021-05-26T14:55:29.581418Z", "invocation_id": "fdfd61fd-4783-43c4-b9a5-baa817ac538a", "env": {}, "project_id": "ddaf672790663913aca01b3116f1986b", "user_id": "a6e7aa6f-986c-4f27-99ea-d640c4308cb0", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded": {"raw_sql": "SELECT\n        video_recorded_or_uploaded.event_id as eventID,\n        video_recorded_or_uploaded.user_id as userID,\n        video_recorded_or_uploaded.time as eventTime,\n        video_recorded_or_uploaded.continent as continent,\n        video_recorded_or_uploaded.country as country,\n        video_recorded_or_uploaded.region as region,\n        video_recorded_or_uploaded.city as city,\n        video_recorded_or_uploaded.platform as platform,\n        video_recorded_or_uploaded.device as device,\n        video_recorded_or_uploaded.device_type as deviceType,\n        video_recorded_or_uploaded.browser as browser,\n        video_recorded_or_uploaded.browser_type as browserType,\n        video_recorded_or_uploaded.vidyard_platform as vidyardPlatform,\n        video_recorded_or_uploaded.referrer as referrer,\n        video_recorded_or_uploaded.landing_page as landingPage,\n        video_recorded_or_uploaded.landing_page_query as landingPageQuery,\n        video_recorded_or_uploaded.query as query,\n        video_recorded_or_uploaded.domain as domain,\n        video_recorded_or_uploaded.path as path,\n        video_recorded_or_uploaded.title as title,\n        video_recorded_or_uploaded.channels as channels\nFROM\n        {{ source ( 'govideo_production' , 'video_recorded_or_uploaded')}} as video_recorded_or_uploaded\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_video_recorded_or_uploaded"], "unique_id": "model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_video_recorded_or_uploaded.sql", "original_file_path": "models/staging/heap/stg_govideo_production_video_recorded_or_uploaded.sql", "name": "stg_govideo_production_video_recorded_or_uploaded", "resource_type": "model", "alias": "stg_govideo_production_video_recorded_or_uploaded", "checksum": {"name": "sha256", "checksum": "05e7745ee928aa2a710733f0b05ac5571ca2c5d6494766dd380431b2125a346c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "video_recorded_or_uploaded"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.video_recorded_or_uploaded"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "User's device name. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=phone-model-phone_model%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_video_recorded_or_uploaded.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        video_recorded_or_uploaded.event_id as eventID,\n        video_recorded_or_uploaded.user_id as userID,\n        video_recorded_or_uploaded.time as eventTime,\n        video_recorded_or_uploaded.continent as continent,\n        video_recorded_or_uploaded.country as country,\n        video_recorded_or_uploaded.region as region,\n        video_recorded_or_uploaded.city as city,\n        video_recorded_or_uploaded.platform as platform,\n        video_recorded_or_uploaded.device as device,\n        video_recorded_or_uploaded.device_type as deviceType,\n        video_recorded_or_uploaded.browser as browser,\n        video_recorded_or_uploaded.browser_type as browserType,\n        video_recorded_or_uploaded.vidyard_platform as vidyardPlatform,\n        video_recorded_or_uploaded.referrer as referrer,\n        video_recorded_or_uploaded.landing_page as landingPage,\n        video_recorded_or_uploaded.landing_page_query as landingPageQuery,\n        video_recorded_or_uploaded.query as query,\n        video_recorded_or_uploaded.domain as domain,\n        video_recorded_or_uploaded.path as path,\n        video_recorded_or_uploaded.title as title,\n        video_recorded_or_uploaded.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"video_recorded_or_uploaded\" as video_recorded_or_uploaded\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_video_recorded_or_uploaded\""}, "model.master_dbt_models.stg_govideo_production_pageviews": {"raw_sql": "SELECT\n        pageviews.event_id as eventID,\n        pageviews.user_id as userID,\n        pageviews.time as eventTime,\n        pageviews.country as country,\n        pageviews.region as region,\n        pageviews.city as city,\n        pageviews.platform as platform,\n        pageviews.device as device,\n        pageviews.device_type as deviceType,\n        pageviews.browser as browser,\n        pageviews.referrer as referrer,\n        pageviews.landing_page as landingPage,\n        pageviews.landing_page_query as landingPageQuery,\n        pageviews.query as query,\n        pageviews.domain as domain,\n        pageviews.path as path,\n        pageviews.title as title,\n        pageviews.utm_source as utmSource,\n        pageviews.utm_medium as utmMedium,\n        pageviews.utm_campaign as utmCampaign,\n        pageviews.utm_term as utmTerm,\n        pageviews.utm_content as utmContent\nFROM\n        {{ source ('govideo_production' , 'pageviews')}} as pageviews\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_pageviews"], "unique_id": "model.master_dbt_models.stg_govideo_production_pageviews", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_pageviews.sql", "original_file_path": "models/staging/heap/stg_govideo_production_pageviews.sql", "name": "stg_govideo_production_pageviews", "resource_type": "model", "alias": "stg_govideo_production_pageviews", "checksum": {"name": "sha256", "checksum": "043a6fdfbd9cd877a46287a936dc8f1661d015b40ec893a5290cdf73ea7c189b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "pageviews"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.pageviews"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "User's device name. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=phone-model-phone_model%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_pageviews.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        pageviews.event_id as eventID,\n        pageviews.user_id as userID,\n        pageviews.time as eventTime,\n        pageviews.country as country,\n        pageviews.region as region,\n        pageviews.city as city,\n        pageviews.platform as platform,\n        pageviews.device as device,\n        pageviews.device_type as deviceType,\n        pageviews.browser as browser,\n        pageviews.referrer as referrer,\n        pageviews.landing_page as landingPage,\n        pageviews.landing_page_query as landingPageQuery,\n        pageviews.query as query,\n        pageviews.domain as domain,\n        pageviews.path as path,\n        pageviews.title as title,\n        pageviews.utm_source as utmSource,\n        pageviews.utm_medium as utmMedium,\n        pageviews.utm_campaign as utmCampaign,\n        pageviews.utm_term as utmTerm,\n        pageviews.utm_content as utmContent\nFROM\n        \"dev\".\"govideo_production\".\"pageviews\" as pageviews\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_pageviews\""}, "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions": {"raw_sql": "SELECT\n        vidyard_com_sessions.event_id as eventID,\n        vidyard_com_sessions.user_id as userID,\n        vidyard_com_sessions.session_id as sessionID,\n        vidyard_com_sessions.session_time as sessionTime,\n        vidyard_com_sessions.continent as continent,\n        vidyard_com_sessions.country as country,\n        vidyard_com_sessions.region as region,\n        vidyard_com_sessions.city as city,\n        vidyard_com_sessions.platform as platform,\n        vidyard_com_sessions.device_type as deviceType,\n        vidyard_com_sessions.browser as browser,\n        vidyard_com_sessions.browser_type as browserType,\n        vidyard_com_sessions.vidyard_platform as vidyardPlatform,\n        vidyard_com_sessions.referrer as referrer,\n        vidyard_com_sessions.landing_page as landingPage,\n        vidyard_com_sessions.landing_page_query as landingPageQuery,\n        vidyard_com_sessions.query as query,\n        vidyard_com_sessions.domain as domain,\n        vidyard_com_sessions.path as path,\n        vidyard_com_sessions.title as title,\n        vidyard_com_sessions.channels as channels,\n        vidyard_com_sessions.utm_source as utmSource,\n        vidyard_com_sessions.utm_medium as utmMedium,\n        vidyard_com_sessions.utm_campaign as utmCampaign,\n        vidyard_com_sessions.utm_term as utmTerm,\n        vidyard_com_sessions.utm_content as utmContent\n\nFROM\n        {{ source ('govideo_production' , 'vidyard_com_sessions')}} as vidyard_com_sessions\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_vidyard_com_sessions"], "unique_id": "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_vidyard_com_sessions.sql", "original_file_path": "models/staging/heap/stg_govideo_production_vidyard_com_sessions.sql", "name": "stg_govideo_production_vidyard_com_sessions", "resource_type": "model", "alias": "stg_govideo_production_vidyard_com_sessions", "checksum": {"name": "sha256", "checksum": "763ec4c251a6cdd617efb68a3e41ffb271d5287f846b78bfb4ef00756e7e8859"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "vidyard_com_sessions"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.vidyard_com_sessions"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionID": {"name": "sessionID", "description": "The ID of the associated session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionTime": {"name": "sessionTime", "description": "The timestamp of when the session began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels: email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_vidyard_com_sessions.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_com_sessions.event_id as eventID,\n        vidyard_com_sessions.user_id as userID,\n        vidyard_com_sessions.session_id as sessionID,\n        vidyard_com_sessions.session_time as sessionTime,\n        vidyard_com_sessions.continent as continent,\n        vidyard_com_sessions.country as country,\n        vidyard_com_sessions.region as region,\n        vidyard_com_sessions.city as city,\n        vidyard_com_sessions.platform as platform,\n        vidyard_com_sessions.device_type as deviceType,\n        vidyard_com_sessions.browser as browser,\n        vidyard_com_sessions.browser_type as browserType,\n        vidyard_com_sessions.vidyard_platform as vidyardPlatform,\n        vidyard_com_sessions.referrer as referrer,\n        vidyard_com_sessions.landing_page as landingPage,\n        vidyard_com_sessions.landing_page_query as landingPageQuery,\n        vidyard_com_sessions.query as query,\n        vidyard_com_sessions.domain as domain,\n        vidyard_com_sessions.path as path,\n        vidyard_com_sessions.title as title,\n        vidyard_com_sessions.channels as channels,\n        vidyard_com_sessions.utm_source as utmSource,\n        vidyard_com_sessions.utm_medium as utmMedium,\n        vidyard_com_sessions.utm_campaign as utmCampaign,\n        vidyard_com_sessions.utm_term as utmTerm,\n        vidyard_com_sessions.utm_content as utmContent\n\nFROM\n        \"dev\".\"govideo_production\".\"vidyard_com_sessions\" as vidyard_com_sessions\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_vidyard_com_sessions\""}, "model.master_dbt_models.stg_govideo_production_opened_extension": {"raw_sql": "SELECT\n        opened_extension.event_id as eventID,\n        opened_extension.user_id as userID,\n        opened_extension.time as eventTime,\n        opened_extension.continent as continent,\n        opened_extension.country as country,\n        opened_extension.region as region,\n        opened_extension.city as city,\n        opened_extension.platform as platform,\n        opened_extension.device_type as deviceType,\n        opened_extension.browser as browser,\n        opened_extension.browser_type as browserType,\n        opened_extension.vidyard_platform as vidyardPlatform,\n        opened_extension.referrer as referrer,\n        opened_extension.landing_page as landingPage,\n        opened_extension.landing_page_query as landingPageQuery,\n        opened_extension.query as query,\n        opened_extension.domain as domain,\n        opened_extension.path as path,\n        opened_extension.title as title,\n        opened_extension.channels as channels\nFROM\n        {{ source('govideo_production' ,'opened_extension') }} as opened_extension\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_opened_extension"], "unique_id": "model.master_dbt_models.stg_govideo_production_opened_extension", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_opened_extension.sql", "original_file_path": "models/staging/heap/stg_govideo_production_opened_extension.sql", "name": "stg_govideo_production_opened_extension", "resource_type": "model", "alias": "stg_govideo_production_opened_extension", "checksum": {"name": "sha256", "checksum": "a0f76001af63f1dbc6b1894428b9f608273127d524bf0ab82abdfb9f8621b7d5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "opened_extension"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.opened_extension"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": " The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent.https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_opened_extension.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        opened_extension.event_id as eventID,\n        opened_extension.user_id as userID,\n        opened_extension.time as eventTime,\n        opened_extension.continent as continent,\n        opened_extension.country as country,\n        opened_extension.region as region,\n        opened_extension.city as city,\n        opened_extension.platform as platform,\n        opened_extension.device_type as deviceType,\n        opened_extension.browser as browser,\n        opened_extension.browser_type as browserType,\n        opened_extension.vidyard_platform as vidyardPlatform,\n        opened_extension.referrer as referrer,\n        opened_extension.landing_page as landingPage,\n        opened_extension.landing_page_query as landingPageQuery,\n        opened_extension.query as query,\n        opened_extension.domain as domain,\n        opened_extension.path as path,\n        opened_extension.title as title,\n        opened_extension.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"opened_extension\" as opened_extension\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_opened_extension\""}, "model.master_dbt_models.stg_govideo_production_product_sessions": {"raw_sql": "SELECT\n        product_sessions.event_id as eventID,\n        product_sessions.user_id as userID,\n        product_sessions.time as eventTime,\n        product_sessions.continent as continent,\n        product_sessions.country as country,\n        product_sessions.region as region,\n        product_sessions.city as city,\n        product_sessions.platform as platform,\n        product_sessions.device as device,\n        product_sessions.device_type as deviceType,\n        product_sessions.browser as browser,\n        product_sessions.browser_type as browserType,\n        product_sessions.vidyard_platform as vidyardPlatform,\n        product_sessions.referrer as referrer,\n        product_sessions.landing_page as landingPage,\n        product_sessions.landing_page_query as landingPageQuery,\n        product_sessions.query as query,\n        product_sessions.domain as domain,\n        product_sessions.path as path,\n        product_sessions.title as title,\n        product_sessions.channels as channels\nFROM\n        {{ source ('govideo_production', 'product_sessions')}} as product_sessions\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_product_sessions"], "unique_id": "model.master_dbt_models.stg_govideo_production_product_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_product_sessions.sql", "original_file_path": "models/staging/heap/stg_govideo_production_product_sessions.sql", "name": "stg_govideo_production_product_sessions", "resource_type": "model", "alias": "stg_govideo_production_product_sessions", "checksum": {"name": "sha256", "checksum": "cdf786dbdb768df4cf9e6b5bdb1f08cc03f7e588c38087f0842bc4f0cd31edf0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "product_sessions"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.product_sessions"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "decsription": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin"}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io   https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_product_sessions.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        product_sessions.event_id as eventID,\n        product_sessions.user_id as userID,\n        product_sessions.time as eventTime,\n        product_sessions.continent as continent,\n        product_sessions.country as country,\n        product_sessions.region as region,\n        product_sessions.city as city,\n        product_sessions.platform as platform,\n        product_sessions.device as device,\n        product_sessions.device_type as deviceType,\n        product_sessions.browser as browser,\n        product_sessions.browser_type as browserType,\n        product_sessions.vidyard_platform as vidyardPlatform,\n        product_sessions.referrer as referrer,\n        product_sessions.landing_page as landingPage,\n        product_sessions.landing_page_query as landingPageQuery,\n        product_sessions.query as query,\n        product_sessions.domain as domain,\n        product_sessions.path as path,\n        product_sessions.title as title,\n        product_sessions.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"product_sessions\" as product_sessions\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_product_sessions\""}, "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo": {"raw_sql": "SELECT \n        video_creation_started_to_create_or_upload_a_video_combo.event_id as eventID,\n        video_creation_started_to_create_or_upload_a_video_combo.user_id as userID,\n        video_creation_started_to_create_or_upload_a_video_combo.time as eventTime,\n        video_creation_started_to_create_or_upload_a_video_combo.continent as continent,\n        video_creation_started_to_create_or_upload_a_video_combo.country as country,\n        video_creation_started_to_create_or_upload_a_video_combo.region as region,\n        video_creation_started_to_create_or_upload_a_video_combo.city as city,\n        video_creation_started_to_create_or_upload_a_video_combo.platform as platform,\n        video_creation_started_to_create_or_upload_a_video_combo.device_type as deviceType,\n        video_creation_started_to_create_or_upload_a_video_combo.browser as browser,\n        video_creation_started_to_create_or_upload_a_video_combo.browser_type as browserType,\n        video_creation_started_to_create_or_upload_a_video_combo.vidyard_platform as vidyardPlatform,\n        video_creation_started_to_create_or_upload_a_video_combo.referrer as referrer,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page as landingPage,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page_query as landingPageQuery,\n        video_creation_started_to_create_or_upload_a_video_combo.query as query,\n        video_creation_started_to_create_or_upload_a_video_combo.domain as domain,\n        video_creation_started_to_create_or_upload_a_video_combo.path as path,\n        video_creation_started_to_create_or_upload_a_video_combo.title as title,\n        video_creation_started_to_create_or_upload_a_video_combo.channels as channels\nFROM\n        {{ source ('govideo_production' , 'video_creation_started_to_create_or_upload_a_video_combo')}} as video_creation_started_to_create_or_upload_a_video_combo\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "unique_id": "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo.sql", "original_file_path": "models/staging/heap/stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo.sql", "name": "stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo", "resource_type": "model", "alias": "stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo", "checksum": {"name": "sha256", "checksum": "11c32dcbcdf3aa9b9902717fcc0f23a821002f6a731c50f8e6179e8a22283829"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "video_creation_started_to_create_or_upload_a_video_combo"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        video_creation_started_to_create_or_upload_a_video_combo.event_id as eventID,\n        video_creation_started_to_create_or_upload_a_video_combo.user_id as userID,\n        video_creation_started_to_create_or_upload_a_video_combo.time as eventTime,\n        video_creation_started_to_create_or_upload_a_video_combo.continent as continent,\n        video_creation_started_to_create_or_upload_a_video_combo.country as country,\n        video_creation_started_to_create_or_upload_a_video_combo.region as region,\n        video_creation_started_to_create_or_upload_a_video_combo.city as city,\n        video_creation_started_to_create_or_upload_a_video_combo.platform as platform,\n        video_creation_started_to_create_or_upload_a_video_combo.device_type as deviceType,\n        video_creation_started_to_create_or_upload_a_video_combo.browser as browser,\n        video_creation_started_to_create_or_upload_a_video_combo.browser_type as browserType,\n        video_creation_started_to_create_or_upload_a_video_combo.vidyard_platform as vidyardPlatform,\n        video_creation_started_to_create_or_upload_a_video_combo.referrer as referrer,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page as landingPage,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page_query as landingPageQuery,\n        video_creation_started_to_create_or_upload_a_video_combo.query as query,\n        video_creation_started_to_create_or_upload_a_video_combo.domain as domain,\n        video_creation_started_to_create_or_upload_a_video_combo.path as path,\n        video_creation_started_to_create_or_upload_a_video_combo.title as title,\n        video_creation_started_to_create_or_upload_a_video_combo.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"video_creation_started_to_create_or_upload_a_video_combo\" as video_creation_started_to_create_or_upload_a_video_combo\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo\""}, "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview": {"raw_sql": "SELECT\n        vidyard_com_any_pageview.event_id as eventID,\n        vidyard_com_any_pageview.user_id as userID,\n        vidyard_com_any_pageview.time as eventTime,\n        vidyard_com_any_pageview.continent as continent,\n        vidyard_com_any_pageview.country as country,\n        vidyard_com_any_pageview.region as region,\n        vidyard_com_any_pageview.city as city,\n        vidyard_com_any_pageview.platform as platform,\n        vidyard_com_any_pageview.device_type as deviceType,\n        vidyard_com_any_pageview.browser as browser,\n        vidyard_com_any_pageview.browser_type as browserType,\n        vidyard_com_any_pageview.vidyard_platform as vidyardPlatform,\n        vidyard_com_any_pageview.referrer as referrer,\n        vidyard_com_any_pageview.landing_page as landingPage,\n        vidyard_com_any_pageview.landing_page_query as landingPageQuery,\n        vidyard_com_any_pageview.query as query,\n        vidyard_com_any_pageview.domain as domain,\n        vidyard_com_any_pageview.path as path,\n        vidyard_com_any_pageview.title as title,\n        vidyard_com_any_pageview.channels as channels,\n        vidyard_com_any_pageview.utm_source as utmSource,\n        vidyard_com_any_pageview.utm_medium as utmMedium,\n        vidyard_com_any_pageview.utm_campaign as utmCampaign,\n        vidyard_com_any_pageview.utm_term as utmTerm,\n        vidyard_com_any_pageview.utm_content as utmContent\nFROM\n        {{ source ('govideo_production' , 'vidyard_com_any_pageview')}} as vidyard_com_any_pageview\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_vidyard_com_any_pageview"], "unique_id": "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_vidyard_com_any_pageview.sql", "original_file_path": "models/staging/heap/stg_govideo_production_vidyard_com_any_pageview.sql", "name": "stg_govideo_production_vidyard_com_any_pageview", "resource_type": "model", "alias": "stg_govideo_production_vidyard_com_any_pageview", "checksum": {"name": "sha256", "checksum": "68ef35f8014df78718dc34f0a0d12b7483388dcb7bbd660440af6554293c47fc"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "vidyard_com_any_pageview"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.vidyard_com_any_pageview"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_vidyard_com_any_pageview.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_com_any_pageview.event_id as eventID,\n        vidyard_com_any_pageview.user_id as userID,\n        vidyard_com_any_pageview.time as eventTime,\n        vidyard_com_any_pageview.continent as continent,\n        vidyard_com_any_pageview.country as country,\n        vidyard_com_any_pageview.region as region,\n        vidyard_com_any_pageview.city as city,\n        vidyard_com_any_pageview.platform as platform,\n        vidyard_com_any_pageview.device_type as deviceType,\n        vidyard_com_any_pageview.browser as browser,\n        vidyard_com_any_pageview.browser_type as browserType,\n        vidyard_com_any_pageview.vidyard_platform as vidyardPlatform,\n        vidyard_com_any_pageview.referrer as referrer,\n        vidyard_com_any_pageview.landing_page as landingPage,\n        vidyard_com_any_pageview.landing_page_query as landingPageQuery,\n        vidyard_com_any_pageview.query as query,\n        vidyard_com_any_pageview.domain as domain,\n        vidyard_com_any_pageview.path as path,\n        vidyard_com_any_pageview.title as title,\n        vidyard_com_any_pageview.channels as channels,\n        vidyard_com_any_pageview.utm_source as utmSource,\n        vidyard_com_any_pageview.utm_medium as utmMedium,\n        vidyard_com_any_pageview.utm_campaign as utmCampaign,\n        vidyard_com_any_pageview.utm_term as utmTerm,\n        vidyard_com_any_pageview.utm_content as utmContent\nFROM\n        \"dev\".\"govideo_production\".\"vidyard_com_any_pageview\" as vidyard_com_any_pageview\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_vidyard_com_any_pageview\""}, "model.master_dbt_models.stg_govideo_production_sharing_share_combo": {"raw_sql": "SELECT\n    share_combo.event_id as eventID,\n    share_combo.user_id as userID,\n    share_combo.session_id as sessionID,\n    share_combo.time as eventTime,\n    share_combo.session_time as sessionTime,\n    share_combo.continent as continent,\n    share_combo.country as country,\n    share_combo.region as region,\n    share_combo.city as city,\n    share_combo.platform as platform,\n    share_combo.device as device,\n    share_combo.device_type as deviceType,\n    share_combo.browser as browser,\n    share_combo.browser_type as browserType,\n    share_combo.vidyard_platform as vidyardPlatform,\n    share_combo.referrer as referrer,\n    share_combo.landing_page as landingPage,\n    share_combo.landing_page_query as landingPageQuery,\n    share_combo.query as query,\n    share_combo.domain as domain,\n    share_combo.path as path,\n    share_combo.title as title,\n    share_combo.channels as channels\nFROM\n    {{ source ('govideo_production' , 'sharing_share_combo')}} as share_combo\nWHERE\n    TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_sharing_share_combo"], "unique_id": "model.master_dbt_models.stg_govideo_production_sharing_share_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_sharing_share_combo.sql", "original_file_path": "models/staging/heap/stg_govideo_production_sharing_share_combo.sql", "name": "stg_govideo_production_sharing_share_combo", "resource_type": "model", "alias": "stg_govideo_production_sharing_share_combo", "checksum": {"name": "sha256", "checksum": "b6cd998cc9a436f071fd92f90834bc9b4a9f5930e3fc8002b94e165d24ee4232"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "sharing_share_combo"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.sharing_share_combo"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionID": {"name": "sessionID", "description": "The ID of the associated session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionTime": {"name": "sessionTime", "description": "The timestamp of when the session began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "User's device name. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=phone-model-phone_model%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property: The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels: email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_sharing_share_combo.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    share_combo.event_id as eventID,\n    share_combo.user_id as userID,\n    share_combo.session_id as sessionID,\n    share_combo.time as eventTime,\n    share_combo.session_time as sessionTime,\n    share_combo.continent as continent,\n    share_combo.country as country,\n    share_combo.region as region,\n    share_combo.city as city,\n    share_combo.platform as platform,\n    share_combo.device as device,\n    share_combo.device_type as deviceType,\n    share_combo.browser as browser,\n    share_combo.browser_type as browserType,\n    share_combo.vidyard_platform as vidyardPlatform,\n    share_combo.referrer as referrer,\n    share_combo.landing_page as landingPage,\n    share_combo.landing_page_query as landingPageQuery,\n    share_combo.query as query,\n    share_combo.domain as domain,\n    share_combo.path as path,\n    share_combo.title as title,\n    share_combo.channels as channels\nFROM\n    \"dev\".\"govideo_production\".\"sharing_share_combo\" as share_combo\nWHERE\n    TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_sharing_share_combo\""}, "model.master_dbt_models.stg_govideo_production_global_session": {"raw_sql": "SELECT \n        global_session.event_id as eventID,\n        global_session.user_id as userID,\n        global_session.session_id as sessionID,\n        global_session.session_time as sessionTime,\n        global_session.continent as continent,\n        global_session.country as country,\n        global_session.region as region,\n        global_session.city as city,\n        global_session.platform as platform,\n        global_session.device_type as deviceType,\n        global_session.browser as browser,\n        global_session.browser_type as browserType,\n        global_session.vidyard_platform as vidyardPlatform,\n        global_session.referrer as referrer,\n        global_session.landing_page as landingPage,\n        global_session.landing_page_query as landingPageQuery,\n        global_session.query as query,\n        global_session.domain as domain,\n        global_session.path as path,\n        global_session.title as title,\n        global_session.channels as channels,\n        global_session.utm_source as utmSource,\n        global_session.utm_medium as utmMedium,\n        global_session.utm_campaign as utmCampaign,\n        global_session.utm_term as utmTerm,\n        global_session.utm_content as utmContent\nFROM\n        {{ source('govideo_production' , 'global_session')}} as global_session\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_global_session"], "unique_id": "model.master_dbt_models.stg_govideo_production_global_session", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_global_session.sql", "original_file_path": "models/staging/heap/stg_govideo_production_global_session.sql", "name": "stg_govideo_production_global_session", "resource_type": "model", "alias": "stg_govideo_production_global_session", "checksum": {"name": "sha256", "checksum": "23402b0b8eaa33406505bfa6dbde6dd183bbf86780ad98aba15bc34c2a843511"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "global_session"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.global_session"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionID": {"name": "sessionID", "description": "The ID of the associated session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionTime": {"name": "sessionTime", "description": "The timestamp of when the session began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_global_session.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        global_session.event_id as eventID,\n        global_session.user_id as userID,\n        global_session.session_id as sessionID,\n        global_session.session_time as sessionTime,\n        global_session.continent as continent,\n        global_session.country as country,\n        global_session.region as region,\n        global_session.city as city,\n        global_session.platform as platform,\n        global_session.device_type as deviceType,\n        global_session.browser as browser,\n        global_session.browser_type as browserType,\n        global_session.vidyard_platform as vidyardPlatform,\n        global_session.referrer as referrer,\n        global_session.landing_page as landingPage,\n        global_session.landing_page_query as landingPageQuery,\n        global_session.query as query,\n        global_session.domain as domain,\n        global_session.path as path,\n        global_session.title as title,\n        global_session.channels as channels,\n        global_session.utm_source as utmSource,\n        global_session.utm_medium as utmMedium,\n        global_session.utm_campaign as utmCampaign,\n        global_session.utm_term as utmTerm,\n        global_session.utm_content as utmContent\nFROM\n        \"dev\".\"govideo_production\".\"global_session\" as global_session\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_global_session\""}, "model.master_dbt_models.stg_govideo_production_users": {"raw_sql": "SELECT\n        users.user_id as userID,\n        cast(users.\"identity\" as varchar(10)) as \"identity\",\n        users.appcuesuserid as appcuesUserID,\n        users.joindate as joinDate,\n        users.last_modified as lastModifiedDate,\n        users.video_completion as videoCompletion,\n        users.extensionversion as extensionVersion,\n        users.camera_enabled as cameraEnabled,\n        users.appversion as appVersion,\n        users.microphone_enabled as microphoneEnabled,\n        users.camera_allowed as cameraAllowed,\n        users.microphone_allowed as microphoneAllowed,\n        users.mirrored_camera as mirroredCamera,\n        users.general_use_case as generalUseCase,\n        users.specific_use_case as specificUseCase,\n        users.tailored_onboarding_use_case_response as onboardingUsecaseResponse\n\nFROM\n        {{ source('govideo_production' , 'users')}} as users\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_users"], "unique_id": "model.master_dbt_models.stg_govideo_production_users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_users.sql", "original_file_path": "models/staging/heap/stg_govideo_production_users.sql", "name": "stg_govideo_production_users", "resource_type": "model", "alias": "stg_govideo_production_users", "checksum": {"name": "sha256", "checksum": "ad8429c01276a501f8124deadecccc72a4576be1ac4a625034de9c65a89ef6aa"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "users"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.users"]}, "description": "", "columns": {"userID": {"name": "userID", "description": "a randomly generated user ID used to identify a user in Heap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identity": {"name": "identity", "description": "If you configure your Heap implementation to use the Identify API, this is where it will appear. Tranformed - cast(identity as varchar(10)) as identity ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "appcuesUserID": {"name": "appcuesUserID", "description": "custom api user property giving you the appcues user id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "joinDate": {"name": "joinDate", "description": "the date a user was first identified in heap?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastModifiedDate": {"name": "lastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "videoCompletion": {"name": "videoCompletion", "description": "custom api user property; have to check with a developer to see what the actual defintion via code is", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extensionVersion": {"name": "extensionVersion", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cameraEnabled": {"name": "cameraEnabled", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "appVersion": {"name": "appVersion", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "microphoneEnabled": {"name": "microphoneEnabled", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cameraAllowed": {"name": "cameraAllowed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "microphoneAllowed": {"name": "microphoneAllowed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mirroredCamera": {"name": "mirroredCamera", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generalUseCase": {"name": "generalUseCase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specificUseCase": {"name": "specificUseCase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "onboardingUsecaseResponse": {"name": "onboardingUsecaseResponse", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_users.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        users.user_id as userID,\n        cast(users.\"identity\" as varchar(10)) as \"identity\",\n        users.appcuesuserid as appcuesUserID,\n        users.joindate as joinDate,\n        users.last_modified as lastModifiedDate,\n        users.video_completion as videoCompletion,\n        users.extensionversion as extensionVersion,\n        users.camera_enabled as cameraEnabled,\n        users.appversion as appVersion,\n        users.microphone_enabled as microphoneEnabled,\n        users.camera_allowed as cameraAllowed,\n        users.microphone_allowed as microphoneAllowed,\n        users.mirrored_camera as mirroredCamera,\n        users.general_use_case as generalUseCase,\n        users.specific_use_case as specificUseCase,\n        users.tailored_onboarding_use_case_response as onboardingUsecaseResponse\n\nFROM\n        \"dev\".\"govideo_production\".\"users\" as users\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_users\""}, "model.master_dbt_models.stg_zuora_subscription": {"raw_sql": "SELECT \n        subscription.id as subscriptionId,\n        subscription.account_id as accountId,\n        subscription.cancelled_date as cancelledDate,\n        subscription.contract_effective_date as contractStartDate,\n        subscription.created_by_id as createdById,\n        subscription.created_date as createdDate,\n        subscription.current_term as currentTerm,\n        subscription.current_term_period_type as currentTermPeriodType,\n        subscription.initial_term as initialTerm,\n        subscription.initial_term_period_type as initialTermPeriodType,\n        subscription.name as name,\n        subscription.original_created_date as originalCreatedDate,\n        subscription.original_id as originalSubscriptionId,\n        subscription.previous_subscription_id as previousSubscriptionId,\n        subscription.renewal_term as renewalTerm,\n        subscription.renewal_term_period_type as renewalTermPeriodType,\n        subscription.status as status,\n        subscription.subscription_end_date as subscriptionEndDate,\n        subscription.subscription_start_date as subscriptionStartDate,\n        subscription.term_end_date as termEndDate,\n        subscription.term_start_date as termStartDate,\n        subscription.term_type as termType,\n        subscription.updated_by_id as updatedById,\n        subscription.updated_date as updatedDate,\n        subscription.vidyard_cancel_date_c as vidyardCancelDate,\n        subscription._fivetran_deleted as fivetranDeleted,\n        subscription.sold_to_contact_id as soldToContactId,\n        subscription.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        subscription.default_payment_method_id as defaultPaymentMethodId,\n        subscription.bill_to_contact_id as billToContactId\n\nFROM\n    {{ source ('zuora', 'subscription')}} as subscription\n\nWHERE\n\n    TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_subscription"], "unique_id": "model.master_dbt_models.stg_zuora_subscription", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_subscription.sql", "original_file_path": "models/staging/zuora/stg_zuora_subscription.sql", "name": "stg_zuora_subscription", "resource_type": "model", "alias": "stg_zuora_subscription", "checksum": {"name": "sha256", "checksum": "ede142e0b9bbf463b31613f3d92152faad2dce79bad50c93ceca1bced1a0b6f9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "subscription"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.subscription"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_subscription.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        subscription.id as subscriptionId,\n        subscription.account_id as accountId,\n        subscription.cancelled_date as cancelledDate,\n        subscription.contract_effective_date as contractStartDate,\n        subscription.created_by_id as createdById,\n        subscription.created_date as createdDate,\n        subscription.current_term as currentTerm,\n        subscription.current_term_period_type as currentTermPeriodType,\n        subscription.initial_term as initialTerm,\n        subscription.initial_term_period_type as initialTermPeriodType,\n        subscription.name as name,\n        subscription.original_created_date as originalCreatedDate,\n        subscription.original_id as originalSubscriptionId,\n        subscription.previous_subscription_id as previousSubscriptionId,\n        subscription.renewal_term as renewalTerm,\n        subscription.renewal_term_period_type as renewalTermPeriodType,\n        subscription.status as status,\n        subscription.subscription_end_date as subscriptionEndDate,\n        subscription.subscription_start_date as subscriptionStartDate,\n        subscription.term_end_date as termEndDate,\n        subscription.term_start_date as termStartDate,\n        subscription.term_type as termType,\n        subscription.updated_by_id as updatedById,\n        subscription.updated_date as updatedDate,\n        subscription.vidyard_cancel_date_c as vidyardCancelDate,\n        subscription._fivetran_deleted as fivetranDeleted,\n        subscription.sold_to_contact_id as soldToContactId,\n        subscription.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        subscription.default_payment_method_id as defaultPaymentMethodId,\n        subscription.bill_to_contact_id as billToContactId\n\nFROM\n    \"dev\".\"zuora\".\"subscription\" as subscription\n\nWHERE\n\n    TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_subscription\""}, "model.master_dbt_models.stg_zuora_account": {"raw_sql": "SELECT \n        account.id as accountId,\n        account.account_number as accountNumber,\n        account.created_by_id as createdById,\n        account.created_date as createdDate,\n        account.crm_id as crmId,\n        account.customer_acquisition_date_c as customerAcquisitionDate,\n        account.cx_department_c as cxDepartment,\n        account.mrr as net_mrr,\n        account.name as accountName,\n        account.status as accountStatus,\n        account.sales_rep_name as salesRepName,\n        account.vidyard_id_c as vidyardId,\n        account.sold_to_contact_id as soldToContactId,\n        account.bill_to_contact_id as billToContactId,\n        account.updated_by_id as updatedById,\n        account.updated_date as updatedDate,\n        account._fivetran_deleted as fivetranDeleted,\n        account._fivetran_synced as fivetranSynced\nFROM\n        {{ source ('zuora', 'account')}} as account\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_account"], "unique_id": "model.master_dbt_models.stg_zuora_account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_account.sql", "original_file_path": "models/staging/zuora/stg_zuora_account.sql", "name": "stg_zuora_account", "resource_type": "model", "alias": "stg_zuora_account", "checksum": {"name": "sha256", "checksum": "d56876fa1af7329a689f971eae2bbce464fad5d7719f3f863fd961a2d6d32bae"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "account"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.account"]}, "description": "", "columns": {"accountId": {"name": "accountId", "description": "Unique Identifier Generated by Zuora for the Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountNumber": {"name": "accountNumber", "description": "Unique Identifier Generated by Zuora for the Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "Identifier of Zuora user who created account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Date of when account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crmId": {"name": "crmId", "description": "Corresponding Salesforce Account ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerAcquisitionDate": {"name": "customerAcquisitionDate", "description": "Date of Acquisiton", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cxDepartment": {"name": "cxDepartment", "description": "Enterprise Department Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_mrr": {"name": "net_mrr", "description": "MRR of the contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountName": {"name": "accountName", "description": "Name of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountStatus": {"name": "accountStatus", "description": "Current Status of Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesRepName": {"name": "salesRepName", "description": "Name of AE who sold the contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardId": {"name": "vidyardId", "description": "Corresponding Vidyard Account ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "soldToContactId": {"name": "soldToContactId", "description": "Identifier of Zuora buyer contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billToContactId": {"name": "billToContactId", "description": "Identifier of Zuora bill recipient contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedById": {"name": "updatedById", "description": "Identifier of Zuora user who updated account last", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "Date of when account was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranDeleted": {"name": "fivetranDeleted", "description": "Flag when fivetran deletes record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranSynced": {"name": "fivetranSynced", "description": "Date when fivetran synced record", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_account.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        account.id as accountId,\n        account.account_number as accountNumber,\n        account.created_by_id as createdById,\n        account.created_date as createdDate,\n        account.crm_id as crmId,\n        account.customer_acquisition_date_c as customerAcquisitionDate,\n        account.cx_department_c as cxDepartment,\n        account.mrr as net_mrr,\n        account.name as accountName,\n        account.status as accountStatus,\n        account.sales_rep_name as salesRepName,\n        account.vidyard_id_c as vidyardId,\n        account.sold_to_contact_id as soldToContactId,\n        account.bill_to_contact_id as billToContactId,\n        account.updated_by_id as updatedById,\n        account.updated_date as updatedDate,\n        account._fivetran_deleted as fivetranDeleted,\n        account._fivetran_synced as fivetranSynced\nFROM\n        \"dev\".\"zuora\".\"account\" as account\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_account\""}, "model.master_dbt_models.stg_zuora_product": {"raw_sql": "SELECT\n        product.id as productId,\n        product.allow_feature_changes as allowFeatureChanges,\n        product.category as category,\n        product.created_by_id as createdById,\n        product.created_date as createdDate,\n        product.description as description,\n        product.effective_end_date as effectiveEndDate,\n        product.effective_start_date as effectiveStartDate,\n        product.name as name,\n        product.optional_for_c as optionalFor,\n        product.plan_type_c as planType,\n        product.price_book_c as priceBook,\n        product.sku as sku,\n        product.sub_category_c as subCategory,\n        product.updated_by_id as updatedById,\n        product.updated_date as updatedDate\n\nFROM\n\n        {{ source ('zuora', 'product')}} as product\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_product"], "unique_id": "model.master_dbt_models.stg_zuora_product", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_product.sql", "original_file_path": "models/staging/zuora/stg_zuora_product.sql", "name": "stg_zuora_product", "resource_type": "model", "alias": "stg_zuora_product", "checksum": {"name": "sha256", "checksum": "7bd04b69e895b029cf2a8504287ded559ac8b45b5d0e4d57a83708ca46bb51b6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "product"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.product"]}, "description": "", "columns": {"productId": {"name": "productId", "description": "Unique product identifier assigned by Zuora", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowFeatureChanges": {"name": "allowFeatureChanges", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Vidyard related package to what this product relates to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "The ID of the user in Zuora that created the product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Object created date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "General description of what the product is", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveEndDate": {"name": "effectiveEndDate", "description": "Time frame (End) in which the product will be valid for offering", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveStartDate": {"name": "effectiveStartDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "descpription": "Time frame (Start) in which the product will be valid for offering"}, "name": {"name": "name", "description": "User friendly name of the product (Matches to what Marketing and sales offer)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optionalFor": {"name": "optionalFor", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "planType": {"name": "planType", "description": "Package level in which this product is offered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priceBook": {"name": "priceBook", "description": "The price book to what this product is configured to use", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "Internal Vidyard generated identifier for this product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subCategory": {"name": "subCategory", "description": "Type of offering inside Vidyard defined packages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedById": {"name": "updatedById", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_product.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        product.id as productId,\n        product.allow_feature_changes as allowFeatureChanges,\n        product.category as category,\n        product.created_by_id as createdById,\n        product.created_date as createdDate,\n        product.description as description,\n        product.effective_end_date as effectiveEndDate,\n        product.effective_start_date as effectiveStartDate,\n        product.name as name,\n        product.optional_for_c as optionalFor,\n        product.plan_type_c as planType,\n        product.price_book_c as priceBook,\n        product.sku as sku,\n        product.sub_category_c as subCategory,\n        product.updated_by_id as updatedById,\n        product.updated_date as updatedDate\n\nFROM\n\n        \"dev\".\"zuora\".\"product\" as product\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_product\""}, "model.master_dbt_models.stg_zuora_rate_plan": {"raw_sql": "SELECT\n        rate_plan.id as ratePlanID,\n        rate_plan.amendment_id as amendmentID,\n        rate_plan.amendment_subscription_rate_plan_id as amendmentSubscriptionRatePlanId,\n        rate_plan.amendment_type as amendmentType,\n        rate_plan.created_by_id as createdById,\n        rate_plan.created_date as createdDate,\n        rate_plan.name as name,\n        rate_plan.product_rate_plan_id as productRatePlanId,\n        rate_plan.subscription_id as subscriptionId,\n        rate_plan.updated_by_id as updatedbyId,\n        rate_plan.updated_date as updatedDate,\n        rate_plan.sold_to_contact_id as soldToContactId,\n        rate_plan.account_id as accountId,\n        rate_plan.product_id as productId,\n        rate_plan.bill_to_contact_id as billtoContactId,\n        rate_plan.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        rate_plan.default_payment_method_id as defaultPaymentMethodId,\n        rate_plan.triggersync_c as triggerSync,\n        rate_plan.parent_account_id as parentAccountId\n\nFROM\n        {{ source ('zuora', 'rate_plan')}} as rate_plan\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_rate_plan"], "unique_id": "model.master_dbt_models.stg_zuora_rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_rate_plan.sql", "original_file_path": "models/staging/zuora/stg_zuora_rate_plan.sql", "name": "stg_zuora_rate_plan", "resource_type": "model", "alias": "stg_zuora_rate_plan", "checksum": {"name": "sha256", "checksum": "33b34fc30870765bd97ca03e1d4abb70bc8ac4299b6d90b6b4465d22598a6b74"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "rate_plan"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.rate_plan"]}, "description": "", "columns": {"ratePlanID": {"name": "ratePlanID", "description": "Unique Identifier Generated by Zuora", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendmentID": {"name": "amendmentID", "description": "Amendment ID attached to Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendmentSubscriptionRatePlanId": {"name": "amendmentSubscriptionRatePlanId", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendmentType": {"name": "amendmentType", "description": "The type of amendment installed on subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "ID of user that created Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Creation Date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productRatePlanId": {"name": "productRatePlanId", "description": "ID of the rate plan linked to the Product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriptionId": {"name": "subscriptionId", "description": "Subscription ID linked to Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedbyId": {"name": "updatedbyId", "description": "Id of User that Updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "last updated date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "soldToContactId": {"name": "soldToContactId", "description": "ID of contact that rate plan was Sold to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "Account Id attached to Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productId": {"name": "productId", "description": "Product ID attached to rateplan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billtoContactId": {"name": "billtoContactId", "description": "ID of contact that rate plan was billed to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriptionVersionAmendmentId": {"name": "subscriptionVersionAmendmentId", "description": "Amendment version", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultPaymentMethodId": {"name": "defaultPaymentMethodId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "triggerSync": {"name": "triggerSync", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentAccountId": {"name": "parentAccountId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_rate_plan.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        rate_plan.id as ratePlanID,\n        rate_plan.amendment_id as amendmentID,\n        rate_plan.amendment_subscription_rate_plan_id as amendmentSubscriptionRatePlanId,\n        rate_plan.amendment_type as amendmentType,\n        rate_plan.created_by_id as createdById,\n        rate_plan.created_date as createdDate,\n        rate_plan.name as name,\n        rate_plan.product_rate_plan_id as productRatePlanId,\n        rate_plan.subscription_id as subscriptionId,\n        rate_plan.updated_by_id as updatedbyId,\n        rate_plan.updated_date as updatedDate,\n        rate_plan.sold_to_contact_id as soldToContactId,\n        rate_plan.account_id as accountId,\n        rate_plan.product_id as productId,\n        rate_plan.bill_to_contact_id as billtoContactId,\n        rate_plan.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        rate_plan.default_payment_method_id as defaultPaymentMethodId,\n        rate_plan.triggersync_c as triggerSync,\n        rate_plan.parent_account_id as parentAccountId\n\nFROM\n        \"dev\".\"zuora\".\"rate_plan\" as rate_plan\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_rate_plan\""}, "model.master_dbt_models.stg_zuora_product_rate_plan": {"raw_sql": "SELECT \n        product_rate_plan.id as productRatePlanId,\n        product_rate_plan.active_currencies as activeCurrencies,\n        product_rate_plan.created_by_id as CreatedById,\n        product_rate_plan.created_date as createdDate,\n        product_rate_plan.description as description,\n        product_rate_plan.effective_end_date as effectiveEndDate,\n        product_rate_plan.effective_start_date as effectiveStartDate,\n        product_rate_plan.name as name,\n        product_rate_plan.product_id as productId,\n        product_rate_plan.updated_by_id as UpdatedByID,\n        product_rate_plan.updated_date as updatedDate,\n        product_rate_plan.visible_c as visible,\n        product_rate_plan.billing_period_c as billingPeriod,\n        product_rate_plan.pvstatus_c as pvStatus\n\nFROM\n        {{ source ('zuora', 'product_rate_plan')}} as product_rate_plan\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_product_rate_plan"], "unique_id": "model.master_dbt_models.stg_zuora_product_rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_product_rate_plan.sql", "original_file_path": "models/staging/zuora/stg_zuora_product_rate_plan.sql", "name": "stg_zuora_product_rate_plan", "resource_type": "model", "alias": "stg_zuora_product_rate_plan", "checksum": {"name": "sha256", "checksum": "c625b3fbc4753c90e5aca8f942d5bc9aaa09b40be42eb2742ae1f71e6a7b4729"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "product_rate_plan"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.product_rate_plan"]}, "description": "", "columns": {"productRatePlanId": {"name": "productRatePlanId", "description": "Zuora Generated unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activeCurrencies": {"name": "activeCurrencies", "description": "Currency in which the plan is calculated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedById": {"name": "CreatedById", "description": "User ID of the admin who created the package", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Creation Date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Long text form that describes the different rate plan created for the product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveEndDate": {"name": "effectiveEndDate", "description": "Final date of validity for this price plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveStartDate": {"name": "effectiveStartDate", "description": "Start date of validity for plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "General name for Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productId": {"name": "productId", "description": "Identifier that links the product to the rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UpdatedByID": {"name": "UpdatedByID", "description": "User ID of the last user that updated the package", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "Last Updated Date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visible": {"name": "visible", "description": "Flag that defines the availability for clients to see the offering", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingPeriod": {"name": "billingPeriod", "description": "Billing timeframe in which this plan is applied", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pvStatus": {"name": "pvStatus", "description": "Unique for Personalized Video that defines the type of customer for the rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_product_rate_plan.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        product_rate_plan.id as productRatePlanId,\n        product_rate_plan.active_currencies as activeCurrencies,\n        product_rate_plan.created_by_id as CreatedById,\n        product_rate_plan.created_date as createdDate,\n        product_rate_plan.description as description,\n        product_rate_plan.effective_end_date as effectiveEndDate,\n        product_rate_plan.effective_start_date as effectiveStartDate,\n        product_rate_plan.name as name,\n        product_rate_plan.product_id as productId,\n        product_rate_plan.updated_by_id as UpdatedByID,\n        product_rate_plan.updated_date as updatedDate,\n        product_rate_plan.visible_c as visible,\n        product_rate_plan.billing_period_c as billingPeriod,\n        product_rate_plan.pvstatus_c as pvStatus\n\nFROM\n        \"dev\".\"zuora\".\"product_rate_plan\" as product_rate_plan\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_product_rate_plan\""}, "model.master_dbt_models.stg_zuora_contact": {"raw_sql": "SELECT\n        contact.id as contactId,\n        contact.account_id as accountId,\n        contact.created_by_id as createdById,\n        contact.created_date as createdDate,\n        contact.city as city,\n        contact.country as country,\n        contact.first_name as firstName,\n        contact.last_name as lastName,\n        contact.personal_email as personalEmail,\n        contact.postal_code as postalCode,\n        contact.state as state,\n        contact.work_email as workEmail,\n        contact.updated_by_id as updatedById,\n        contact.updated_date as updatedDate,\n        contact._fivetran_deleted as fivetranDeleted,\n        contact._fivetran_synced as fivetranSynced\nFROM\n        {{ source ('zuora' , 'contact')}} as contact\n\nWHERE\n\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_contact"], "unique_id": "model.master_dbt_models.stg_zuora_contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_contact.sql", "original_file_path": "models/staging/zuora/stg_zuora_contact.sql", "name": "stg_zuora_contact", "resource_type": "model", "alias": "stg_zuora_contact", "checksum": {"name": "sha256", "checksum": "01ad9b956ecd519827401ad35a6e0bddf390e8e11c831ca5cb82de4fddd8de0e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "contact"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.contact"]}, "description": "", "columns": {"contactId": {"name": "contactId", "description": "Unique Identifier Generated by Zuora for the Contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "Identifier for the associated Zuora account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "Identifier of Zuora user who created contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Date of when contact was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "City of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "First name of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "Last name of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personalEmail": {"name": "personalEmail", "description": "Non-work email of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postalCode": {"name": "postalCode", "description": "Postal code of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "State of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workEmail": {"name": "workEmail", "description": "Work email of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedById": {"name": "updatedById", "description": "Identifier of Zuora user who updated contact last", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "Date of when contact was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranDeleted": {"name": "fivetranDeleted", "description": "Flag when fivetran deletes record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranSynced": {"name": "fivetranSynced", "description": "Date when fivetran synced record", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_contact.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        contact.id as contactId,\n        contact.account_id as accountId,\n        contact.created_by_id as createdById,\n        contact.created_date as createdDate,\n        contact.city as city,\n        contact.country as country,\n        contact.first_name as firstName,\n        contact.last_name as lastName,\n        contact.personal_email as personalEmail,\n        contact.postal_code as postalCode,\n        contact.state as state,\n        contact.work_email as workEmail,\n        contact.updated_by_id as updatedById,\n        contact.updated_date as updatedDate,\n        contact._fivetran_deleted as fivetranDeleted,\n        contact._fivetran_synced as fivetranSynced\nFROM\n        \"dev\".\"zuora\".\"contact\" as contact\n\nWHERE\n\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_contact\""}, "model.master_dbt_models.stg_vidyard_features": {"raw_sql": "SELECT \n\tvidyard_features.id as featureId,\n\tvidyard_features.friendly_name as friendlyName,\n\tvidyard_features.include_by_default as includeByDefault,\n\tvidyard_features.category as category,\n\tvidyard_features.unique_name as uniqueName\r\n FROM \n\t{{ source('public', 'vidyard_features') }} as vidyard_features", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_features"], "unique_id": "model.master_dbt_models.stg_vidyard_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_features.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_features.sql", "name": "stg_vidyard_features", "resource_type": "model", "alias": "stg_vidyard_features", "checksum": {"name": "sha256", "checksum": "c460c01436f2a44db28ce35054261d2d1d6a4e21a8832061a4058b81acb04644"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_features"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_features"]}, "description": "", "columns": {"featureId": {"name": "featureId", "description": "the unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "friendlyName": {"name": "friendlyName", "description": "description of the features", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includeByDefault": {"name": "includeByDefault", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "what category the feature falls under", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uniqueName": {"name": "uniqueName", "description": "name of the feature", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_features.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_features.id as featureId,\n\tvidyard_features.friendly_name as friendlyName,\n\tvidyard_features.include_by_default as includeByDefault,\n\tvidyard_features.category as category,\n\tvidyard_features.unique_name as uniqueName\n FROM \n\t\"dev\".\"public\".\"vidyard_features\" as vidyard_features", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_features\""}, "model.master_dbt_models.stg_vidyard_team_memberships": {"raw_sql": "SELECT \n\tvidyard_team_memberships.id as teamMembershipID,\n\tvidyard_team_memberships.team_id as teamID,\n\tvidyard_team_memberships.user_id as userID,\n\tvidyard_team_memberships.invite_accepted as inviteAccepted,\n\tvidyard_team_memberships.created_at as createdAt,\n\tvidyard_team_memberships.updated_at as updatedAt\r\n FROM \n\t{{ source('public', 'vidyard_team_memberships') }} as vidyard_team_memberships", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_team_memberships"], "unique_id": "model.master_dbt_models.stg_vidyard_team_memberships", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_team_memberships.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_team_memberships.sql", "name": "stg_vidyard_team_memberships", "resource_type": "model", "alias": "stg_vidyard_team_memberships", "checksum": {"name": "sha256", "checksum": "edc81c1614afca4024fdce387c984a5e78403ae6a6e42509ce9cbcad5dd76845"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_team_memberships"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_team_memberships"]}, "description": "", "columns": {"teamMembershipID": {"name": "teamMembershipID", "description": "unique ID for the team member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "teamID": {"name": "teamID", "description": "unique ID of the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "vidyard user ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inviteAccepted": {"name": "inviteAccepted", "description": "if a user accepted invite, only then would he be tied to an existing org/account, rather than being a standalone org", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdAt": {"name": "createdAt", "description": "when an invite is sent to a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedAt": {"name": "updatedAt", "description": "timestamp when the user accepts invite; for users who have not accepted invite, this is the same timestamp as created_at", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_team_memberships.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_team_memberships.id as teamMembershipID,\n\tvidyard_team_memberships.team_id as teamID,\n\tvidyard_team_memberships.user_id as userID,\n\tvidyard_team_memberships.invite_accepted as inviteAccepted,\n\tvidyard_team_memberships.created_at as createdAt,\n\tvidyard_team_memberships.updated_at as updatedAt\n FROM \n\t\"dev\".\"public\".\"vidyard_team_memberships\" as vidyard_team_memberships", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_team_memberships\""}, "model.master_dbt_models.stg_vidyard_events": {"raw_sql": "SELECT\n        vidyard_events.id as eventID,\n        vidyard_events.event_type as eventType,\n        vidyard_events.organization_id as organizationID,\n        vidyard_events.created_at as createdDate,\n        vidyard_events.updated_at as updatedDate\nFROM\n    {{ source ('public','vidyard_events')}} as vidyard_events", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_events"], "unique_id": "model.master_dbt_models.stg_vidyard_events", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_events.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_events.sql", "name": "stg_vidyard_events", "resource_type": "model", "alias": "stg_vidyard_events", "checksum": {"name": "sha256", "checksum": "c82ef0f585f30fece300b04c63a1abd1a925261f94209a1e4975ecca69aef418"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_events"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_events"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventType": {"name": "eventType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_events.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_events.id as eventID,\n        vidyard_events.event_type as eventType,\n        vidyard_events.organization_id as organizationID,\n        vidyard_events.created_at as createdDate,\n        vidyard_events.updated_at as updatedDate\nFROM\n    \"dev\".\"public\".\"vidyard_events\" as vidyard_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_events\""}, "model.master_dbt_models.stg_vidyard_allotment_limits": {"raw_sql": "SELECT \n\tvidyard_allotment_limits.account_id as accountID,\n\tvidyard_allotment_limits.id as allotmentLimitID,\n\tvidyard_allotment_limits.limit as limit,\n\tvidyard_allotment_limits.grace_limit as graceLimit,\n\tvidyard_allotment_limits.allotment_type_id as allotmentTypeID,\n\tvidyard_allotment_limits.enforced as enforced\r\n FROM \n\t{{ source('public', 'vidyard_allotment_limits') }} as vidyard_allotment_limits", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_allotment_limits"], "unique_id": "model.master_dbt_models.stg_vidyard_allotment_limits", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_allotment_limits.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_allotment_limits.sql", "name": "stg_vidyard_allotment_limits", "resource_type": "model", "alias": "stg_vidyard_allotment_limits", "checksum": {"name": "sha256", "checksum": "f63abb80caef01f1bd3014e476cbd95eb761ef0aaceb7f402e21b079b1ba42e6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_allotment_limits"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_allotment_limits"]}, "description": "", "columns": {"accountID": {"name": "accountID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allotmentLimitID": {"name": "allotmentLimitID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "limit": {"name": "limit", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "graceLimit": {"name": "graceLimit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allotmentTypeID": {"name": "allotmentTypeID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enforced": {"name": "enforced", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_allotment_limits.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_allotment_limits.account_id as accountID,\n\tvidyard_allotment_limits.id as allotmentLimitID,\n\tvidyard_allotment_limits.limit as limit,\n\tvidyard_allotment_limits.grace_limit as graceLimit,\n\tvidyard_allotment_limits.allotment_type_id as allotmentTypeID,\n\tvidyard_allotment_limits.enforced as enforced\n FROM \n\t\"dev\".\"public\".\"vidyard_allotment_limits\" as vidyard_allotment_limits", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_allotment_limits\""}, "model.master_dbt_models.stg_vidyard_nps_surveys": {"raw_sql": "SELECT \n\tvidyard_nps_surveys.id as npsSurveyID,\n\tvidyard_nps_surveys.user_score as userScore,\n\tvidyard_nps_surveys.user_comment as userComment,\n\tvidyard_nps_surveys.user_id as userId,\n\tvidyard_nps_surveys.organization_id as organizationId,\n\tvidyard_nps_surveys.created_at as createdAt,\n\tvidyard_nps_surveys.updated_at as updatedAt,\n\tvidyard_nps_surveys.filled as filled,\n\tvidyard_nps_surveys.allow_contact as allowContact,\n\tvidyard_nps_surveys.survey_type as surveyType,\n\tvidyard_nps_surveys.cancelled as cancelled\n FROM \n\t{{ source('public', 'vidyard_nps_surveys') }} as vidyard_nps_surveys", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_nps_surveys"], "unique_id": "model.master_dbt_models.stg_vidyard_nps_surveys", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_nps_surveys.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_nps_surveys.sql", "name": "stg_vidyard_nps_surveys", "resource_type": "model", "alias": "stg_vidyard_nps_surveys", "checksum": {"name": "sha256", "checksum": "f4bd1a90960534cbf63931070b0d866cf8b704555a1d62fe17ae25d168d73bd4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_nps_surveys"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_nps_surveys"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_nps_surveys.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_nps_surveys.id as npsSurveyID,\n\tvidyard_nps_surveys.user_score as userScore,\n\tvidyard_nps_surveys.user_comment as userComment,\n\tvidyard_nps_surveys.user_id as userId,\n\tvidyard_nps_surveys.organization_id as organizationId,\n\tvidyard_nps_surveys.created_at as createdAt,\n\tvidyard_nps_surveys.updated_at as updatedAt,\n\tvidyard_nps_surveys.filled as filled,\n\tvidyard_nps_surveys.allow_contact as allowContact,\n\tvidyard_nps_surveys.survey_type as surveyType,\n\tvidyard_nps_surveys.cancelled as cancelled\n FROM \n\t\"dev\".\"public\".\"vidyard_nps_surveys\" as vidyard_nps_surveys", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_nps_surveys\""}, "model.master_dbt_models.stg_vidyard_allotment_types": {"raw_sql": "SELECT \n\tvidyard_allotment_types.id as allotmentTypeID,\n\tvidyard_allotment_types.name as name,\n\tvidyard_allotment_types.description as description,\n\tvidyard_allotment_types.default_limit as defaultLimit,\n\tvidyard_allotment_types.default_grace_limit as defaultGraceLimit,\n\tvidyard_allotment_types.default_enforced as defaultEnforced\r\n FROM \n\t{{ source('public', 'vidyard_allotment_types') }} as vidyard_allotment_types", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_allotment_types"], "unique_id": "model.master_dbt_models.stg_vidyard_allotment_types", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_allotment_types.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_allotment_types.sql", "name": "stg_vidyard_allotment_types", "resource_type": "model", "alias": "stg_vidyard_allotment_types", "checksum": {"name": "sha256", "checksum": "2ab056f6d616dbfaa22c4db877288599572cded8c9a0cf183879542b3985baea"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_allotment_types"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_allotment_types"]}, "description": "", "columns": {"allotmentTypeID": {"name": "allotmentTypeID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultLimit": {"name": "defaultLimit", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultGraceLimit": {"name": "defaultGraceLimit", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultEnforced": {"name": "defaultEnforced", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_allotment_types.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_allotment_types.id as allotmentTypeID,\n\tvidyard_allotment_types.name as name,\n\tvidyard_allotment_types.description as description,\n\tvidyard_allotment_types.default_limit as defaultLimit,\n\tvidyard_allotment_types.default_grace_limit as defaultGraceLimit,\n\tvidyard_allotment_types.default_enforced as defaultEnforced\n FROM \n\t\"dev\".\"public\".\"vidyard_allotment_types\" as vidyard_allotment_types", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_allotment_types\""}, "model.master_dbt_models.stg_vidyard_event_joins": {"raw_sql": "SELECT\n        vidyard_event_joins.id as eventJoinID,\n        vidyard_event_joins.event_id as eventID,\n        vidyard_event_joins.owner_type as ownerType,\n        vidyard_event_joins.owner_id as ownerID,\n        vidyard_event_joins.second as second,\n        vidyard_event_joins.duration as duration,\n        vidyard_event_joins.created_at as createdDate,\n        vidyard_event_joins.updated_at as updatedDate\nFROM\n    {{ source ('public','vidyard_event_joins')}} as vidyard_event_joins", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_event_joins"], "unique_id": "model.master_dbt_models.stg_vidyard_event_joins", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_event_joins.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_event_joins.sql", "name": "stg_vidyard_event_joins", "resource_type": "model", "alias": "stg_vidyard_event_joins", "checksum": {"name": "sha256", "checksum": "e209a7ad0915badebf931bb4b2f35c0027b5d8004f110ed2b78f947ae8a466e5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_event_joins"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_event_joins"]}, "description": "", "columns": {"eventJoinID": {"name": "eventJoinID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventID": {"name": "eventID", "description": "use to join to vidyard_events table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerType": {"name": "ownerType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerID": {"name": "ownerID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "second": {"name": "second", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration": {"name": "duration", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_event_joins.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_event_joins.id as eventJoinID,\n        vidyard_event_joins.event_id as eventID,\n        vidyard_event_joins.owner_type as ownerType,\n        vidyard_event_joins.owner_id as ownerID,\n        vidyard_event_joins.second as second,\n        vidyard_event_joins.duration as duration,\n        vidyard_event_joins.created_at as createdDate,\n        vidyard_event_joins.updated_at as updatedDate\nFROM\n    \"dev\".\"public\".\"vidyard_event_joins\" as vidyard_event_joins", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_event_joins\""}, "model.master_dbt_models.stg_vidyard_organizations": {"raw_sql": "SELECT \n\tvidyard_organizations.id as organizationID,\n\tvidyard_organizations.name as name,\n\tvidyard_organizations.org_type as orgtype,\n\tvidyard_organizations.parent_id as parentID,\n\tvidyard_organizations.locked as locked,\n\tvidyard_organizations.created_by_client_id as createdByClientID,\n\tvidyard_organizations.created_at as createdDate,\n\tvidyard_organizations.updated_at as updatedDate,\n\tvidyard_organizations.owner_id as ownerId,\n\tvidyard_organizations.locked_at as lockedAt,\n\tvidyard_organizations.account_id as accountId,\n\tvidyard_organizations.paying as paying\n FROM \n\t{{ source('public', 'vidyard_organizations') }} as vidyard_organizations", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_organizations"], "unique_id": "model.master_dbt_models.stg_vidyard_organizations", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_organizations.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_organizations.sql", "name": "stg_vidyard_organizations", "resource_type": "model", "alias": "stg_vidyard_organizations", "checksum": {"name": "sha256", "checksum": "d17a731b04ef24017f0b293ad8042af034564a4a4cb2f13ac6c3f30e19c7ec98"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_organizations"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_organizations"]}, "description": "", "columns": {"organizationID": {"name": "organizationID", "description": "unique identifier of this table, the ID of the organization/folder", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "the name of the organization/folder", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orgtype": {"name": "orgtype", "description": "='self_serve' for free/pro and =' ' for enterprise", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentID": {"name": "parentID", "description": "=' ' blank if this is the parent org, otherwise shows which parent org this org belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locked": {"name": "locked", "description": "T|F if the organization's account is locked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdByClientID": {"name": "createdByClientID", "description": "location where orgs were created- enterprise/hubspot/vidyard/etc. = 'Enterprise' means the user was created as a user in the enterprise account and not as a self-serve signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "organization created datetime", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerId": {"name": "ownerId", "description": "user who owns the organiztation, owner_id = user_id for free/pro orgs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lockedAt": {"name": "lockedAt", "description": "date the organization's account was locked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "account id of the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_organizations.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_organizations.id as organizationID,\n\tvidyard_organizations.name as name,\n\tvidyard_organizations.org_type as orgtype,\n\tvidyard_organizations.parent_id as parentID,\n\tvidyard_organizations.locked as locked,\n\tvidyard_organizations.created_by_client_id as createdByClientID,\n\tvidyard_organizations.created_at as createdDate,\n\tvidyard_organizations.updated_at as updatedDate,\n\tvidyard_organizations.owner_id as ownerId,\n\tvidyard_organizations.locked_at as lockedAt,\n\tvidyard_organizations.account_id as accountId,\n\tvidyard_organizations.paying as paying\n FROM \n\t\"dev\".\"public\".\"vidyard_organizations\" as vidyard_organizations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_organizations\""}, "model.master_dbt_models.stg_vidyard_players": {"raw_sql": "SELECT \n\tvidyard_players.id as playerID,\n\tvidyard_players.organization_id as organizationID,\n\tvidyard_players.owner_id as ownerID,\n\tvidyard_players.created_by_client_id as createdbyclientID,\n\tvidyard_players.created_at as createdDate,\n\tvidyard_players.updated_at as updatedDate,\n\tvidyard_players.player_type as playerType,\n\tvidyard_players.uuid as uuID\r\n FROM \n\t{{ source('public', 'vidyard_players') }} as vidyard_players", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_players"], "unique_id": "model.master_dbt_models.stg_vidyard_players", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_players.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_players.sql", "name": "stg_vidyard_players", "resource_type": "model", "alias": "stg_vidyard_players", "checksum": {"name": "sha256", "checksum": "b96ef55293fda4fc86ba0b2f6c0bd656f4564bb6af0ed83733fb8ef105636f8c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_players"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_players"]}, "description": "", "columns": {"playerID": {"name": "playerID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": "the organization the player lives in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerID": {"name": "ownerID", "description": "the owner of the player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdbyclientID": {"name": "createdbyclientID", "description": "location where orgs were created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "date the player was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "playerType": {"name": "playerType", "description": "description of the player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uuID": {"name": "uuID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_players.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_players.id as playerID,\n\tvidyard_players.organization_id as organizationID,\n\tvidyard_players.owner_id as ownerID,\n\tvidyard_players.created_by_client_id as createdbyclientID,\n\tvidyard_players.created_at as createdDate,\n\tvidyard_players.updated_at as updatedDate,\n\tvidyard_players.player_type as playerType,\n\tvidyard_players.uuid as uuID\n FROM \n\t\"dev\".\"public\".\"vidyard_players\" as vidyard_players", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_players\""}, "model.master_dbt_models.stg_vidyard_org_metrics": {"raw_sql": "SELECT \n\tvidyard_org_metrics.id as organizationID,\n\tvidyard_org_metrics.total_seconds as totalSeconds,\n\tvidyard_org_metrics.views_count as viewsCount,\n\tvidyard_org_metrics.videos_with_views as videosWithViews,\n\tvidyard_org_metrics.first_view as firstView,\n\tvidyard_org_metrics.first_view_video_id as firstViewVideoID\r\n FROM \n\t{{ source('public', 'vidyard_org_metrics') }} as vidyard_org_metrics", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_org_metrics"], "unique_id": "model.master_dbt_models.stg_vidyard_org_metrics", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_org_metrics.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_org_metrics.sql", "name": "stg_vidyard_org_metrics", "resource_type": "model", "alias": "stg_vidyard_org_metrics", "checksum": {"name": "sha256", "checksum": "6dd7390757e53bf0de387bb2e8742169376f25fe7f64c33cdaeac41236582ea9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_org_metrics"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_org_metrics"]}, "description": "", "columns": {"organizationID": {"name": "organizationID", "description": "vidyard org id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "totalSeconds": {"name": "totalSeconds", "description": "total seconds of videos being viewed = view time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "viewsCount": {"name": "viewsCount", "description": "number fo views this org received", "meta": {}, "data_type": null, "quote": null, "tags": []}, "videosWithViews": {"name": "videosWithViews", "description": "number of videos with views in the organzation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstView": {"name": "firstView", "description": "the timestamp of the first view of a video in this org, in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstViewVideoID": {"name": "firstViewVideoID", "description": "the video id of the first-viewed video", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_org_metrics.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_org_metrics.id as organizationID,\n\tvidyard_org_metrics.total_seconds as totalSeconds,\n\tvidyard_org_metrics.views_count as viewsCount,\n\tvidyard_org_metrics.videos_with_views as videosWithViews,\n\tvidyard_org_metrics.first_view as firstView,\n\tvidyard_org_metrics.first_view_video_id as firstViewVideoID\n FROM \n\t\"dev\".\"public\".\"vidyard_org_metrics\" as vidyard_org_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_org_metrics\""}, "model.master_dbt_models.stg_vidyard_user_groups": {"raw_sql": "SELECT \n\tvidyard_user_groups.id as groupID,\n\tvidyard_user_groups.user_id as userID,\n\tvidyard_user_groups.organization_id as organizationID,\n\tvidyard_user_groups.invite_accepted as inviteAccepted,\n\tvidyard_user_groups.created_at as createdDate,\n\tvidyard_user_groups.updated_at as updatedDate\n FROM \n\t{{ source('public', 'vidyard_user_groups') }} as vidyard_user_groups", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_user_groups"], "unique_id": "model.master_dbt_models.stg_vidyard_user_groups", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_user_groups.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_user_groups.sql", "name": "stg_vidyard_user_groups", "resource_type": "model", "alias": "stg_vidyard_user_groups", "checksum": {"name": "sha256", "checksum": "a36a7c5f735d57e0f0de4ca2b96c993e972910a794da5894768ca045111c7431"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_user_groups"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_user_groups"]}, "description": "", "columns": {"groupID": {"name": "groupID", "description": "Uniquie identifier for this table to find the user groups id. This table is used to link vidyard_organizations to vidyard_users when organizations contain more than 1 users (non-self-serve orgs)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "vidyard user's id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": "the organization id the user belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inviteAccepted": {"name": "inviteAccepted", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "datetime the user group was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "datetime the user group was updated", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_user_groups.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_user_groups.id as groupID,\n\tvidyard_user_groups.user_id as userID,\n\tvidyard_user_groups.organization_id as organizationID,\n\tvidyard_user_groups.invite_accepted as inviteAccepted,\n\tvidyard_user_groups.created_at as createdDate,\n\tvidyard_user_groups.updated_at as updatedDate\n FROM \n\t\"dev\".\"public\".\"vidyard_user_groups\" as vidyard_user_groups", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_user_groups\""}, "model.master_dbt_models.stg_vidyard_active_features": {"raw_sql": "SELECT \n\tvidyard_active_features.id as activeFeatureID,\n\tvidyard_active_features.organization_id as organizationID,\n\tvidyard_active_features.feature_id as featureID,\n\tvidyard_active_features.created_at as createdDate,\n\tvidyard_active_features.updated_at as updatedDate\r\n FROM \n\t{{ source('public', 'vidyard_active_features') }} as vidyard_active_features", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_active_features"], "unique_id": "model.master_dbt_models.stg_vidyard_active_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_active_features.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_active_features.sql", "name": "stg_vidyard_active_features", "resource_type": "model", "alias": "stg_vidyard_active_features", "checksum": {"name": "sha256", "checksum": "c366cee101089849ece1d594db0dd854919d8a6f0c677a66ea5aa92bf58fbfd6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_active_features"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_active_features"]}, "description": "", "columns": {"activeFeatureID": {"name": "activeFeatureID", "description": "unique identifier for the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "featureID": {"name": "featureID", "description": "which feature the organization has access to, used to join with vidyard_features to get the feature information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "datetime the feature was activated for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_active_features.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_active_features.id as activeFeatureID,\n\tvidyard_active_features.organization_id as organizationID,\n\tvidyard_active_features.feature_id as featureID,\n\tvidyard_active_features.created_at as createdDate,\n\tvidyard_active_features.updated_at as updatedDate\n FROM \n\t\"dev\".\"public\".\"vidyard_active_features\" as vidyard_active_features", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_active_features\""}, "model.master_dbt_models.stg_vidyard_teams": {"raw_sql": "SELECT \n\tvidyard_teams.id as teamID,\n\tvidyard_teams.account_id as accountID,\n\tvidyard_teams.is_admin as isAdmin\r\n FROM \n\t{{ source('public', 'vidyard_teams') }} as vidyard_teams", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_teams"], "unique_id": "model.master_dbt_models.stg_vidyard_teams", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_teams.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_teams.sql", "name": "stg_vidyard_teams", "resource_type": "model", "alias": "stg_vidyard_teams", "checksum": {"name": "sha256", "checksum": "b575b1e7c1fdfa998a1a2a1a60795ba6a19e9ee5c87f415bf5d8dea648ae2464"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_teams"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_teams"]}, "description": "", "columns": {"teamID": {"name": "teamID", "description": "vidyard team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountID": {"name": "accountID", "description": "Vidyard account ID, links to the account each team belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isAdmin": {"name": "isAdmin", "description": "Flags if the team is the admin team within the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_teams.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_teams.id as teamID,\n\tvidyard_teams.account_id as accountID,\n\tvidyard_teams.is_admin as isAdmin\n FROM \n\t\"dev\".\"public\".\"vidyard_teams\" as vidyard_teams", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_teams\""}, "model.master_dbt_models.stg_vidyard_videos": {"raw_sql": "SELECT \n\tvidyard_videos.id as videoID,\n\tvidyard_videos.user_id as userID,\n\tvidyard_videos.organization_id as organizationID,\n\tvidyard_videos.hosting_provider as hostingProvider,\n\tvidyard_videos.is_secure as isSecure,\n\tvidyard_videos.status as status,\n\tvidyard_videos.created_by_client_id as createdByClientID,\n\tvidyard_videos.created_at as createdAt,\n\tvidyard_videos.origin as origin,\n\tvidyard_videos.milliseconds as milliseconds,\n\tvidyard_videos.updated_at as updatedAt,\n\tvidyard_videos.video_type as videoType\r\n FROM \n\t{{ source('public', 'vidyard_videos') }} as vidyard_videos", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_videos"], "unique_id": "model.master_dbt_models.stg_vidyard_videos", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_videos.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_videos.sql", "name": "stg_vidyard_videos", "resource_type": "model", "alias": "stg_vidyard_videos", "checksum": {"name": "sha256", "checksum": "7c2711abcdb7ba155d15ca2666880b6d3fbe9281e3fd3c3ed4ec2e7c48e41712"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_videos"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_videos"]}, "description": "", "columns": {"videoID": {"name": "videoID", "description": "unique video id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "vidyard user id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": "vidyard org id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hostingProvider": {"name": "hostingProvider", "description": "vidyard/youtube/audio/etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isSecure": {"name": "isSecure", "description": "indicates where the video currently has one of our security controls enabled on it (e.g. password, SSO, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "status of the video - failed, processing, ready, etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdByClientID": {"name": "createdByClientID", "description": "where the video was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdAt": {"name": "createdAt", "description": "video creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "how the video was created - upload, chrome extension, etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "milliseconds": {"name": "milliseconds", "description": "length of the video in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedAt": {"name": "updatedAt", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "videoType": {"name": "videoType", "description": "360 or normal", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_videos.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_videos.id as videoID,\n\tvidyard_videos.user_id as userID,\n\tvidyard_videos.organization_id as organizationID,\n\tvidyard_videos.hosting_provider as hostingProvider,\n\tvidyard_videos.is_secure as isSecure,\n\tvidyard_videos.status as status,\n\tvidyard_videos.created_by_client_id as createdByClientID,\n\tvidyard_videos.created_at as createdAt,\n\tvidyard_videos.origin as origin,\n\tvidyard_videos.milliseconds as milliseconds,\n\tvidyard_videos.updated_at as updatedAt,\n\tvidyard_videos.video_type as videoType\n FROM \n\t\"dev\".\"public\".\"vidyard_videos\" as vidyard_videos", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_videos\""}, "model.master_dbt_models.stg_vidyard_hubs": {"raw_sql": "SELECT \n        vidyard_hubs.id as hubID,\n        vidyard_hubs.organization_id as organizationID,\n        vidyard_hubs.account_id as accountID,\n        vidyard_hubs.cname as name,\n        vidyard_hubs.subdomain as subDomain,\n        vidyard_hubs.hub_type as hubType,\n        vidyard_hubs.manage_hub_users as manageHubUsers,\n        vidyard_hubs.route_type as routeType,\n        vidyard_hubs.enabled_seo as enabledSEO,\n        vidyard_hubs.created_at as createdDate,\n        vidyard_hubs.updated_at as updatedDate,\n        vidyard_hubs.index_layout_id as indexLayoutID,\n        vidyard_hubs.show_layout_id as showLayoutID,\n        vidyard_hubs.category_layout_id as categoryLayoutID,\n        vidyard_hubs.search_layout_id as searchLayoutID\nFROM\n    {{ source ('public', 'vidyard_hubs')}} as vidyard_hubs", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_hubs"], "unique_id": "model.master_dbt_models.stg_vidyard_hubs", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_hubs.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_hubs.sql", "name": "stg_vidyard_hubs", "resource_type": "model", "alias": "stg_vidyard_hubs", "checksum": {"name": "sha256", "checksum": "67fa4d286d352ef703537ee09ec7d2d39b7bfa3f227b2ded11160ec558716def"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_hubs"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_hubs"]}, "description": "", "columns": {"hubID": {"name": "hubID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountID": {"name": "accountID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subDomain": {"name": "subDomain", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hubType": {"name": "hubType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "manageHubUsers": {"name": "manageHubUsers", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "routeType": {"name": "routeType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indexLayoutID": {"name": "indexLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "showLayoutID": {"name": "showLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categoryLayoutID": {"name": "categoryLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "searchLayoutID": {"name": "searchLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_hubs.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        vidyard_hubs.id as hubID,\n        vidyard_hubs.organization_id as organizationID,\n        vidyard_hubs.account_id as accountID,\n        vidyard_hubs.cname as name,\n        vidyard_hubs.subdomain as subDomain,\n        vidyard_hubs.hub_type as hubType,\n        vidyard_hubs.manage_hub_users as manageHubUsers,\n        vidyard_hubs.route_type as routeType,\n        vidyard_hubs.enabled_seo as enabledSEO,\n        vidyard_hubs.created_at as createdDate,\n        vidyard_hubs.updated_at as updatedDate,\n        vidyard_hubs.index_layout_id as indexLayoutID,\n        vidyard_hubs.show_layout_id as showLayoutID,\n        vidyard_hubs.category_layout_id as categoryLayoutID,\n        vidyard_hubs.search_layout_id as searchLayoutID\nFROM\n    \"dev\".\"public\".\"vidyard_hubs\" as vidyard_hubs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_hubs\""}, "model.master_dbt_models.stg_vidyard_users": {"raw_sql": "SELECT \n\tvidyard_users.id as userId,\n\tvidyard_users.email as email,\n\tvidyard_users.created_at as createdDate,\n\tvidyard_users.updated_at as updatedDate,\n\tvidyard_users.first_name as firstName,\n\tvidyard_users.last_name as lastName\n FROM \n\t{{ source('public', 'vidyard_users') }} as vidyard_users", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_users"], "unique_id": "model.master_dbt_models.stg_vidyard_users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_users.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_users.sql", "name": "stg_vidyard_users", "resource_type": "model", "alias": "stg_vidyard_users", "checksum": {"name": "sha256", "checksum": "f00909a7fa439867ff141ef61c9cce0028a606ba649c325d088b66a339f46617"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_users"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_users"]}, "description": "", "columns": {"userId": {"name": "userId", "description": "Unique identifier for the Vidyard user's ID, can be used to join with- * vidyard_organizations.owner_id & * vidyard_user_groups.user_id etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "user's email the signed up with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "users creation date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "first name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "last name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_users.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_users.id as userId,\n\tvidyard_users.email as email,\n\tvidyard_users.created_at as createdDate,\n\tvidyard_users.updated_at as updatedDate,\n\tvidyard_users.first_name as firstName,\n\tvidyard_users.last_name as lastName\n FROM \n\t\"dev\".\"public\".\"vidyard_users\" as vidyard_users", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_users\""}, "model.master_dbt_models.stg_salesforce_account": {"raw_sql": "SELECT \n    sfdc_account.id as accountId,\n    sfdc_account.name as accountName,\n    sfdc_account.isdeleted as isDeleted,\n    sfdc_account.type as accountType,\n    sfdc_account.parentid as parentAccountId,\n    sfdc_account.phone as accountPhone,\n    sfdc_account.industry as accountIndustry,\n    sfdc_account.employee_segment__c as employeeSegment,\n    sfdc_account.numberofemployees as numberOfEmployees,\n    sfdc_account.annualrevenue as annualRevenue,\n    sfdc_account.ownerid as ownerId,\n    sfdc_account.customer_tier__c as customerTier,\n    sfdc_account.email_domain__c as emailDomain,\n    sfdc_account.website as website,\n    sfdc_account.account_id__c as vidyardAccountId,\n    sfdc_account.original_contract_date__c as originalContractDate,\n    sfdc_account.csm_owner__c as csmOwnerId,\n    sfdc_account.ispersonaccount as isPersonAccount,\n    sfdc_account.self_serve_customer__c as isSelfServe,\n    sfdc_account.billingstreet as billingStreet,\n    sfdc_account.billingcity as billingCity,\n    sfdc_account.billingstate as billingState,\n    sfdc_account.billingpostalcode as billingPostalCode,\n    sfdc_account.billingcountry as billingCountry,\n    sfdc_account.ispartner as isPartner,\n    sfdc_account.date_of_churn__c as dateOfChurn,\n    sfdc_account.churn_reason__c as churnReason,\n    sfdc_account.churn_reason_details__c as churnReasonDetails,\n    sfdc_account.partner_type2__c as partnerType,\n    sfdc_account.zvidyard_Account_Products__c as vidyardAccountProducts,\n    sfdc_account.created_datetime__c as createdDate,\n    sfdc_account.new_territory__c as accountTerritory,\n    sfdc_account.region__c as accountRegion,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.vidyard_user_id__pc as vidyardUserId,\n    sfdc_account.crm__c as crmPlatform,\n    sfdc_account.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_account.abm_tier__c as abmTier,\n    sfdc_account.online_video_platform__c as onlineVideoPlatform,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.primary_use_case__c as primaryUseCase,\n    sfdc_account.qa_status__c as qaStatus \n FROM \n    {{ source('salesforce_production', 'account') }} as sfdc_account\nWHERE\n    sfdc_account.type LIKE 'Customer'\n    AND sfdc_account.ispersonaccount = false", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_account"], "unique_id": "model.master_dbt_models.stg_salesforce_account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_account.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_account.sql", "name": "stg_salesforce_account", "resource_type": "model", "alias": "stg_salesforce_account", "checksum": {"name": "sha256", "checksum": "d981fd946899dafbeeb009ee949b1d37e70e23be31a1ac62d77550764d0fd906"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "account"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.account"]}, "description": "", "columns": {"accountId": {"name": "accountId", "description": "Unique Identifier Generated by Salesforce for the Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountName": {"name": "accountName", "description": "salesforce account name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "If the account is deleted or not, currently all accounts have this value as FALSE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountType": {"name": "accountType", "description": "prospect/customer/former customer/etc. ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentAccountId": {"name": "parentAccountId", "description": "salesforce account id of the parent company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountPhone": {"name": "accountPhone", "description": "firmographics information, enriched by zoominfo/clearbit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountIndustry": {"name": "accountIndustry", "description": "industry of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employeeSegment": {"name": "employeeSegment", "description": "based on size of company - Commercial (>=200), Emerging (0 to 200), Unknown (number of employees is blank)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numberOfEmployees": {"name": "numberOfEmployees", "description": "Number of employees in the account company, used to populate employee_segment_c", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annualRevenue": {"name": "annualRevenue", "description": "annual revenue of the company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerId": {"name": "ownerId", "description": "Salesforce id of the owner of the account, id of an Vidyard account executive, not a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerTier": {"name": "customerTier", "description": "Customer tiers assigned by CX", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emailDomain": {"name": "emailDomain", "description": "domain of the company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "website address of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardAccountId": {"name": "vidyardAccountId", "description": "vidyard account id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "originalContractDate": {"name": "originalContractDate", "description": "start date of the original contract of the account with Vidyard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csmOwnerId": {"name": "csmOwnerId", "description": "salesforce user id of the CSM owner for the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isPersonAccount": {"name": "isPersonAccount", "description": "T/F; True if self-serve, False if enterprise customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isSelfServe": {"name": "isSelfServe", "description": "whether a customer is self-serve or not; based on the most recent oppotunity the account closed with VY, not accurate for customers with active contracts AND active self serve; used to be used for HubSpot customers; legacy field probably", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingStreet": {"name": "billingStreet", "description": "billing street of the company ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingCity": {"name": "billingCity", "description": "billing city of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingState": {"name": "billingState", "description": "billing state of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingPostalCode": {"name": "billingPostalCode", "description": "billing postal code of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingCountry": {"name": "billingCountry", "description": "billing country of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isPartner": {"name": "isPartner", "description": "If the account is a Vidyard partner or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dateOfChurn": {"name": "dateOfChurn", "description": "date when customers churn", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churnReason": {"name": "churnReason", "description": "reason of churn for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churnReasonDetails": {"name": "churnReasonDetails", "description": "details reasons of churns for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partnerType": {"name": "partnerType", "description": "Type of partners", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardAccountProducts": {"name": "vidyardAccountProducts", "description": "description of the typ of product the account is under; used to calculate many boolean fields for type of the account(for enterprise, for business, for teams, etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "date and time of when the account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountTerritory": {"name": "accountTerritory", "description": "Refers to sales reps' territories: sub-categories under commercial and emerging. What category does the account fall under size wise for the reps to work on. e.g. LE = Large Enterprise; KA = Key Accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountRegion": {"name": "accountRegion", "description": "the region the account is from; picklist in Salesforce - NA East, NA West, NA Unknown, EMEA, APAC, LATAM", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonContract": {"name": "nonContract", "description": "really really old customers who paid us by credit card, but not self serve; legacy", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardUserId": {"name": "vidyardUserId", "description": "vidyard user id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crmPlatform": {"name": "crmPlatform", "description": "CRM tool the account uses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "marketingAutomationPlatform": {"name": "marketingAutomationPlatform", "description": "the marketing automation platform used by the acconut", "meta": {}, "data_type": null, "quote": null, "tags": []}, "abmTier": {"name": "abmTier", "description": "customer tier in ABM program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "onlineVideoPlatform": {"name": "onlineVideoPlatform", "description": "online video platform used by the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primaryUseCase": {"name": "primaryUseCase", "description": "the account's primary use case for vidyard (e.g. corporate comms, hosting, sales etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qaStatus": {"name": "qaStatus", "description": "status of an account that has been deemed qualified to act on by marketing (via a picklist)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_account.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n    sfdc_account.id as accountId,\n    sfdc_account.name as accountName,\n    sfdc_account.isdeleted as isDeleted,\n    sfdc_account.type as accountType,\n    sfdc_account.parentid as parentAccountId,\n    sfdc_account.phone as accountPhone,\n    sfdc_account.industry as accountIndustry,\n    sfdc_account.employee_segment__c as employeeSegment,\n    sfdc_account.numberofemployees as numberOfEmployees,\n    sfdc_account.annualrevenue as annualRevenue,\n    sfdc_account.ownerid as ownerId,\n    sfdc_account.customer_tier__c as customerTier,\n    sfdc_account.email_domain__c as emailDomain,\n    sfdc_account.website as website,\n    sfdc_account.account_id__c as vidyardAccountId,\n    sfdc_account.original_contract_date__c as originalContractDate,\n    sfdc_account.csm_owner__c as csmOwnerId,\n    sfdc_account.ispersonaccount as isPersonAccount,\n    sfdc_account.self_serve_customer__c as isSelfServe,\n    sfdc_account.billingstreet as billingStreet,\n    sfdc_account.billingcity as billingCity,\n    sfdc_account.billingstate as billingState,\n    sfdc_account.billingpostalcode as billingPostalCode,\n    sfdc_account.billingcountry as billingCountry,\n    sfdc_account.ispartner as isPartner,\n    sfdc_account.date_of_churn__c as dateOfChurn,\n    sfdc_account.churn_reason__c as churnReason,\n    sfdc_account.churn_reason_details__c as churnReasonDetails,\n    sfdc_account.partner_type2__c as partnerType,\n    sfdc_account.zvidyard_Account_Products__c as vidyardAccountProducts,\n    sfdc_account.created_datetime__c as createdDate,\n    sfdc_account.new_territory__c as accountTerritory,\n    sfdc_account.region__c as accountRegion,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.vidyard_user_id__pc as vidyardUserId,\n    sfdc_account.crm__c as crmPlatform,\n    sfdc_account.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_account.abm_tier__c as abmTier,\n    sfdc_account.online_video_platform__c as onlineVideoPlatform,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.primary_use_case__c as primaryUseCase,\n    sfdc_account.qa_status__c as qaStatus \n FROM \n    \"dev\".\"salesforce_production\".\"account\" as sfdc_account\nWHERE\n    sfdc_account.type LIKE 'Customer'\n    AND sfdc_account.ispersonaccount = false", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_account\""}, "model.master_dbt_models.stg_salesforce_opportunity": {"raw_sql": "SELECT \n        op.id as opportunityId,\n        op.accountid as accountId,\n        op.ownerid as ownerId,\n        op.name as opportunityName,\n        op.stagename as stageName,\n        op.closedate as closeDate,\n        op.type as opportunityType,\n        op.isclosed as isClosed,\n        op.iswon as isWon,\n        op.campaignid as campaignId,\n        op.createddate as createdDate,\n        op.Entered_Pipeline_Date__c as enteredPipelineDate,\n        op.dead_reason__c as deadReason,\n        op.x7_closed_won_date__c as closedWonDate,\n        op.x8_dead_date__c as deadDate,\n        op.renewal_due_date__c as renewalDueDate,\n        op.multi_year_1st_due_date__c as multiYear1stDueDate,\n        op.multi_year_2nd_due_date__c as multiYear2ndDueDate,\n        op.contact_champion__c as contactChampionId,\n        op.business_unit__c as businessUnit,\n        op.vy_attribution__c as opportunityAttribution,\n        op.new_arr__c as newARR,\n        op.one_time__c as oneTimeCharge,\n        op.last_year_arr__c as lastYearARR,\n        op.renewal_amount__c as renewalAmount,\n        op.csm_owner__c as csmOwnerId,\n        op.contract_start_date__c as contractStartDate,\n        op.contract_end_date__c as contractEndDate,\n        op.previous_contract_start_date__c as previousContractStartDate,\n        op.previous_contract_end_date__c as previousContractEndDate,\n        op.churn_reason__c as churnReason,\n        op.competition__c as competitor,\n        op.forecastcategoryname as forecastCategory,\n        op.red_opportunity__c as redOpportunity,\n        op.assurance__c as Assurance,\n        op.vy_use_case__c as useCase\nFROM \n    {{ source('salesforce_production', 'opportunity') }} as op", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_opportunity"], "unique_id": "model.master_dbt_models.stg_salesforce_opportunity", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_opportunity.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_opportunity.sql", "name": "stg_salesforce_opportunity", "resource_type": "model", "alias": "stg_salesforce_opportunity", "checksum": {"name": "sha256", "checksum": "4083154348e847e0427a9df1c65481c73c5b6524daf4e7d3f0f67a80c70fd95c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "opportunity"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.opportunity"]}, "description": "", "columns": {"opportunityId": {"name": "opportunityId", "description": "salesforce opportunity id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "salesforce account id tied to this opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerId": {"name": "ownerId", "description": "Salesforce user id who owns the opportunity , id of a Vidyard person, not a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityName": {"name": "opportunityName", "description": "Name of the Opportunity in Salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stageName": {"name": "stageName", "description": "where the opportunity is in the sales funnel (stage 1 to 7, dead)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closeDate": {"name": "closeDate", "description": "close date of the opportunity (either won or dead out), used for pipeline purposes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityType": {"name": "opportunityType", "description": "opportunity type - new business, add-on, renewal, etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isClosed": {"name": "isClosed", "description": "T/F, opportunity is close - won or dead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isWon": {"name": "isWon", "description": "T/F, opportunity is won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignId": {"name": "campaignId", "description": "salesforce campaign that brought the opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "opportunity created date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enteredPipelineDate": {"name": "enteredPipelineDate", "description": "opportunity entered pipeline date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deadReason": {"name": "deadReason", "description": "the reason for an opportunity to be deaded out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closedWonDate": {"name": "closedWonDate", "description": "date when the opportunity is marked closed-won by the salesperson; used for commission purposes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deadDate": {"name": "deadDate", "description": "date when the opportunity is deaded out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewalDueDate": {"name": "renewalDueDate", "description": "date when the next renewal is due", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiYear1stDueDate": {"name": "multiYear1stDueDate", "description": "for a multi-year contract, the first year's renewal duedate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiYear2ndDueDate": {"name": "multiYear2ndDueDate", "description": "for a multi-year contract, the second year's renewal due date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contactChampionId": {"name": "contactChampionId", "description": "the main contact for the opportunity in the customer company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "businessUnit": {"name": "businessUnit", "description": "whether the opportunity is coming from commercial or emerging business", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityAttribution": {"name": "opportunityAttribution", "description": "where the opportunity is attributed to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newARR": {"name": "newARR", "description": "arr amount for the opportunity, enterprise contract only! not including self serve", "meta": {}, "data_type": null, "quote": null, "tags": []}, "oneTimeCharge": {"name": "oneTimeCharge", "description": "one time charge fee on the opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastYearARR": {"name": "lastYearARR", "description": "arr charged from last year, used as renewal target for this year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewalAmount": {"name": "renewalAmount", "description": "renewal amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csmOwnerId": {"name": "csmOwnerId", "description": "Salesforce ID of the CSM owners of the opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contractStartDate": {"name": "contractStartDate", "description": "Start date of current contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contractEndDate": {"name": "contractEndDate", "description": "end date of current contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previousContractStartDate": {"name": "previousContractStartDate", "description": "start date of last contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previousContractEndDate": {"name": "previousContractEndDate", "description": "end date of last contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churnReason": {"name": "churnReason", "description": "reason opportunity/account is churning", "meta": {}, "data_type": null, "quote": null, "tags": []}, "competitor": {"name": "competitor", "description": "potential competitor being evaluated/used by prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "forecastCategory": {"name": "forecastCategory", "description": "a list of values to pick from that CX uses for reporting - omitted, pipeline, best case, commit, closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redOpportunity": {"name": "redOpportunity", "description": "T/F for labeling if the opportunity is Red Opportunity or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Assurance": {"name": "Assurance", "description": "positive - confirmed to renew; negative - haven't heard from them, but will auto-renew; sales order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "useCase": {"name": "useCase", "description": "The main purpose the client has stated this products will be used for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_opportunity.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        op.id as opportunityId,\n        op.accountid as accountId,\n        op.ownerid as ownerId,\n        op.name as opportunityName,\n        op.stagename as stageName,\n        op.closedate as closeDate,\n        op.type as opportunityType,\n        op.isclosed as isClosed,\n        op.iswon as isWon,\n        op.campaignid as campaignId,\n        op.createddate as createdDate,\n        op.Entered_Pipeline_Date__c as enteredPipelineDate,\n        op.dead_reason__c as deadReason,\n        op.x7_closed_won_date__c as closedWonDate,\n        op.x8_dead_date__c as deadDate,\n        op.renewal_due_date__c as renewalDueDate,\n        op.multi_year_1st_due_date__c as multiYear1stDueDate,\n        op.multi_year_2nd_due_date__c as multiYear2ndDueDate,\n        op.contact_champion__c as contactChampionId,\n        op.business_unit__c as businessUnit,\n        op.vy_attribution__c as opportunityAttribution,\n        op.new_arr__c as newARR,\n        op.one_time__c as oneTimeCharge,\n        op.last_year_arr__c as lastYearARR,\n        op.renewal_amount__c as renewalAmount,\n        op.csm_owner__c as csmOwnerId,\n        op.contract_start_date__c as contractStartDate,\n        op.contract_end_date__c as contractEndDate,\n        op.previous_contract_start_date__c as previousContractStartDate,\n        op.previous_contract_end_date__c as previousContractEndDate,\n        op.churn_reason__c as churnReason,\n        op.competition__c as competitor,\n        op.forecastcategoryname as forecastCategory,\n        op.red_opportunity__c as redOpportunity,\n        op.assurance__c as Assurance,\n        op.vy_use_case__c as useCase\nFROM \n    \"dev\".\"salesforce_production\".\"opportunity\" as op", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_opportunity\""}, "model.master_dbt_models.stg_salesforce_campaign": {"raw_sql": "SELECT \n    sfdc_campaign .id as campaignId,\n    sfdc_campaign .isdeleted as isDeleted,\n    sfdc_campaign .name as name,\n    sfdc_campaign .parentid as parentId,\n    sfdc_campaign .type as type,\n    sfdc_campaign .status as status,\n    sfdc_campaign .startdate as startDate,\n    sfdc_campaign .enddate as endDate,\n    sfdc_campaign .expectedrevenue as expectedRevenue,\n    sfdc_campaign .budgetedcost as budgetedCost,\n    sfdc_campaign .actualcost as actualCost,\n    sfdc_campaign .isactive as isActive,\n    sfdc_campaign .description as description,\n    sfdc_campaign .createddate as createdDate,\n    sfdc_campaign .media_type__c as mediaType,\n    sfdc_campaign .inbound_vs_outbound__c as inboundVsOutbound,\n    sfdc_campaign .cta__c as cta,\n    sfdc_campaign .cta_subtype__c as ctaSubtype,\n    sfdc_campaign .channel_picklist__c as channelPicklist,\n    sfdc_campaign .channel_detail__c as channelDetail,\n    sfdc_campaign .channel_media_type__c as channelMediaType,\n    sfdc_campaign .campaign_sourced_by__c as campaignSourcedBy,\n    sfdc_campaign .response_type__c as responseType \n FROM \n    {{ source('salesforce_production', 'campaign') }}  as sfdc_campaign", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_campaign"], "unique_id": "model.master_dbt_models.stg_salesforce_campaign", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_campaign.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_campaign.sql", "name": "stg_salesforce_campaign", "resource_type": "model", "alias": "stg_salesforce_campaign", "checksum": {"name": "sha256", "checksum": "946820f90c702e1927ca927de25b06bd27b7d70027281e83a0fc6187d3e445e6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "campaign"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.campaign"]}, "description": "", "columns": {"campaignId": {"name": "campaignId", "description": "salesforce id for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "True if the campaign is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentId": {"name": "parentId", "description": "parent campaign id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "the type of campaign - in progress, planned, completed, aborted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "status of the campaign - ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "startDate": {"name": "startDate", "description": "start date of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "endDate": {"name": "endDate", "description": "end date of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expectedRevenue": {"name": "expectedRevenue", "description": "expected revenue of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budgetedCost": {"name": "budgetedCost", "description": "budgeted cost for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actualCost": {"name": "actualCost", "description": "actual cost of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isActive": {"name": "isActive", "description": "T/F if the campaign is still active", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "description of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "created date of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mediaType": {"name": "mediaType", "description": "type of media - owned, paid, other earned, blank", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inboundVsOutbound": {"name": "inboundVsOutbound", "description": "inbound vs outbound of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cta": {"name": "cta", "description": "cta type of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctaSubtype": {"name": "ctaSubtype", "description": "cta sub-type of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channelPicklist": {"name": "channelPicklist", "description": "channel of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channelDetail": {"name": "channelDetail", "description": "details of the channel of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channelMediaType": {"name": "channelMediaType", "description": "media type of the channel of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignSourcedBy": {"name": "campaignSourcedBy", "description": "campaign sourced by - product, partner, sales, marketing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "responseType": {"name": "responseType", "description": "MQL versus non-MQL", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_campaign.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n    sfdc_campaign .id as campaignId,\n    sfdc_campaign .isdeleted as isDeleted,\n    sfdc_campaign .name as name,\n    sfdc_campaign .parentid as parentId,\n    sfdc_campaign .type as type,\n    sfdc_campaign .status as status,\n    sfdc_campaign .startdate as startDate,\n    sfdc_campaign .enddate as endDate,\n    sfdc_campaign .expectedrevenue as expectedRevenue,\n    sfdc_campaign .budgetedcost as budgetedCost,\n    sfdc_campaign .actualcost as actualCost,\n    sfdc_campaign .isactive as isActive,\n    sfdc_campaign .description as description,\n    sfdc_campaign .createddate as createdDate,\n    sfdc_campaign .media_type__c as mediaType,\n    sfdc_campaign .inbound_vs_outbound__c as inboundVsOutbound,\n    sfdc_campaign .cta__c as cta,\n    sfdc_campaign .cta_subtype__c as ctaSubtype,\n    sfdc_campaign .channel_picklist__c as channelPicklist,\n    sfdc_campaign .channel_detail__c as channelDetail,\n    sfdc_campaign .channel_media_type__c as channelMediaType,\n    sfdc_campaign .campaign_sourced_by__c as campaignSourcedBy,\n    sfdc_campaign .response_type__c as responseType \n FROM \n    \"dev\".\"salesforce_production\".\"campaign\"  as sfdc_campaign", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_campaign\""}, "model.master_dbt_models.stg_salesforce_campaignmember": {"raw_sql": "SELECT \n\t\tsfdc_campaignmember.id as campaignMemberId,\n\t\tsfdc_campaignmember.createddate as createdDate,\n\t\tsfdc_campaignmember.isdeleted as isDeleted,\n\t\tsfdc_campaignmember.campaignid as campaignId,\n\t\tsfdc_campaignmember.type as type,\n\t\tsfdc_campaignmember.leadid as leadId,\n\t\tsfdc_campaignmember.contactid as contactId,\n\t\tsfdc_campaignmember.status as status,\n\t\tsfdc_campaignmember.name as name,\n\t\tsfdc_campaignmember.email as email,\n\t\tsfdc_campaignmember.campaign_sourced_by__c as campaignSourcedBy,\n\t\tsfdc_campaignmember.mql__c as mql,\n\t\tsfdc_campaignmember.mql_date_and_time__c as mqlDate,\n\t\tsfdc_campaignmember.sal__c as sal,\n\t\tsfdc_campaignmember.sal_date_and_time__c as salDate,\n\t\tsfdc_campaignmember.sql__c as sql,\n\t\tsfdc_campaignmember.sql_date_and_time__c as sqlDate,\n\t\tsfdc_campaignmember.sqo__c as sqo,\n\t\tsfdc_campaignmember.sqo_date__c as sqoDate,\n\t\tsfdc_campaignmember.sqo_lost__c as sqoLost,\n\t\tsfdc_campaignmember.sqo_lost_date__c as sqoLostDate,\n\t\tsfdc_campaignmember.won__c as won,\n\t\tsfdc_campaignmember.opportunity_closed_won_date__c as opportunityClosedWonDate,\n\t\tsfdc_campaignmember.opportunity__c as opportunityId,\n\t\tsfdc_campaignmember.status_reason__c as statusReason,\n\t\tsfdc_campaignmember.current_status_reason__c as currentStatusReason\n\n FROM \n \t\t{{ source ('salesforce_production' , 'campaignmember') }} as sfdc_campaignmember\n WHERE\n \t\tTRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_campaignmember"], "unique_id": "model.master_dbt_models.stg_salesforce_campaignmember", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_campaignmember.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_campaignmember.sql", "name": "stg_salesforce_campaignmember", "resource_type": "model", "alias": "stg_salesforce_campaignmember", "checksum": {"name": "sha256", "checksum": "53bc1c52a178258e9783838e94136f1b7934c611cc061258f474d83c5e5deb9b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "campaignmember"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.campaignmember"]}, "description": "", "columns": {"campaignMemberId": {"name": "campaignMemberId", "description": "id of a campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "date when the lead/contact engaged with the campaign also known as the inquiry date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "T|F for if the campaign member is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignId": {"name": "campaignId", "description": "id of the campaign that the lead/contact engaged with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "determines of the user is a lead or contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadId": {"name": "leadId", "description": "id for the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contactId": {"name": "contactId", "description": "id for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "status of the campaign member. E.g. Responded to a campaign or Fills out Form", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name of campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "email of campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignSourcedBy": {"name": "campaignSourcedBy", "description": "which team the campaign member is sourced by based on the team that owns the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mql": {"name": "mql", "description": "T/F for converted into mql", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mqlDate": {"name": "mqlDate", "description": "date of MQL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sal": {"name": "sal", "description": "T/F for converted into sal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salDate": {"name": "salDate", "description": "date of SAL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sql": {"name": "sql", "description": "T/F for converted into sql", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqlDate": {"name": "sqlDate", "description": "date of SQL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqo": {"name": "sqo", "description": "T/F for converted into sqo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqoDate": {"name": "sqoDate", "description": "date of SQO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqoLost": {"name": "sqoLost", "description": "T/F for sqo lost", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqoLostDate": {"name": "sqoLostDate", "description": "date of lost SQO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "won": {"name": "won", "description": "T/F for opportunity won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityClosedWonDate": {"name": "opportunityClosedWonDate", "description": "date of opportunity won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityId": {"name": "opportunityId", "description": "opportunity ID if opportunity was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusReason": {"name": "statusReason", "description": "status of the campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currentStatusReason": {"name": "currentStatusReason", "description": "reason for a campaign members status", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_campaignmember.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\t\tsfdc_campaignmember.id as campaignMemberId,\n\t\tsfdc_campaignmember.createddate as createdDate,\n\t\tsfdc_campaignmember.isdeleted as isDeleted,\n\t\tsfdc_campaignmember.campaignid as campaignId,\n\t\tsfdc_campaignmember.type as type,\n\t\tsfdc_campaignmember.leadid as leadId,\n\t\tsfdc_campaignmember.contactid as contactId,\n\t\tsfdc_campaignmember.status as status,\n\t\tsfdc_campaignmember.name as name,\n\t\tsfdc_campaignmember.email as email,\n\t\tsfdc_campaignmember.campaign_sourced_by__c as campaignSourcedBy,\n\t\tsfdc_campaignmember.mql__c as mql,\n\t\tsfdc_campaignmember.mql_date_and_time__c as mqlDate,\n\t\tsfdc_campaignmember.sal__c as sal,\n\t\tsfdc_campaignmember.sal_date_and_time__c as salDate,\n\t\tsfdc_campaignmember.sql__c as sql,\n\t\tsfdc_campaignmember.sql_date_and_time__c as sqlDate,\n\t\tsfdc_campaignmember.sqo__c as sqo,\n\t\tsfdc_campaignmember.sqo_date__c as sqoDate,\n\t\tsfdc_campaignmember.sqo_lost__c as sqoLost,\n\t\tsfdc_campaignmember.sqo_lost_date__c as sqoLostDate,\n\t\tsfdc_campaignmember.won__c as won,\n\t\tsfdc_campaignmember.opportunity_closed_won_date__c as opportunityClosedWonDate,\n\t\tsfdc_campaignmember.opportunity__c as opportunityId,\n\t\tsfdc_campaignmember.status_reason__c as statusReason,\n\t\tsfdc_campaignmember.current_status_reason__c as currentStatusReason\n\n FROM \n \t\t\"dev\".\"salesforce_production\".\"campaignmember\" as sfdc_campaignmember\n WHERE\n \t\tTRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_campaignmember\""}, "model.master_dbt_models.stg_salesforce_contact": {"raw_sql": "SELECT \n    sfdc_contact.id as contactId,\n    sfdc_contact.isdeleted as isDeleted,\n    sfdc_contact.accountid as accountId,\n    sfdc_contact.vidyard_user_id__c as vidyardUserId,\n    sfdc_contact.createddate as createdDate,\n    sfdc_contact.account_owner_id__c as createdDate,\n    sfdc_contact.ownerid as createdDate,\n    sfdc_contact.lastname as lastName,\n    sfdc_contact.firstname as firstName,\n    sfdc_contact.name as name,\n    sfdc_contact.email as email,\n    sfdc_contact.title as title,\n    sfdc_contact.role__c as role,\n    sfdc_contact.job_role__c as jobRole,\n    sfdc_contact.department__c as department,\n    sfdc_contact.account_lead_type__c as accountLeadType,\n    sfdc_contact.leadsource as leadSource,\n    sfdc_contact.baller_score__c as ballerScore,\n    sfdc_contact.contact_status_vy__c as contactStatus,\n    sfdc_contact.status_reason__c as statusReason,\n    sfdc_contact.main_csm_contact__c as mainContact,\n    sfdc_contact.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_contact.crm__c as crm,\n    sfdc_contact.mailingstreet as mailingStreet,\n    sfdc_contact.mailingcity as mailingCity,\n    sfdc_contact.mailingstate as mailingState,\n    sfdc_contact.mailingpostalcode as mailingPostalCode,\n    sfdc_contact.mailingcountry as mailingCountry \n FROM \n    {{ source('salesforce_production', 'contact') }} as sfdc_contact", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_contact"], "unique_id": "model.master_dbt_models.stg_salesforce_contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_contact.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_contact.sql", "name": "stg_salesforce_contact", "resource_type": "model", "alias": "stg_salesforce_contact", "checksum": {"name": "sha256", "checksum": "52f74375a19b32e6018ef796fd02ef9384e835c9ba1dfbbe50d4587a457de3fa"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "contact"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.contact"]}, "description": "", "columns": {"contactId": {"name": "contactId", "description": "Unique identifier generated by salesforce for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "T|F for if the contact is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "The account id that the contact is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardUserId": {"name": "vidyardUserId", "description": "The vidyard user id of the contact if the user has a vidyard account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "contact owner id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "Last name of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "First name of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The contact's email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The contact's job title", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The contact's level in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jobRole": {"name": "jobRole", "description": "The contact's role in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The contact's department in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountLeadType": {"name": "accountLeadType", "description": "Description on what type of lead the Contact is it is e.g. Prospect, Former Customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadSource": {"name": "leadSource", "description": "Source of where the contact originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ballerScore": {"name": "ballerScore", "description": "Contact's lead score calculated in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contactStatus": {"name": "contactStatus", "description": "Current status of the contact, e.g. Called", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusReason": {"name": "statusReason", "description": "Reason for a particular status assigned to the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainContact": {"name": "mainContact", "description": "csm contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "marketingAutomationPlatform": {"name": "marketingAutomationPlatform", "description": "Which marketing platform the lead uses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crm": {"name": "crm", "description": "Which CRM platform the lead uses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingStreet": {"name": "mailingStreet", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingCity": {"name": "mailingCity", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingState": {"name": "mailingState", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingPostalCode": {"name": "mailingPostalCode", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingCountry": {"name": "mailingCountry", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_contact.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n    sfdc_contact.id as contactId,\n    sfdc_contact.isdeleted as isDeleted,\n    sfdc_contact.accountid as accountId,\n    sfdc_contact.vidyard_user_id__c as vidyardUserId,\n    sfdc_contact.createddate as createdDate,\n    sfdc_contact.account_owner_id__c as createdDate,\n    sfdc_contact.ownerid as createdDate,\n    sfdc_contact.lastname as lastName,\n    sfdc_contact.firstname as firstName,\n    sfdc_contact.name as name,\n    sfdc_contact.email as email,\n    sfdc_contact.title as title,\n    sfdc_contact.role__c as role,\n    sfdc_contact.job_role__c as jobRole,\n    sfdc_contact.department__c as department,\n    sfdc_contact.account_lead_type__c as accountLeadType,\n    sfdc_contact.leadsource as leadSource,\n    sfdc_contact.baller_score__c as ballerScore,\n    sfdc_contact.contact_status_vy__c as contactStatus,\n    sfdc_contact.status_reason__c as statusReason,\n    sfdc_contact.main_csm_contact__c as mainContact,\n    sfdc_contact.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_contact.crm__c as crm,\n    sfdc_contact.mailingstreet as mailingStreet,\n    sfdc_contact.mailingcity as mailingCity,\n    sfdc_contact.mailingstate as mailingState,\n    sfdc_contact.mailingpostalcode as mailingPostalCode,\n    sfdc_contact.mailingcountry as mailingCountry \n FROM \n    \"dev\".\"salesforce_production\".\"contact\" as sfdc_contact", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_contact\""}, "model.master_dbt_models.stg_salesforce_lead": {"raw_sql": "SELECT \n\t\tsfdc_lead.id as leadId,\n\t\tsfdc_lead.isdeleted as isDeleted,\n\t\tsfdc_lead.account_id__c as accountId,\n\t\tsfdc_lead.vidyard_user__c as vidyardUserId,\n\t\tsfdc_lead.isconverted as isConverted,\n\t\tsfdc_lead.convertedcontactid as convertedContactId,\n\t\tsfdc_lead.createddate as createdDate,\n\t\tsfdc_lead.converteddate as convertedDate,\n\t\tsfdc_lead.lead_owner_id__c as leadOwnerId,\n\t\tsfdc_lead.lastname as lastName,\n\t\tsfdc_lead.firstname as firstName,\n\t\tsfdc_lead.name as name,\n\t\tsfdc_lead.email as email,\n\t\tsfdc_lead.title as title,\n\t\tsfdc_lead.role__c as role,\n\t\tsfdc_lead.company as company,\n\t\tsfdc_lead.industry as industry,\n\t\tsfdc_lead.leadsource as leadSource,\n\t\tsfdc_lead.lead_type__c as leadType,\n\t\tsfdc_lead.status as status,\n\t\tsfdc_lead.status_reason__c as statusReason,\n\t\tsfdc_lead.reason_unqualified__c as reasonUnqualified,\n\t\tsfdc_lead.baller_score__c as ballerScore\n\nFROM \n\t\t{{ source ('salesforce_production','lead') }} as sfdc_lead\n\nWHERE\n\t\tTRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_lead"], "unique_id": "model.master_dbt_models.stg_salesforce_lead", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_lead.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_lead.sql", "name": "stg_salesforce_lead", "resource_type": "model", "alias": "stg_salesforce_lead", "checksum": {"name": "sha256", "checksum": "f4e67410fa5efbcf6b24ad3ae4c9aad3bba78b701d17741f6711b51d9d18b67b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "lead"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.lead"]}, "description": "", "columns": {"leadId": {"name": "leadId", "description": "Unique identifier generated by salesforce for the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "T|F for if the lead is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "The account id that the lead is associated with, IF the lead is attached to an account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardUserId": {"name": "vidyardUserId", "description": "The vidyard user id of the lead if the user has a vidyard account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isConverted": {"name": "isConverted", "description": "T|F field for determining if the lead was converted to a contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "convertedContactId": {"name": "convertedContactId", "description": "the contact id for the lead that was converted to a contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "The date the lead was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "convertedDate": {"name": "convertedDate", "description": "The date the lead was converted to a contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadOwnerId": {"name": "leadOwnerId", "description": "owner of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "Last name of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "First name of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The lead's email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The lead's job title", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The lead's level in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The company of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "The industry of the lead's company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadSource": {"name": "leadSource", "description": "Source of where the lead originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadType": {"name": "leadType", "description": "Description on what type of lead the user is, e.g. Prospect, Former Customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the lead, e.g. Called", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusReason": {"name": "statusReason", "description": "Reason for a particular status assigned to the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reasonUnqualified": {"name": "reasonUnqualified", "description": "reason for why a lead is unqualified", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ballerScore": {"name": "ballerScore", "description": "lead score calculated in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_lead.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\t\tsfdc_lead.id as leadId,\n\t\tsfdc_lead.isdeleted as isDeleted,\n\t\tsfdc_lead.account_id__c as accountId,\n\t\tsfdc_lead.vidyard_user__c as vidyardUserId,\n\t\tsfdc_lead.isconverted as isConverted,\n\t\tsfdc_lead.convertedcontactid as convertedContactId,\n\t\tsfdc_lead.createddate as createdDate,\n\t\tsfdc_lead.converteddate as convertedDate,\n\t\tsfdc_lead.lead_owner_id__c as leadOwnerId,\n\t\tsfdc_lead.lastname as lastName,\n\t\tsfdc_lead.firstname as firstName,\n\t\tsfdc_lead.name as name,\n\t\tsfdc_lead.email as email,\n\t\tsfdc_lead.title as title,\n\t\tsfdc_lead.role__c as role,\n\t\tsfdc_lead.company as company,\n\t\tsfdc_lead.industry as industry,\n\t\tsfdc_lead.leadsource as leadSource,\n\t\tsfdc_lead.lead_type__c as leadType,\n\t\tsfdc_lead.status as status,\n\t\tsfdc_lead.status_reason__c as statusReason,\n\t\tsfdc_lead.reason_unqualified__c as reasonUnqualified,\n\t\tsfdc_lead.baller_score__c as ballerScore\n\nFROM \n\t\t\"dev\".\"salesforce_production\".\"lead\" as sfdc_lead\n\nWHERE\n\t\tTRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_lead\""}, "model.master_dbt_models.fct_sfdc_accounts_use_case": {"raw_sql": "SELECT\n    sfdc_account.accountid as accountId,\n    listagg (distinct sfdc_opp.usecase,';') as useCase\nFROM\n    {{ ref('stg_salesforce_opportunity') }} as sfdc_opp\nJOIN\n    {{ ref('stg_salesforce_account') }} as sfdc_account\nON\n    sfdc_opp.accountid = sfdc_account.accountid\nWHERE\n  sfdc_opp.usecase is not null\n  and sfdc_opp.stagename LIKE '7 - Closed Won'\nGROUP BY\n  sfdc_account.accountId", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "marts", "utils", "fct_sfdc_accounts_use_case"], "unique_id": "model.master_dbt_models.fct_sfdc_accounts_use_case", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "marts/utils/fct_sfdc_accounts_use_case.sql", "original_file_path": "models/marts/utils/fct_sfdc_accounts_use_case.sql", "name": "fct_sfdc_accounts_use_case", "resource_type": "model", "alias": "fct_sfdc_accounts_use_case", "checksum": {"name": "sha256", "checksum": "70163fa9458ad7a776168da19c0c87ede0fba9249d15a148377c43a6078e80fd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["stg_salesforce_opportunity"], ["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity", "model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {"useCase": {"name": "useCase", "description": "The main use case this particular customer has indicated will be applied to their products", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/utils/utils.yml", "build_path": "target/run/master_dbt_models/models/marts/utils/fct_sfdc_accounts_use_case.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    sfdc_account.accountid as accountId,\n    listagg (distinct sfdc_opp.usecase,';') as useCase\nFROM\n    \"dev\".\"dbt_vidyard_master\".\"stg_salesforce_opportunity\" as sfdc_opp\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_salesforce_account\" as sfdc_account\nON\n    sfdc_opp.accountid = sfdc_account.accountid\nWHERE\n  sfdc_opp.usecase is not null\n  and sfdc_opp.stagename LIKE '7 - Closed Won'\nGROUP BY\n  sfdc_account.accountId", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"fct_sfdc_accounts_use_case\""}, "model.master_dbt_models.fct_vidyard_pro_customers": {"raw_sql": "SELECT\n    COUNT (DISTINCT subscription.subscriptionId) as activeProSubscriptions,\n    subscription.status\nFROM\n    {{ ref('stg_zuora_account') }} as account\nJOIN\n    {{ ref('stg_zuora_subscription') }} as subscription\nON\n    subscription.accountId = account.accountId\nJOIN\n    {{ ref('stg_zuora_rate_plan') }} as rateplan\nON\n    subscription.subscriptionId = rateplan.subscriptionId\nJOIN\n    {{ ref('stg_zuora_product_rate_plan') }} as productrateplan\nON\n    rateplan.productRatePlanId = productrateplan.productRatePlanId\nJOIN\n    {{ ref('stg_zuora_product') }} as product\nON\n    productrateplan.productID = product.productId\nWHERE\n    product.sku LIKE 'SS-010'\nGROUP BY\n    subscription.status", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "marts", "utils", "fct_vidyard_pro_customers"], "unique_id": "model.master_dbt_models.fct_vidyard_pro_customers", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "marts/utils/fct_vidyard_pro_customers.sql", "original_file_path": "models/marts/utils/fct_vidyard_pro_customers.sql", "name": "fct_vidyard_pro_customers", "resource_type": "model", "alias": "fct_vidyard_pro_customers", "checksum": {"name": "sha256", "checksum": "3a91341830312cbacd92f7a66b27b5ae3f861b5a6cfffcb57f4093cdbdcb74ae"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["stg_zuora_account"], ["stg_zuora_subscription"], ["stg_zuora_rate_plan"], ["stg_zuora_product_rate_plan"], ["stg_zuora_product"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.master_dbt_models.stg_zuora_account", "model.master_dbt_models.stg_zuora_subscription", "model.master_dbt_models.stg_zuora_rate_plan", "model.master_dbt_models.stg_zuora_product_rate_plan", "model.master_dbt_models.stg_zuora_product"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/marts/utils/fct_vidyard_pro_customers.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    COUNT (DISTINCT subscription.subscriptionId) as activeProSubscriptions,\n    subscription.status\nFROM\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_account\" as account\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_subscription\" as subscription\nON\n    subscription.accountId = account.accountId\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_rate_plan\" as rateplan\nON\n    subscription.subscriptionId = rateplan.subscriptionId\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_product_rate_plan\" as productrateplan\nON\n    rateplan.productRatePlanId = productrateplan.productRatePlanId\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_product\" as product\nON\n    productrateplan.productID = product.productId\nWHERE\n    product.sku LIKE 'SS-010'\nGROUP BY\n    subscription.status", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"fct_vidyard_pro_customers\""}, "model.master_dbt_models.nps_survey_responses": {"raw_sql": "SELECT\n    surveys.npsSurveyID,\n    surveys.userId,\n    surveys.organizationId,\n    users.email,\n    surveys.filled,\n    surveys.cancelled,\n    surveys.userScore,\n    surveys.userComment,\n    surveys.createdAt\nFROM \n    {{ ref('stg_vidyard_nps_surveys') }} as surveys\nJOIN\n    {{ ref('stg_vidyard_users') }} as users\non\n    surveys.userid = users.userId\n  WHERE TRUE\n    AND surveys.userScore IS NOT null\n    AND surveys.filled = true\n    AND surveys.cancelled = false\n    AND surveys.surveytype IS null", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "marts", "utils", "nps_survey_responses"], "unique_id": "model.master_dbt_models.nps_survey_responses", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "marts/utils/nps_survey_responses.sql", "original_file_path": "models/marts/utils/nps_survey_responses.sql", "name": "nps_survey_responses", "resource_type": "model", "alias": "nps_survey_responses", "checksum": {"name": "sha256", "checksum": "59ef35e69e152f84ee41f6f4c53c6cfbf9b84f75700382a20576dca4d26fcbe3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["stg_vidyard_nps_surveys"], ["stg_vidyard_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.master_dbt_models.stg_vidyard_nps_surveys", "model.master_dbt_models.stg_vidyard_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/marts/utils/nps_survey_responses.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    surveys.npsSurveyID,\n    surveys.userId,\n    surveys.organizationId,\n    users.email,\n    surveys.filled,\n    surveys.cancelled,\n    surveys.userScore,\n    surveys.userComment,\n    surveys.createdAt\nFROM \n    \"dev\".\"dbt_vidyard_master\".\"stg_vidyard_nps_surveys\" as surveys\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_vidyard_users\" as users\non\n    surveys.userid = users.userId\n  WHERE TRUE\n    AND surveys.userScore IS NOT null\n    AND surveys.filled = true\n    AND surveys.cancelled = false\n    AND surveys.surveytype IS null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"nps_survey_responses\""}, "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_product_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_product_sessions_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_product_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_product_sessions_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_product_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_product_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_product_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_product_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_product_sessions_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_product_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_product_sessions_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_product_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_product_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_product_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_govideo_production_product_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_product_sessions_userID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_product_sessions_userID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_product_sessions_userID", "resource_type": "test", "alias": "not_null_stg_govideo_production_product_sessions_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_product_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_product_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_govideo_production_users_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_govideo_production_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_users_userID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_users_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_users_userID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_users_userID", "resource_type": "test", "alias": "not_null_stg_govideo_production_users_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_govideo_production_users_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_govideo_production_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_users_userID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_users_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_users_userID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_users_userID", "resource_type": "test", "alias": "unique_stg_govideo_production_users_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_vidyard_com_sessions_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_vidyard_com_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_vidyard_com_sessions_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_vidyard_com_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_vidyard_com_sessions_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_vidyard_com_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_vidyard_com_sessions_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_vidyard_com_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_opened_extension') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_opened_extension_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_opened_extension_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_opened_extension_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_opened_extension_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_opened_extension"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_opened_extension"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_opened_extension') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_opened_extension_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_opened_extension_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_opened_extension_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_opened_extension_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_opened_extension"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_opened_extension"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_global_session') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_global_session_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_global_session_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_global_session_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_global_session_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_global_session"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_global_session"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_global_session') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_global_session_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_global_session_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_global_session_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_global_session_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_global_session"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_global_session"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_pageviews') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_pageviews_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_pageviews_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_pageviews_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_pageviews_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_pageviews"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_pageviews"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_pageviews') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_pageviews_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_pageviews_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_pageviews_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_pageviews_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_pageviews"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_pageviews"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_recorded_or_uploaded') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_video_recorded_or_uploaded_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_video_recorded_or_uploaded_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_recorded_or_uploaded"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_recorded_or_uploaded') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_video_recorded_or_uploaded_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_video_recorded_or_uploaded_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_video_recorded_or_uploaded_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_video_recorded_or_uploaded_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_recorded_or_uploaded"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_any_pageview') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_vidyard_com_any_pageview_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_vidyard_com_any_pageview_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_any_pageview"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_any_pageview') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_vidyard_com_any_pageview_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_vidyard_com_any_pageview_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_vidyard_com_any_pageview_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_vidyard_com_any_pageview_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_any_pageview"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_sharing_share_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_sharing_share_combo_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_sharing_share_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_sharing_share_combo_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_sharing_share_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_sharing_share_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_sharing_share_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_sharing_share_combo_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_sharing_share_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_sharing_share_combo_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_sharing_share_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_sharing_share_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_zuora_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_zuora_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_account_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_account_accountId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_account_accountId", "resource_type": "test", "alias": "not_null_stg_zuora_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_zuora_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_zuora_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_account_accountId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_account_accountId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_account_accountId", "resource_type": "test", "alias": "unique_stg_zuora_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_zuora_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_zuora_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_contact_contactId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_contact_contactId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_contact_contactId", "resource_type": "test", "alias": "unique_stg_zuora_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.not_null_stg_zuora_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_zuora_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_contact_contactId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_contact_contactId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_contact_contactId", "resource_type": "test", "alias": "not_null_stg_zuora_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "subscriptionId", "model": "{{ ref('stg_zuora_subscrip') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_subscrip_subscriptionId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_subscrip_subscriptionId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_subscrip_subscriptionId", "resource_type": "test", "alias": "unique_stg_zuora_subscrip_subscriptionId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_subscrip"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "subscriptionId"}, "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "subscriptionId", "model": "{{ ref('stg_zuora_subscrip') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_subscrip_subscriptionId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_subscrip_subscriptionId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_subscrip_subscriptionId", "resource_type": "test", "alias": "not_null_stg_zuora_subscrip_subscriptionId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_subscrip"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "subscriptionId"}, "test.master_dbt_models.unique_stg_zuora_product_productId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "productId", "model": "{{ ref('stg_zuora_product') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_product_productId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_product_productId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_product_productId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_product_productId", "resource_type": "test", "alias": "unique_stg_zuora_product_productId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_product"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productId"}, "test.master_dbt_models.not_null_stg_zuora_product_productId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "productId", "model": "{{ ref('stg_zuora_product') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_product_productId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_product_productId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_product_productId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_product_productId", "resource_type": "test", "alias": "not_null_stg_zuora_product_productId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_product"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productId"}, "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "productRatePlanId", "model": "{{ ref('stg_zuora_product_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_product_rate_plan_productRatePlanId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_product_rate_plan_productRatePlanId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_product_rate_plan_productRatePlanId", "resource_type": "test", "alias": "unique_stg_zuora_product_rate_plan_productRatePlanId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_product_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productRatePlanId"}, "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "productRatePlanId", "model": "{{ ref('stg_zuora_product_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_product_rate_plan_productRatePlanId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_product_rate_plan_productRatePlanId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_product_rate_plan_productRatePlanId", "resource_type": "test", "alias": "not_null_stg_zuora_product_rate_plan_productRatePlanId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_product_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productRatePlanId"}, "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ratePlanID", "model": "{{ ref('stg_zuora_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_rate_plan_ratePlanID"], "unique_id": "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_rate_plan_ratePlanID.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_rate_plan_ratePlanID", "resource_type": "test", "alias": "unique_stg_zuora_rate_plan_ratePlanID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ratePlanID"}, "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ratePlanID", "model": "{{ ref('stg_zuora_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_rate_plan_ratePlanID"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_rate_plan_ratePlanID.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_rate_plan_ratePlanID", "resource_type": "test", "alias": "not_null_stg_zuora_rate_plan_ratePlanID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ratePlanID"}, "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_organizations_parentID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "parentID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_parentID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_parentID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_parentID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_parentID", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_parentID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "parentID"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "parentID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_parentID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_parentID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_parentID", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_parentID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "parentID"}, "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_ownerId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_ownerId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_ownerId", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_ownerId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_ownerId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_ownerId", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.unique_stg_vidyard_organizations_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_accountId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_accountId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_accountId", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_accountId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_accountId", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_vidyard_users_userId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userId", "model": "{{ ref('stg_vidyard_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_users_userId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_users_userId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_users_userId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_users_userId", "resource_type": "test", "alias": "unique_stg_vidyard_users_userId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userId"}, "test.master_dbt_models.not_null_stg_vidyard_users_userId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userId", "model": "{{ ref('stg_vidyard_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_users_userId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_users_userId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_users_userId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_users_userId", "resource_type": "test", "alias": "not_null_stg_vidyard_users_userId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userId"}, "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "groupID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_user_groups_groupID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_user_groups_groupID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_user_groups_groupID", "resource_type": "test", "alias": "unique_stg_vidyard_user_groups_groupID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "groupID"}, "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "groupID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_user_groups_groupID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_user_groups_groupID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_user_groups_groupID", "resource_type": "test", "alias": "not_null_stg_vidyard_user_groups_groupID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "groupID"}, "test.master_dbt_models.unique_stg_vidyard_user_groups_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_user_groups_userID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_user_groups_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_user_groups_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_user_groups_userID", "resource_type": "test", "alias": "unique_stg_vidyard_user_groups_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_user_groups_userID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_user_groups_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_user_groups_userID", "resource_type": "test", "alias": "not_null_stg_vidyard_user_groups_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_user_groups_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_user_groups_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_user_groups_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_user_groups_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_user_groups_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_user_groups_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_user_groups_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_user_groups_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_teams_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_teams_teamID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_teams_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_teams_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_teams_teamID", "resource_type": "test", "alias": "unique_stg_vidyard_teams_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.not_null_stg_vidyard_teams_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_teams_teamID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_teams_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_teams_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_teams_teamID", "resource_type": "test", "alias": "not_null_stg_vidyard_teams_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.unique_stg_vidyard_teams_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_teams_accountID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_teams_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_teams_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_teams_accountID", "resource_type": "test", "alias": "unique_stg_vidyard_teams_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.not_null_stg_vidyard_teams_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_teams_accountID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_teams_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_teams_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_teams_accountID", "resource_type": "test", "alias": "not_null_stg_vidyard_teams_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "teamMembershipID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_team_memberships_teamMembershipID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_team_memberships_teamMembershipID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_team_memberships_teamMembershipID", "resource_type": "test", "alias": "unique_stg_vidyard_team_memberships_teamMembershipID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamMembershipID"}, "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "teamMembershipID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_team_memberships_teamMembershipID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_team_memberships_teamMembershipID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_team_memberships_teamMembershipID", "resource_type": "test", "alias": "not_null_stg_vidyard_team_memberships_teamMembershipID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamMembershipID"}, "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_team_memberships_teamID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_team_memberships_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_team_memberships_teamID", "resource_type": "test", "alias": "unique_stg_vidyard_team_memberships_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_team_memberships_teamID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_team_memberships_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_team_memberships_teamID", "resource_type": "test", "alias": "not_null_stg_vidyard_team_memberships_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_team_memberships_userID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_team_memberships_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_team_memberships_userID", "resource_type": "test", "alias": "unique_stg_vidyard_team_memberships_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_team_memberships_userID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_team_memberships_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_team_memberships_userID", "resource_type": "test", "alias": "not_null_stg_vidyard_team_memberships_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_org_metrics_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_org_metrics_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_org_metrics_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_org_metrics_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_org_metrics_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_org_metrics_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_org_metrics_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_org_metrics_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "firstViewVideoID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_org_metrics_firstViewVideoID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_org_metrics_firstViewVideoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_org_metrics_firstViewVideoID", "resource_type": "test", "alias": "unique_stg_vidyard_org_metrics_firstViewVideoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "firstViewVideoID"}, "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "firstViewVideoID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_org_metrics_firstViewVideoID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_org_metrics_firstViewVideoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_org_metrics_firstViewVideoID", "resource_type": "test", "alias": "not_null_stg_vidyard_org_metrics_firstViewVideoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "firstViewVideoID"}, "test.master_dbt_models.unique_stg_vidyard_videos_videoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "videoID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_videos_videoID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_videos_videoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_videos_videoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_videos_videoID", "resource_type": "test", "alias": "unique_stg_vidyard_videos_videoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "videoID"}, "test.master_dbt_models.not_null_stg_vidyard_videos_videoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "videoID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_videos_videoID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_videos_videoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_videos_videoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_videos_videoID", "resource_type": "test", "alias": "not_null_stg_vidyard_videos_videoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "videoID"}, "test.master_dbt_models.unique_stg_vidyard_videos_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_videos_userID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_videos_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_videos_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_videos_userID", "resource_type": "test", "alias": "unique_stg_vidyard_videos_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_vidyard_videos_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_videos_userID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_videos_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_videos_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_videos_userID", "resource_type": "test", "alias": "not_null_stg_vidyard_videos_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_vidyard_videos_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_videos_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_videos_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_videos_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_videos_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_videos_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_videos_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_videos_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_videos_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_videos_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "activeFeatureID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_active_features_activeFeatureID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_active_features_activeFeatureID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_active_features_activeFeatureID", "resource_type": "test", "alias": "unique_stg_vidyard_active_features_activeFeatureID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "activeFeatureID"}, "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "activeFeatureID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_active_features_activeFeatureID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_active_features_activeFeatureID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_active_features_activeFeatureID", "resource_type": "test", "alias": "not_null_stg_vidyard_active_features_activeFeatureID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "activeFeatureID"}, "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_active_features_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_active_features_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_active_features_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_active_features_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_active_features_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_active_features_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_active_features_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_active_features_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_features_featureId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "featureId", "model": "{{ ref('stg_vidyard_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_features_featureId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_features_featureId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_features_featureId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_features_featureId", "resource_type": "test", "alias": "unique_stg_vidyard_features_featureId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "featureId"}, "test.master_dbt_models.not_null_stg_vidyard_features_featureId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "featureId", "model": "{{ ref('stg_vidyard_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_features_featureId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_features_featureId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_features_featureId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_features_featureId", "resource_type": "test", "alias": "not_null_stg_vidyard_features_featureId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "featureId"}, "test.master_dbt_models.unique_stg_vidyard_players_playerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "playerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_players_playerID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_players_playerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_players_playerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_players_playerID", "resource_type": "test", "alias": "unique_stg_vidyard_players_playerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "playerID"}, "test.master_dbt_models.not_null_stg_vidyard_players_playerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "playerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_players_playerID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_players_playerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_players_playerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_players_playerID", "resource_type": "test", "alias": "not_null_stg_vidyard_players_playerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "playerID"}, "test.master_dbt_models.unique_stg_vidyard_players_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_players_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_players_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_players_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_players_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_players_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_players_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_players_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_players_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_players_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_players_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_players_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_players_ownerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ownerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_players_ownerID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_players_ownerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_players_ownerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_players_ownerID", "resource_type": "test", "alias": "unique_stg_vidyard_players_ownerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerID"}, "test.master_dbt_models.not_null_stg_vidyard_players_ownerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_players_ownerID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_players_ownerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_players_ownerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_players_ownerID", "resource_type": "test", "alias": "not_null_stg_vidyard_players_ownerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerID"}, "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_allotment_limits_accountID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_allotment_limits_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_allotment_limits_accountID", "resource_type": "test", "alias": "unique_stg_vidyard_allotment_limits_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_allotment_limits_accountID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_allotment_limits_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_allotment_limits_accountID", "resource_type": "test", "alias": "not_null_stg_vidyard_allotment_limits_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "allotmentLimitID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_allotment_limits_allotmentLimitID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_allotment_limits_allotmentLimitID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_allotment_limits_allotmentLimitID", "resource_type": "test", "alias": "unique_stg_vidyard_allotment_limits_allotmentLimitID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentLimitID"}, "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "allotmentLimitID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_allotment_limits_allotmentLimitID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_allotment_limits_allotmentLimitID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_allotment_limits_allotmentLimitID", "resource_type": "test", "alias": "not_null_stg_vidyard_allotment_limits_allotmentLimitID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentLimitID"}, "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "allotmentTypeID", "model": "{{ ref('stg_vidyard_allotment_types') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_allotment_types_allotmentTypeID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_allotment_types_allotmentTypeID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_allotment_types_allotmentTypeID", "resource_type": "test", "alias": "unique_stg_vidyard_allotment_types_allotmentTypeID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentTypeID"}, "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "allotmentTypeID", "model": "{{ ref('stg_vidyard_allotment_types') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_allotment_types_allotmentTypeID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_allotment_types_allotmentTypeID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_allotment_types_allotmentTypeID", "resource_type": "test", "alias": "not_null_stg_vidyard_allotment_types_allotmentTypeID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentTypeID"}, "test.master_dbt_models.unique_stg_vidyard_hubs_hubID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "hubID", "model": "{{ ref('stg_vidyard_hubs') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_hubs_hubID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_hubs_hubID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_hubs_hubID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_hubs_hubID", "resource_type": "test", "alias": "unique_stg_vidyard_hubs_hubID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_hubs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_hubs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "hubID"}, "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "hubID", "model": "{{ ref('stg_vidyard_hubs') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_hubs_hubID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_hubs_hubID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_hubs_hubID", "resource_type": "test", "alias": "not_null_stg_vidyard_hubs_hubID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_hubs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_hubs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "hubID"}, "test.master_dbt_models.unique_stg_vidyard_events_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_vidyard_events') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_events_eventID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_events_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_events_eventID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_events_eventID", "resource_type": "test", "alias": "unique_stg_vidyard_events_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_vidyard_events_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_vidyard_events') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_events_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_events_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_events_eventID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_events_eventID", "resource_type": "test", "alias": "not_null_stg_vidyard_events_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventJoinID", "model": "{{ ref('stg_vidyard_event_joins') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_event_joins_eventJoinID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_event_joins_eventJoinID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_event_joins_eventJoinID", "resource_type": "test", "alias": "unique_stg_vidyard_event_joins_eventJoinID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_event_joins"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_event_joins"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventJoinID"}, "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventJoinID", "model": "{{ ref('stg_vidyard_event_joins') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_event_joins_eventJoinID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_event_joins_eventJoinID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_event_joins_eventJoinID", "resource_type": "test", "alias": "not_null_stg_vidyard_event_joins_eventJoinID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_event_joins"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_event_joins"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventJoinID"}, "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "opportunityId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_opportunity_opportunityId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_opportunity_opportunityId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_opportunity_opportunityId", "resource_type": "test", "alias": "unique_stg_salesforce_opportunity_opportunityId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "opportunityId"}, "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "opportunityId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_opportunity_opportunityId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_opportunity_opportunityId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_opportunity_opportunityId", "resource_type": "test", "alias": "not_null_stg_salesforce_opportunity_opportunityId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "opportunityId"}, "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_opportunity_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_opportunity_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_opportunity_accountId", "resource_type": "test", "alias": "not_null_stg_salesforce_opportunity_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_opportunity_ownerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_opportunity_ownerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_opportunity_ownerId", "resource_type": "test", "alias": "not_null_stg_salesforce_opportunity_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.unique_stg_salesforce_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_accountId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_accountId", "resource_type": "test", "alias": "unique_stg_salesforce_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_salesforce_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_accountId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_salesforce_account_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_ownerId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_ownerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_ownerId", "resource_type": "test", "alias": "unique_stg_salesforce_account_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.not_null_stg_salesforce_account_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_ownerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_ownerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_ownerId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "vidyardAccountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_vidyardAccountId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_vidyardAccountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_vidyardAccountId", "resource_type": "test", "alias": "unique_stg_salesforce_account_vidyardAccountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardAccountId"}, "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "vidyardAccountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_vidyardAccountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_vidyardAccountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_vidyardAccountId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_vidyardAccountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardAccountId"}, "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "csmOwnerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_csmOwnerId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_csmOwnerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_csmOwnerId", "resource_type": "test", "alias": "unique_stg_salesforce_account_csmOwnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "csmOwnerId"}, "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "csmOwnerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_csmOwnerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_csmOwnerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_csmOwnerId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_csmOwnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "csmOwnerId"}, "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "vidyardUserId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_vidyardUserId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_vidyardUserId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_vidyardUserId", "resource_type": "test", "alias": "unique_stg_salesforce_account_vidyardUserId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardUserId"}, "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "vidyardUserId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_vidyardUserId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_vidyardUserId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_vidyardUserId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_vidyardUserId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardUserId"}, "test.master_dbt_models.unique_stg_salesforce_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_contact_contactId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_contact_contactId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_contact_contactId", "resource_type": "test", "alias": "unique_stg_salesforce_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.not_null_stg_salesforce_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_contact_contactId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_contact_contactId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_contact_contactId", "resource_type": "test", "alias": "not_null_stg_salesforce_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.unique_stg_salesforce_contact_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_contact_accountId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_contact_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_contact_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_contact_accountId", "resource_type": "test", "alias": "unique_stg_salesforce_contact_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_salesforce_contact_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_contact_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_contact_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_contact_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_contact_accountId", "resource_type": "test", "alias": "not_null_stg_salesforce_contact_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_salesforce_lead_leadId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "leadId", "model": "{{ ref('stg_salesforce_lead') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_lead_leadId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_lead_leadId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_lead_leadId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_lead_leadId", "resource_type": "test", "alias": "unique_stg_salesforce_lead_leadId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "leadId"}, "test.master_dbt_models.not_null_stg_salesforce_lead_leadId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "leadId", "model": "{{ ref('stg_salesforce_lead') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_lead_leadId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_lead_leadId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_lead_leadId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_lead_leadId", "resource_type": "test", "alias": "not_null_stg_salesforce_lead_leadId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "leadId"}, "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "leadOwnerId", "model": "{{ ref('stg_salesforce_lead') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_lead_leadOwnerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_lead_leadOwnerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_lead_leadOwnerId", "resource_type": "test", "alias": "not_null_stg_salesforce_lead_leadOwnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "leadOwnerId"}, "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaignMemberId", "model": "{{ ref('stg_salesforce_campaignmember') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_campaignmember_campaignMemberId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_campaignmember_campaignMemberId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_campaignmember_campaignMemberId", "resource_type": "test", "alias": "unique_stg_salesforce_campaignmember_campaignMemberId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_campaignmember"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_campaignmember"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "campaignMemberId"}, "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaignMemberId", "model": "{{ ref('stg_salesforce_campaignmember') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_campaignmember_campaignMemberId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_campaignmember_campaignMemberId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_campaignmember_campaignMemberId", "resource_type": "test", "alias": "not_null_stg_salesforce_campaignmember_campaignMemberId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_campaignmember"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_campaignmember"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "campaignMemberId"}, "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "createdDate", "model": "{{ ref('stg_salesforce_campaignmember') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_campaignmember_createdDate"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_campaignmember_createdDate.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_campaignmember_createdDate", "resource_type": "test", "alias": "not_null_stg_salesforce_campaignmember_createdDate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_campaignmember"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_campaignmember"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "createdDate"}}, "sources": {"source.master_dbt_models.govideo_production.product_sessions": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "product_sessions"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.product_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "product_sessions", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "product_sessions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"product_sessions\""}, "source.master_dbt_models.govideo_production.users": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "users"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "users", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"users\""}, "source.master_dbt_models.govideo_production.vidyard_com_sessions": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "vidyard_com_sessions"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.vidyard_com_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "vidyard_com_sessions", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "vidyard_com_sessions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"vidyard_com_sessions\""}, "source.master_dbt_models.govideo_production.opened_extension": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "opened_extension"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.opened_extension", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "opened_extension", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "opened_extension", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"opened_extension\""}, "source.master_dbt_models.govideo_production.global_session": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "global_session"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.global_session", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "global_session", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "global_session", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"global_session\""}, "source.master_dbt_models.govideo_production.pageviews": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "pageviews"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.pageviews", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "pageviews", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "pageviews", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"pageviews\""}, "source.master_dbt_models.govideo_production.video_recorded_or_uploaded": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "video_recorded_or_uploaded"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.video_recorded_or_uploaded", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "video_recorded_or_uploaded", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "video_recorded_or_uploaded", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"video_recorded_or_uploaded\""}, "source.master_dbt_models.govideo_production.platform_video_shared": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "platform_video_shared"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.platform_video_shared", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "platform_video_shared", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "platform_video_shared", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"platform_video_shared\""}, "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "video_creation_started_to_create_or_upload_a_video_combo"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "video_creation_started_to_create_or_upload_a_video_combo", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "video_creation_started_to_create_or_upload_a_video_combo", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"video_creation_started_to_create_or_upload_a_video_combo\""}, "source.master_dbt_models.govideo_production.vidyard_com_any_pageview": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "vidyard_com_any_pageview"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.vidyard_com_any_pageview", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "vidyard_com_any_pageview", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "vidyard_com_any_pageview", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"vidyard_com_any_pageview\""}, "source.master_dbt_models.govideo_production.sharing_share_combo": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "sharing_share_combo"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.sharing_share_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "sharing_share_combo", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "sharing_share_combo", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"sharing_share_combo\""}, "source.master_dbt_models.zuora.account": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "account"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "account", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"account\""}, "source.master_dbt_models.zuora.contact": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "contact"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "contact", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"contact\""}, "source.master_dbt_models.zuora.subscription": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "subscription"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.subscription", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "subscription", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "subscription", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"subscription\""}, "source.master_dbt_models.zuora.product": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "product"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.product", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "product", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "product", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"product\""}, "source.master_dbt_models.zuora.product_rate_plan": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "product_rate_plan"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.product_rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "product_rate_plan", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "product_rate_plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"product_rate_plan\""}, "source.master_dbt_models.zuora.rate_plan": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "rate_plan"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "rate_plan", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "rate_plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"rate_plan\""}, "source.master_dbt_models.public.vidyard_organizations": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_organizations"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_organizations", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_organizations", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_organizations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_organizations\""}, "source.master_dbt_models.public.vidyard_users": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_users"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_users", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_users\""}, "source.master_dbt_models.public.vidyard_user_groups": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_user_groups"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_user_groups", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_user_groups", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_user_groups", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_user_groups\""}, "source.master_dbt_models.public.vidyard_teams": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_teams"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_teams", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_teams", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_teams", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_teams\""}, "source.master_dbt_models.public.vidyard_team_memberships": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_team_memberships"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_team_memberships", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_team_memberships", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_team_memberships", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_team_memberships\""}, "source.master_dbt_models.public.vidyard_org_metrics": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_org_metrics"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_org_metrics", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_org_metrics", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_org_metrics", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_org_metrics\""}, "source.master_dbt_models.public.vidyard_videos": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_videos"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_videos", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_videos", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_videos", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_videos\""}, "source.master_dbt_models.public.vidyard_active_features": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_active_features"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_active_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_active_features", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_active_features", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_active_features\""}, "source.master_dbt_models.public.vidyard_features": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_features"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_features", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_features", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_features\""}, "source.master_dbt_models.public.vidyard_players": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_players"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_players", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_players", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_players", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_players\""}, "source.master_dbt_models.public.vidyard_allotment_limits": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_allotment_limits"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_allotment_limits", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_allotment_limits", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_allotment_limits", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_allotment_limits\""}, "source.master_dbt_models.public.vidyard_allotment_types": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_allotment_types"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_allotment_types", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_allotment_types", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_allotment_types", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_allotment_types\""}, "source.master_dbt_models.public.vidyard_hubs": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_hubs"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_hubs", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_hubs", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_hubs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_hubs\""}, "source.master_dbt_models.public.vidyard_events": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_events"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_events", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_events", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_events\""}, "source.master_dbt_models.public.vidyard_event_joins": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_event_joins"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_event_joins", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_event_joins", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_event_joins", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_event_joins\""}, "source.master_dbt_models.public.vidyard_nps_surveys": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_nps_surveys"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_nps_surveys", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_nps_surveys", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_nps_surveys", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_nps_surveys\""}, "source.master_dbt_models.salesforce_production.opportunity": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "opportunity"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.opportunity", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "opportunity", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "opportunity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"opportunity\""}, "source.master_dbt_models.salesforce_production.account": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "account"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "account", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"account\""}, "source.master_dbt_models.salesforce_production.contact": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "contact"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "contact", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"contact\""}, "source.master_dbt_models.salesforce_production.campaign": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "campaign"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.campaign", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "campaign", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "campaign", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"campaign\""}, "source.master_dbt_models.salesforce_production.lead": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "lead"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.lead", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "lead", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "lead", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"lead\""}, "source.master_dbt_models.salesforce_production.campaignmember": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "campaignmember"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.campaignmember", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "campaignmember", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "campaignmember", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"campaignmember\""}, "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case": {"fqn": ["master_dbt_models", "marts", "utils", "salesforce", "fct_sfdc_accounts_use_case"], "database": "dev", "schema": "salesforce", "unique_id": "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/marts/utils/utils.yml", "original_file_path": "models/marts/utils/utils.yml", "name": "fct_sfdc_accounts_use_case", "source_name": "salesforce", "source_description": "Main CRM", "loader": "", "identifier": "fct_sfdc_accounts_use_case", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce\".\"fct_sfdc_accounts_use_case\""}}, "macros": {"macro.master_dbt_models.reset_permissions": {"unique_id": "macro.master_dbt_models.reset_permissions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "macros/permissions_fixer.sql", "original_file_path": "macros/permissions_fixer.sql", "name": "reset_permissions", "macro_sql": "{% macro reset_permissions(table) %}\n\n  {% set query %}\n    GRANT ALL PRIVILEGES ON TABLE {{table}} TO vidyarddbt\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n  getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__make_temp_relation": {"unique_id": "macro.dbt_redshift.redshift__make_temp_relation", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__make_temp_relation", "macro_sql": "{% macro redshift__make_temp_relation(base_relation, suffix) %}\n    {% do return(postgres__make_temp_relation(base_relation, suffix)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded": ["source.master_dbt_models.govideo_production.video_recorded_or_uploaded"], "model.master_dbt_models.stg_govideo_production_pageviews": ["source.master_dbt_models.govideo_production.pageviews"], "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions": ["source.master_dbt_models.govideo_production.vidyard_com_sessions"], "model.master_dbt_models.stg_govideo_production_opened_extension": ["source.master_dbt_models.govideo_production.opened_extension"], "model.master_dbt_models.stg_govideo_production_product_sessions": ["source.master_dbt_models.govideo_production.product_sessions"], "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo": ["source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo"], "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview": ["source.master_dbt_models.govideo_production.vidyard_com_any_pageview"], "model.master_dbt_models.stg_govideo_production_sharing_share_combo": ["source.master_dbt_models.govideo_production.sharing_share_combo"], "model.master_dbt_models.stg_govideo_production_global_session": ["source.master_dbt_models.govideo_production.global_session"], "model.master_dbt_models.stg_govideo_production_users": ["source.master_dbt_models.govideo_production.users"], "model.master_dbt_models.stg_zuora_subscription": ["source.master_dbt_models.zuora.subscription"], "model.master_dbt_models.stg_zuora_account": ["source.master_dbt_models.zuora.account"], "model.master_dbt_models.stg_zuora_product": ["source.master_dbt_models.zuora.product"], "model.master_dbt_models.stg_zuora_rate_plan": ["source.master_dbt_models.zuora.rate_plan"], "model.master_dbt_models.stg_zuora_product_rate_plan": ["source.master_dbt_models.zuora.product_rate_plan"], "model.master_dbt_models.stg_zuora_contact": ["source.master_dbt_models.zuora.contact"], "model.master_dbt_models.stg_vidyard_features": ["source.master_dbt_models.public.vidyard_features"], "model.master_dbt_models.stg_vidyard_team_memberships": ["source.master_dbt_models.public.vidyard_team_memberships"], "model.master_dbt_models.stg_vidyard_events": ["source.master_dbt_models.public.vidyard_events"], "model.master_dbt_models.stg_vidyard_allotment_limits": ["source.master_dbt_models.public.vidyard_allotment_limits"], "model.master_dbt_models.stg_vidyard_nps_surveys": ["source.master_dbt_models.public.vidyard_nps_surveys"], "model.master_dbt_models.stg_vidyard_allotment_types": ["source.master_dbt_models.public.vidyard_allotment_types"], "model.master_dbt_models.stg_vidyard_event_joins": ["source.master_dbt_models.public.vidyard_event_joins"], "model.master_dbt_models.stg_vidyard_organizations": ["source.master_dbt_models.public.vidyard_organizations"], "model.master_dbt_models.stg_vidyard_players": ["source.master_dbt_models.public.vidyard_players"], "model.master_dbt_models.stg_vidyard_org_metrics": ["source.master_dbt_models.public.vidyard_org_metrics"], "model.master_dbt_models.stg_vidyard_user_groups": ["source.master_dbt_models.public.vidyard_user_groups"], "model.master_dbt_models.stg_vidyard_active_features": ["source.master_dbt_models.public.vidyard_active_features"], "model.master_dbt_models.stg_vidyard_teams": ["source.master_dbt_models.public.vidyard_teams"], "model.master_dbt_models.stg_vidyard_videos": ["source.master_dbt_models.public.vidyard_videos"], "model.master_dbt_models.stg_vidyard_hubs": ["source.master_dbt_models.public.vidyard_hubs"], "model.master_dbt_models.stg_vidyard_users": ["source.master_dbt_models.public.vidyard_users"], "model.master_dbt_models.stg_salesforce_account": ["source.master_dbt_models.salesforce_production.account"], "model.master_dbt_models.stg_salesforce_opportunity": ["source.master_dbt_models.salesforce_production.opportunity"], "model.master_dbt_models.stg_salesforce_campaign": ["source.master_dbt_models.salesforce_production.campaign"], "model.master_dbt_models.stg_salesforce_campaignmember": ["source.master_dbt_models.salesforce_production.campaignmember"], "model.master_dbt_models.stg_salesforce_contact": ["source.master_dbt_models.salesforce_production.contact"], "model.master_dbt_models.stg_salesforce_lead": ["source.master_dbt_models.salesforce_production.lead"], "model.master_dbt_models.fct_sfdc_accounts_use_case": ["model.master_dbt_models.stg_salesforce_account", "model.master_dbt_models.stg_salesforce_opportunity"], "model.master_dbt_models.fct_vidyard_pro_customers": ["model.master_dbt_models.stg_zuora_account", "model.master_dbt_models.stg_zuora_product", "model.master_dbt_models.stg_zuora_product_rate_plan", "model.master_dbt_models.stg_zuora_rate_plan", "model.master_dbt_models.stg_zuora_subscription"], "model.master_dbt_models.nps_survey_responses": ["model.master_dbt_models.stg_vidyard_nps_surveys", "model.master_dbt_models.stg_vidyard_users"], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "test.master_dbt_models.not_null_stg_govideo_production_users_userID": ["model.master_dbt_models.stg_govideo_production_users"], "test.master_dbt_models.unique_stg_govideo_production_users_userID": ["model.master_dbt_models.stg_govideo_production_users"], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"], "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID": ["model.master_dbt_models.stg_govideo_production_opened_extension"], "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID": ["model.master_dbt_models.stg_govideo_production_opened_extension"], "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID": ["model.master_dbt_models.stg_govideo_production_global_session"], "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID": ["model.master_dbt_models.stg_govideo_production_global_session"], "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID": ["model.master_dbt_models.stg_govideo_production_pageviews"], "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID": ["model.master_dbt_models.stg_govideo_production_pageviews"], "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"], "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"], "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"], "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"], "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"], "test.master_dbt_models.not_null_stg_zuora_account_accountId": ["model.master_dbt_models.stg_zuora_account"], "test.master_dbt_models.unique_stg_zuora_account_accountId": ["model.master_dbt_models.stg_zuora_account"], "test.master_dbt_models.unique_stg_zuora_contact_contactId": ["model.master_dbt_models.stg_zuora_contact"], "test.master_dbt_models.not_null_stg_zuora_contact_contactId": ["model.master_dbt_models.stg_zuora_contact"], "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.unique_stg_zuora_product_productId": ["model.master_dbt_models.stg_zuora_product"], "test.master_dbt_models.not_null_stg_zuora_product_productId": ["model.master_dbt_models.stg_zuora_product"], "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId": ["model.master_dbt_models.stg_zuora_product_rate_plan"], "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId": ["model.master_dbt_models.stg_zuora_product_rate_plan"], "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID": ["model.master_dbt_models.stg_zuora_rate_plan"], "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID": ["model.master_dbt_models.stg_zuora_rate_plan"], "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_organizations_parentID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_organizations_accountId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_users_userId": ["model.master_dbt_models.stg_vidyard_users"], "test.master_dbt_models.not_null_stg_vidyard_users_userId": ["model.master_dbt_models.stg_vidyard_users"], "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.unique_stg_vidyard_user_groups_userID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.unique_stg_vidyard_teams_teamID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.not_null_stg_vidyard_teams_teamID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.unique_stg_vidyard_teams_accountID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.not_null_stg_vidyard_teams_accountID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.unique_stg_vidyard_videos_videoID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.not_null_stg_vidyard_videos_videoID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.unique_stg_vidyard_videos_userID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.not_null_stg_vidyard_videos_userID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.unique_stg_vidyard_videos_organizationID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.unique_stg_vidyard_features_featureId": ["model.master_dbt_models.stg_vidyard_features"], "test.master_dbt_models.not_null_stg_vidyard_features_featureId": ["model.master_dbt_models.stg_vidyard_features"], "test.master_dbt_models.unique_stg_vidyard_players_playerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.not_null_stg_vidyard_players_playerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.unique_stg_vidyard_players_organizationID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.not_null_stg_vidyard_players_organizationID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.unique_stg_vidyard_players_ownerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.not_null_stg_vidyard_players_ownerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID": ["model.master_dbt_models.stg_vidyard_allotment_types"], "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID": ["model.master_dbt_models.stg_vidyard_allotment_types"], "test.master_dbt_models.unique_stg_vidyard_hubs_hubID": ["model.master_dbt_models.stg_vidyard_hubs"], "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID": ["model.master_dbt_models.stg_vidyard_hubs"], "test.master_dbt_models.unique_stg_vidyard_events_eventID": ["model.master_dbt_models.stg_vidyard_events"], "test.master_dbt_models.not_null_stg_vidyard_events_eventID": ["model.master_dbt_models.stg_vidyard_events"], "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID": ["model.master_dbt_models.stg_vidyard_event_joins"], "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID": ["model.master_dbt_models.stg_vidyard_event_joins"], "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.unique_stg_salesforce_account_accountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_accountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_ownerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_ownerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_contact_contactId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.not_null_stg_salesforce_contact_contactId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.unique_stg_salesforce_contact_accountId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.not_null_stg_salesforce_contact_accountId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.unique_stg_salesforce_lead_leadId": ["model.master_dbt_models.stg_salesforce_lead"], "test.master_dbt_models.not_null_stg_salesforce_lead_leadId": ["model.master_dbt_models.stg_salesforce_lead"], "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId": ["model.master_dbt_models.stg_salesforce_lead"], "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId": ["model.master_dbt_models.stg_salesforce_campaignmember"], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId": ["model.master_dbt_models.stg_salesforce_campaignmember"], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate": ["model.master_dbt_models.stg_salesforce_campaignmember"], "source.master_dbt_models.govideo_production.product_sessions": [], "source.master_dbt_models.govideo_production.users": [], "source.master_dbt_models.govideo_production.vidyard_com_sessions": [], "source.master_dbt_models.govideo_production.opened_extension": [], "source.master_dbt_models.govideo_production.global_session": [], "source.master_dbt_models.govideo_production.pageviews": [], "source.master_dbt_models.govideo_production.video_recorded_or_uploaded": [], "source.master_dbt_models.govideo_production.platform_video_shared": [], "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo": [], "source.master_dbt_models.govideo_production.vidyard_com_any_pageview": [], "source.master_dbt_models.govideo_production.sharing_share_combo": [], "source.master_dbt_models.zuora.account": [], "source.master_dbt_models.zuora.contact": [], "source.master_dbt_models.zuora.subscription": [], "source.master_dbt_models.zuora.product": [], "source.master_dbt_models.zuora.product_rate_plan": [], "source.master_dbt_models.zuora.rate_plan": [], "source.master_dbt_models.public.vidyard_organizations": [], "source.master_dbt_models.public.vidyard_users": [], "source.master_dbt_models.public.vidyard_user_groups": [], "source.master_dbt_models.public.vidyard_teams": [], "source.master_dbt_models.public.vidyard_team_memberships": [], "source.master_dbt_models.public.vidyard_org_metrics": [], "source.master_dbt_models.public.vidyard_videos": [], "source.master_dbt_models.public.vidyard_active_features": [], "source.master_dbt_models.public.vidyard_features": [], "source.master_dbt_models.public.vidyard_players": [], "source.master_dbt_models.public.vidyard_allotment_limits": [], "source.master_dbt_models.public.vidyard_allotment_types": [], "source.master_dbt_models.public.vidyard_hubs": [], "source.master_dbt_models.public.vidyard_events": [], "source.master_dbt_models.public.vidyard_event_joins": [], "source.master_dbt_models.public.vidyard_nps_surveys": [], "source.master_dbt_models.salesforce_production.opportunity": [], "source.master_dbt_models.salesforce_production.account": [], "source.master_dbt_models.salesforce_production.contact": [], "source.master_dbt_models.salesforce_production.campaign": [], "source.master_dbt_models.salesforce_production.lead": [], "source.master_dbt_models.salesforce_production.campaignmember": [], "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case": []}, "child_map": {"model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded": ["test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID"], "model.master_dbt_models.stg_govideo_production_pageviews": ["test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID", "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID"], "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions": ["test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID", "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID"], "model.master_dbt_models.stg_govideo_production_opened_extension": ["test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID", "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID"], "model.master_dbt_models.stg_govideo_production_product_sessions": ["test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID", "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID", "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID"], "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo": ["test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID"], "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview": ["test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID"], "model.master_dbt_models.stg_govideo_production_sharing_share_combo": ["test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID", "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID"], "model.master_dbt_models.stg_govideo_production_global_session": ["test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID", "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID"], "model.master_dbt_models.stg_govideo_production_users": ["test.master_dbt_models.not_null_stg_govideo_production_users_userID", "test.master_dbt_models.unique_stg_govideo_production_users_userID"], "model.master_dbt_models.stg_zuora_subscription": ["model.master_dbt_models.fct_vidyard_pro_customers"], "model.master_dbt_models.stg_zuora_account": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_account_accountId", "test.master_dbt_models.unique_stg_zuora_account_accountId"], "model.master_dbt_models.stg_zuora_product": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_product_productId", "test.master_dbt_models.unique_stg_zuora_product_productId"], "model.master_dbt_models.stg_zuora_rate_plan": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID", "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID"], "model.master_dbt_models.stg_zuora_product_rate_plan": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId", "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId"], "model.master_dbt_models.stg_zuora_contact": ["test.master_dbt_models.not_null_stg_zuora_contact_contactId", "test.master_dbt_models.unique_stg_zuora_contact_contactId"], "model.master_dbt_models.stg_vidyard_features": ["test.master_dbt_models.not_null_stg_vidyard_features_featureId", "test.master_dbt_models.unique_stg_vidyard_features_featureId"], "model.master_dbt_models.stg_vidyard_team_memberships": ["test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID", "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID", "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID", "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID", "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID", "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID"], "model.master_dbt_models.stg_vidyard_events": ["test.master_dbt_models.not_null_stg_vidyard_events_eventID", "test.master_dbt_models.unique_stg_vidyard_events_eventID"], "model.master_dbt_models.stg_vidyard_allotment_limits": ["test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID", "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID", "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID", "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID"], "model.master_dbt_models.stg_vidyard_nps_surveys": ["model.master_dbt_models.nps_survey_responses"], "model.master_dbt_models.stg_vidyard_allotment_types": ["test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID", "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID"], "model.master_dbt_models.stg_vidyard_event_joins": ["test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID", "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID"], "model.master_dbt_models.stg_vidyard_organizations": ["test.master_dbt_models.not_null_stg_vidyard_organizations_accountId", "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID", "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId", "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID", "test.master_dbt_models.unique_stg_vidyard_organizations_accountId", "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID", "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId", "test.master_dbt_models.unique_stg_vidyard_organizations_parentID"], "model.master_dbt_models.stg_vidyard_players": ["test.master_dbt_models.not_null_stg_vidyard_players_organizationID", "test.master_dbt_models.not_null_stg_vidyard_players_ownerID", "test.master_dbt_models.not_null_stg_vidyard_players_playerID", "test.master_dbt_models.unique_stg_vidyard_players_organizationID", "test.master_dbt_models.unique_stg_vidyard_players_ownerID", "test.master_dbt_models.unique_stg_vidyard_players_playerID"], "model.master_dbt_models.stg_vidyard_org_metrics": ["test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID", "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID", "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID", "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID"], "model.master_dbt_models.stg_vidyard_user_groups": ["test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID", "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID", "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID", "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID", "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID", "test.master_dbt_models.unique_stg_vidyard_user_groups_userID"], "model.master_dbt_models.stg_vidyard_active_features": ["test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID", "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID", "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID", "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID"], "model.master_dbt_models.stg_vidyard_teams": ["test.master_dbt_models.not_null_stg_vidyard_teams_accountID", "test.master_dbt_models.not_null_stg_vidyard_teams_teamID", "test.master_dbt_models.unique_stg_vidyard_teams_accountID", "test.master_dbt_models.unique_stg_vidyard_teams_teamID"], "model.master_dbt_models.stg_vidyard_videos": ["test.master_dbt_models.not_null_stg_vidyard_videos_organizationID", "test.master_dbt_models.not_null_stg_vidyard_videos_userID", "test.master_dbt_models.not_null_stg_vidyard_videos_videoID", "test.master_dbt_models.unique_stg_vidyard_videos_organizationID", "test.master_dbt_models.unique_stg_vidyard_videos_userID", "test.master_dbt_models.unique_stg_vidyard_videos_videoID"], "model.master_dbt_models.stg_vidyard_hubs": ["test.master_dbt_models.not_null_stg_vidyard_hubs_hubID", "test.master_dbt_models.unique_stg_vidyard_hubs_hubID"], "model.master_dbt_models.stg_vidyard_users": ["model.master_dbt_models.nps_survey_responses", "test.master_dbt_models.not_null_stg_vidyard_users_userId", "test.master_dbt_models.unique_stg_vidyard_users_userId"], "model.master_dbt_models.stg_salesforce_account": ["model.master_dbt_models.fct_sfdc_accounts_use_case", "test.master_dbt_models.not_null_stg_salesforce_account_accountId", "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId", "test.master_dbt_models.not_null_stg_salesforce_account_ownerId", "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId", "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId", "test.master_dbt_models.unique_stg_salesforce_account_accountId", "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId", "test.master_dbt_models.unique_stg_salesforce_account_ownerId", "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId", "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId"], "model.master_dbt_models.stg_salesforce_opportunity": ["model.master_dbt_models.fct_sfdc_accounts_use_case", "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId", "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId", "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId", "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId"], "model.master_dbt_models.stg_salesforce_campaign": [], "model.master_dbt_models.stg_salesforce_campaignmember": ["test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId", "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate", "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId"], "model.master_dbt_models.stg_salesforce_contact": ["test.master_dbt_models.not_null_stg_salesforce_contact_accountId", "test.master_dbt_models.not_null_stg_salesforce_contact_contactId", "test.master_dbt_models.unique_stg_salesforce_contact_accountId", "test.master_dbt_models.unique_stg_salesforce_contact_contactId"], "model.master_dbt_models.stg_salesforce_lead": ["test.master_dbt_models.not_null_stg_salesforce_lead_leadId", "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId", "test.master_dbt_models.unique_stg_salesforce_lead_leadId"], "model.master_dbt_models.fct_sfdc_accounts_use_case": [], "model.master_dbt_models.fct_vidyard_pro_customers": [], "model.master_dbt_models.nps_survey_responses": [], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID": [], "test.master_dbt_models.not_null_stg_govideo_production_users_userID": [], "test.master_dbt_models.unique_stg_govideo_production_users_userID": [], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID": [], "test.master_dbt_models.not_null_stg_zuora_account_accountId": [], "test.master_dbt_models.unique_stg_zuora_account_accountId": [], "test.master_dbt_models.unique_stg_zuora_contact_contactId": [], "test.master_dbt_models.not_null_stg_zuora_contact_contactId": [], "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.unique_stg_zuora_product_productId": [], "test.master_dbt_models.not_null_stg_zuora_product_productId": [], "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId": [], "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId": [], "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID": [], "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID": [], "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_organizations_parentID": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID": [], "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId": [], "test.master_dbt_models.unique_stg_vidyard_organizations_accountId": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId": [], "test.master_dbt_models.unique_stg_vidyard_users_userId": [], "test.master_dbt_models.not_null_stg_vidyard_users_userId": [], "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID": [], "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID": [], "test.master_dbt_models.unique_stg_vidyard_user_groups_userID": [], "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID": [], "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_teams_teamID": [], "test.master_dbt_models.not_null_stg_vidyard_teams_teamID": [], "test.master_dbt_models.unique_stg_vidyard_teams_accountID": [], "test.master_dbt_models.not_null_stg_vidyard_teams_accountID": [], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID": [], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID": [], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID": [], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID": [], "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID": [], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID": [], "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID": [], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID": [], "test.master_dbt_models.unique_stg_vidyard_videos_videoID": [], "test.master_dbt_models.not_null_stg_vidyard_videos_videoID": [], "test.master_dbt_models.unique_stg_vidyard_videos_userID": [], "test.master_dbt_models.not_null_stg_vidyard_videos_userID": [], "test.master_dbt_models.unique_stg_vidyard_videos_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID": [], "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID": [], "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_features_featureId": [], "test.master_dbt_models.not_null_stg_vidyard_features_featureId": [], "test.master_dbt_models.unique_stg_vidyard_players_playerID": [], "test.master_dbt_models.not_null_stg_vidyard_players_playerID": [], "test.master_dbt_models.unique_stg_vidyard_players_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_players_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_players_ownerID": [], "test.master_dbt_models.not_null_stg_vidyard_players_ownerID": [], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID": [], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID": [], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID": [], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID": [], "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID": [], "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID": [], "test.master_dbt_models.unique_stg_vidyard_hubs_hubID": [], "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID": [], "test.master_dbt_models.unique_stg_vidyard_events_eventID": [], "test.master_dbt_models.not_null_stg_vidyard_events_eventID": [], "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID": [], "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID": [], "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId": [], "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId": [], "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId": [], "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId": [], "test.master_dbt_models.unique_stg_salesforce_account_accountId": [], "test.master_dbt_models.not_null_stg_salesforce_account_accountId": [], "test.master_dbt_models.unique_stg_salesforce_account_ownerId": [], "test.master_dbt_models.not_null_stg_salesforce_account_ownerId": [], "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId": [], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId": [], "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId": [], "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId": [], "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId": [], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId": [], "test.master_dbt_models.unique_stg_salesforce_contact_contactId": [], "test.master_dbt_models.not_null_stg_salesforce_contact_contactId": [], "test.master_dbt_models.unique_stg_salesforce_contact_accountId": [], "test.master_dbt_models.not_null_stg_salesforce_contact_accountId": [], "test.master_dbt_models.unique_stg_salesforce_lead_leadId": [], "test.master_dbt_models.not_null_stg_salesforce_lead_leadId": [], "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId": [], "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId": [], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId": [], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate": [], "source.master_dbt_models.govideo_production.product_sessions": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "source.master_dbt_models.govideo_production.users": ["model.master_dbt_models.stg_govideo_production_users"], "source.master_dbt_models.govideo_production.vidyard_com_sessions": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"], "source.master_dbt_models.govideo_production.opened_extension": ["model.master_dbt_models.stg_govideo_production_opened_extension"], "source.master_dbt_models.govideo_production.global_session": ["model.master_dbt_models.stg_govideo_production_global_session"], "source.master_dbt_models.govideo_production.pageviews": ["model.master_dbt_models.stg_govideo_production_pageviews"], "source.master_dbt_models.govideo_production.video_recorded_or_uploaded": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"], "source.master_dbt_models.govideo_production.platform_video_shared": [], "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "source.master_dbt_models.govideo_production.vidyard_com_any_pageview": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"], "source.master_dbt_models.govideo_production.sharing_share_combo": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"], "source.master_dbt_models.zuora.account": ["model.master_dbt_models.stg_zuora_account"], "source.master_dbt_models.zuora.contact": ["model.master_dbt_models.stg_zuora_contact"], "source.master_dbt_models.zuora.subscription": ["model.master_dbt_models.stg_zuora_subscription"], "source.master_dbt_models.zuora.product": ["model.master_dbt_models.stg_zuora_product"], "source.master_dbt_models.zuora.product_rate_plan": ["model.master_dbt_models.stg_zuora_product_rate_plan"], "source.master_dbt_models.zuora.rate_plan": ["model.master_dbt_models.stg_zuora_rate_plan"], "source.master_dbt_models.public.vidyard_organizations": ["model.master_dbt_models.stg_vidyard_organizations"], "source.master_dbt_models.public.vidyard_users": ["model.master_dbt_models.stg_vidyard_users"], "source.master_dbt_models.public.vidyard_user_groups": ["model.master_dbt_models.stg_vidyard_user_groups"], "source.master_dbt_models.public.vidyard_teams": ["model.master_dbt_models.stg_vidyard_teams"], "source.master_dbt_models.public.vidyard_team_memberships": ["model.master_dbt_models.stg_vidyard_team_memberships"], "source.master_dbt_models.public.vidyard_org_metrics": ["model.master_dbt_models.stg_vidyard_org_metrics"], "source.master_dbt_models.public.vidyard_videos": ["model.master_dbt_models.stg_vidyard_videos"], "source.master_dbt_models.public.vidyard_active_features": ["model.master_dbt_models.stg_vidyard_active_features"], "source.master_dbt_models.public.vidyard_features": ["model.master_dbt_models.stg_vidyard_features"], "source.master_dbt_models.public.vidyard_players": ["model.master_dbt_models.stg_vidyard_players"], "source.master_dbt_models.public.vidyard_allotment_limits": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "source.master_dbt_models.public.vidyard_allotment_types": ["model.master_dbt_models.stg_vidyard_allotment_types"], "source.master_dbt_models.public.vidyard_hubs": ["model.master_dbt_models.stg_vidyard_hubs"], "source.master_dbt_models.public.vidyard_events": ["model.master_dbt_models.stg_vidyard_events"], "source.master_dbt_models.public.vidyard_event_joins": ["model.master_dbt_models.stg_vidyard_event_joins"], "source.master_dbt_models.public.vidyard_nps_surveys": ["model.master_dbt_models.stg_vidyard_nps_surveys"], "source.master_dbt_models.salesforce_production.opportunity": ["model.master_dbt_models.stg_salesforce_opportunity"], "source.master_dbt_models.salesforce_production.account": ["model.master_dbt_models.stg_salesforce_account"], "source.master_dbt_models.salesforce_production.contact": ["model.master_dbt_models.stg_salesforce_contact"], "source.master_dbt_models.salesforce_production.campaign": ["model.master_dbt_models.stg_salesforce_campaign"], "source.master_dbt_models.salesforce_production.lead": ["model.master_dbt_models.stg_salesforce_lead"], "source.master_dbt_models.salesforce_production.campaignmember": ["model.master_dbt_models.stg_salesforce_campaignmember"], "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case": []}}
=======
{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.0", "generated_at": "2021-05-26T14:55:29.581418Z", "invocation_id": "fdfd61fd-4783-43c4-b9a5-baa817ac538a", "env": {}, "project_id": "ddaf672790663913aca01b3116f1986b", "user_id": "a6e7aa6f-986c-4f27-99ea-d640c4308cb0", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded": {"raw_sql": "SELECT\n        video_recorded_or_uploaded.event_id as eventID,\n        video_recorded_or_uploaded.user_id as userID,\n        video_recorded_or_uploaded.time as eventTime,\n        video_recorded_or_uploaded.continent as continent,\n        video_recorded_or_uploaded.country as country,\n        video_recorded_or_uploaded.region as region,\n        video_recorded_or_uploaded.city as city,\n        video_recorded_or_uploaded.platform as platform,\n        video_recorded_or_uploaded.device as device,\n        video_recorded_or_uploaded.device_type as deviceType,\n        video_recorded_or_uploaded.browser as browser,\n        video_recorded_or_uploaded.browser_type as browserType,\n        video_recorded_or_uploaded.vidyard_platform as vidyardPlatform,\n        video_recorded_or_uploaded.referrer as referrer,\n        video_recorded_or_uploaded.landing_page as landingPage,\n        video_recorded_or_uploaded.landing_page_query as landingPageQuery,\n        video_recorded_or_uploaded.query as query,\n        video_recorded_or_uploaded.domain as domain,\n        video_recorded_or_uploaded.path as path,\n        video_recorded_or_uploaded.title as title,\n        video_recorded_or_uploaded.channels as channels\nFROM\n        {{ source ( 'govideo_production' , 'video_recorded_or_uploaded')}} as video_recorded_or_uploaded\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_video_recorded_or_uploaded"], "unique_id": "model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_video_recorded_or_uploaded.sql", "original_file_path": "models/staging/heap/stg_govideo_production_video_recorded_or_uploaded.sql", "name": "stg_govideo_production_video_recorded_or_uploaded", "resource_type": "model", "alias": "stg_govideo_production_video_recorded_or_uploaded", "checksum": {"name": "sha256", "checksum": "05e7745ee928aa2a710733f0b05ac5571ca2c5d6494766dd380431b2125a346c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "video_recorded_or_uploaded"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.video_recorded_or_uploaded"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "User's device name. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=phone-model-phone_model%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_video_recorded_or_uploaded.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        video_recorded_or_uploaded.event_id as eventID,\n        video_recorded_or_uploaded.user_id as userID,\n        video_recorded_or_uploaded.time as eventTime,\n        video_recorded_or_uploaded.continent as continent,\n        video_recorded_or_uploaded.country as country,\n        video_recorded_or_uploaded.region as region,\n        video_recorded_or_uploaded.city as city,\n        video_recorded_or_uploaded.platform as platform,\n        video_recorded_or_uploaded.device as device,\n        video_recorded_or_uploaded.device_type as deviceType,\n        video_recorded_or_uploaded.browser as browser,\n        video_recorded_or_uploaded.browser_type as browserType,\n        video_recorded_or_uploaded.vidyard_platform as vidyardPlatform,\n        video_recorded_or_uploaded.referrer as referrer,\n        video_recorded_or_uploaded.landing_page as landingPage,\n        video_recorded_or_uploaded.landing_page_query as landingPageQuery,\n        video_recorded_or_uploaded.query as query,\n        video_recorded_or_uploaded.domain as domain,\n        video_recorded_or_uploaded.path as path,\n        video_recorded_or_uploaded.title as title,\n        video_recorded_or_uploaded.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"video_recorded_or_uploaded\" as video_recorded_or_uploaded\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_video_recorded_or_uploaded\""}, "model.master_dbt_models.stg_govideo_production_pageviews": {"raw_sql": "SELECT\n        pageviews.event_id as eventID,\n        pageviews.user_id as userID,\n        pageviews.time as eventTime,\n        pageviews.country as country,\n        pageviews.region as region,\n        pageviews.city as city,\n        pageviews.platform as platform,\n        pageviews.device as device,\n        pageviews.device_type as deviceType,\n        pageviews.browser as browser,\n        pageviews.referrer as referrer,\n        pageviews.landing_page as landingPage,\n        pageviews.landing_page_query as landingPageQuery,\n        pageviews.query as query,\n        pageviews.domain as domain,\n        pageviews.path as path,\n        pageviews.title as title,\n        pageviews.utm_source as utmSource,\n        pageviews.utm_medium as utmMedium,\n        pageviews.utm_campaign as utmCampaign,\n        pageviews.utm_term as utmTerm,\n        pageviews.utm_content as utmContent\nFROM\n        {{ source ('govideo_production' , 'pageviews')}} as pageviews\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_pageviews"], "unique_id": "model.master_dbt_models.stg_govideo_production_pageviews", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_pageviews.sql", "original_file_path": "models/staging/heap/stg_govideo_production_pageviews.sql", "name": "stg_govideo_production_pageviews", "resource_type": "model", "alias": "stg_govideo_production_pageviews", "checksum": {"name": "sha256", "checksum": "043a6fdfbd9cd877a46287a936dc8f1661d015b40ec893a5290cdf73ea7c189b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "pageviews"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.pageviews"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "User's device name. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=phone-model-phone_model%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_pageviews.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        pageviews.event_id as eventID,\n        pageviews.user_id as userID,\n        pageviews.time as eventTime,\n        pageviews.country as country,\n        pageviews.region as region,\n        pageviews.city as city,\n        pageviews.platform as platform,\n        pageviews.device as device,\n        pageviews.device_type as deviceType,\n        pageviews.browser as browser,\n        pageviews.referrer as referrer,\n        pageviews.landing_page as landingPage,\n        pageviews.landing_page_query as landingPageQuery,\n        pageviews.query as query,\n        pageviews.domain as domain,\n        pageviews.path as path,\n        pageviews.title as title,\n        pageviews.utm_source as utmSource,\n        pageviews.utm_medium as utmMedium,\n        pageviews.utm_campaign as utmCampaign,\n        pageviews.utm_term as utmTerm,\n        pageviews.utm_content as utmContent\nFROM\n        \"dev\".\"govideo_production\".\"pageviews\" as pageviews\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_pageviews\""}, "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions": {"raw_sql": "SELECT\n        vidyard_com_sessions.event_id as eventID,\n        vidyard_com_sessions.user_id as userID,\n        vidyard_com_sessions.session_id as sessionID,\n        vidyard_com_sessions.session_time as sessionTime,\n        vidyard_com_sessions.continent as continent,\n        vidyard_com_sessions.country as country,\n        vidyard_com_sessions.region as region,\n        vidyard_com_sessions.city as city,\n        vidyard_com_sessions.platform as platform,\n        vidyard_com_sessions.device_type as deviceType,\n        vidyard_com_sessions.browser as browser,\n        vidyard_com_sessions.browser_type as browserType,\n        vidyard_com_sessions.vidyard_platform as vidyardPlatform,\n        vidyard_com_sessions.referrer as referrer,\n        vidyard_com_sessions.landing_page as landingPage,\n        vidyard_com_sessions.landing_page_query as landingPageQuery,\n        vidyard_com_sessions.query as query,\n        vidyard_com_sessions.domain as domain,\n        vidyard_com_sessions.path as path,\n        vidyard_com_sessions.title as title,\n        vidyard_com_sessions.channels as channels,\n        vidyard_com_sessions.utm_source as utmSource,\n        vidyard_com_sessions.utm_medium as utmMedium,\n        vidyard_com_sessions.utm_campaign as utmCampaign,\n        vidyard_com_sessions.utm_term as utmTerm,\n        vidyard_com_sessions.utm_content as utmContent\n\nFROM\n        {{ source ('govideo_production' , 'vidyard_com_sessions')}} as vidyard_com_sessions\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_vidyard_com_sessions"], "unique_id": "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_vidyard_com_sessions.sql", "original_file_path": "models/staging/heap/stg_govideo_production_vidyard_com_sessions.sql", "name": "stg_govideo_production_vidyard_com_sessions", "resource_type": "model", "alias": "stg_govideo_production_vidyard_com_sessions", "checksum": {"name": "sha256", "checksum": "763ec4c251a6cdd617efb68a3e41ffb271d5287f846b78bfb4ef00756e7e8859"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "vidyard_com_sessions"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.vidyard_com_sessions"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionID": {"name": "sessionID", "description": "The ID of the associated session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionTime": {"name": "sessionTime", "description": "The timestamp of when the session began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels: email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_vidyard_com_sessions.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_com_sessions.event_id as eventID,\n        vidyard_com_sessions.user_id as userID,\n        vidyard_com_sessions.session_id as sessionID,\n        vidyard_com_sessions.session_time as sessionTime,\n        vidyard_com_sessions.continent as continent,\n        vidyard_com_sessions.country as country,\n        vidyard_com_sessions.region as region,\n        vidyard_com_sessions.city as city,\n        vidyard_com_sessions.platform as platform,\n        vidyard_com_sessions.device_type as deviceType,\n        vidyard_com_sessions.browser as browser,\n        vidyard_com_sessions.browser_type as browserType,\n        vidyard_com_sessions.vidyard_platform as vidyardPlatform,\n        vidyard_com_sessions.referrer as referrer,\n        vidyard_com_sessions.landing_page as landingPage,\n        vidyard_com_sessions.landing_page_query as landingPageQuery,\n        vidyard_com_sessions.query as query,\n        vidyard_com_sessions.domain as domain,\n        vidyard_com_sessions.path as path,\n        vidyard_com_sessions.title as title,\n        vidyard_com_sessions.channels as channels,\n        vidyard_com_sessions.utm_source as utmSource,\n        vidyard_com_sessions.utm_medium as utmMedium,\n        vidyard_com_sessions.utm_campaign as utmCampaign,\n        vidyard_com_sessions.utm_term as utmTerm,\n        vidyard_com_sessions.utm_content as utmContent\n\nFROM\n        \"dev\".\"govideo_production\".\"vidyard_com_sessions\" as vidyard_com_sessions\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_vidyard_com_sessions\""}, "model.master_dbt_models.stg_govideo_production_opened_extension": {"raw_sql": "SELECT\n        opened_extension.event_id as eventID,\n        opened_extension.user_id as userID,\n        opened_extension.time as eventTime,\n        opened_extension.continent as continent,\n        opened_extension.country as country,\n        opened_extension.region as region,\n        opened_extension.city as city,\n        opened_extension.platform as platform,\n        opened_extension.device_type as deviceType,\n        opened_extension.browser as browser,\n        opened_extension.browser_type as browserType,\n        opened_extension.vidyard_platform as vidyardPlatform,\n        opened_extension.referrer as referrer,\n        opened_extension.landing_page as landingPage,\n        opened_extension.landing_page_query as landingPageQuery,\n        opened_extension.query as query,\n        opened_extension.domain as domain,\n        opened_extension.path as path,\n        opened_extension.title as title,\n        opened_extension.channels as channels\nFROM\n        {{ source('govideo_production' ,'opened_extension') }} as opened_extension\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_opened_extension"], "unique_id": "model.master_dbt_models.stg_govideo_production_opened_extension", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_opened_extension.sql", "original_file_path": "models/staging/heap/stg_govideo_production_opened_extension.sql", "name": "stg_govideo_production_opened_extension", "resource_type": "model", "alias": "stg_govideo_production_opened_extension", "checksum": {"name": "sha256", "checksum": "a0f76001af63f1dbc6b1894428b9f608273127d524bf0ab82abdfb9f8621b7d5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "opened_extension"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.opened_extension"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": " The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent.https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_opened_extension.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        opened_extension.event_id as eventID,\n        opened_extension.user_id as userID,\n        opened_extension.time as eventTime,\n        opened_extension.continent as continent,\n        opened_extension.country as country,\n        opened_extension.region as region,\n        opened_extension.city as city,\n        opened_extension.platform as platform,\n        opened_extension.device_type as deviceType,\n        opened_extension.browser as browser,\n        opened_extension.browser_type as browserType,\n        opened_extension.vidyard_platform as vidyardPlatform,\n        opened_extension.referrer as referrer,\n        opened_extension.landing_page as landingPage,\n        opened_extension.landing_page_query as landingPageQuery,\n        opened_extension.query as query,\n        opened_extension.domain as domain,\n        opened_extension.path as path,\n        opened_extension.title as title,\n        opened_extension.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"opened_extension\" as opened_extension\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_opened_extension\""}, "model.master_dbt_models.stg_govideo_production_product_sessions": {"raw_sql": "SELECT\n        product_sessions.event_id as eventID,\n        product_sessions.user_id as userID,\n        product_sessions.time as eventTime,\n        product_sessions.continent as continent,\n        product_sessions.country as country,\n        product_sessions.region as region,\n        product_sessions.city as city,\n        product_sessions.platform as platform,\n        product_sessions.device as device,\n        product_sessions.device_type as deviceType,\n        product_sessions.browser as browser,\n        product_sessions.browser_type as browserType,\n        product_sessions.vidyard_platform as vidyardPlatform,\n        product_sessions.referrer as referrer,\n        product_sessions.landing_page as landingPage,\n        product_sessions.landing_page_query as landingPageQuery,\n        product_sessions.query as query,\n        product_sessions.domain as domain,\n        product_sessions.path as path,\n        product_sessions.title as title,\n        product_sessions.channels as channels\nFROM\n        {{ source ('govideo_production', 'product_sessions')}} as product_sessions\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_product_sessions"], "unique_id": "model.master_dbt_models.stg_govideo_production_product_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_product_sessions.sql", "original_file_path": "models/staging/heap/stg_govideo_production_product_sessions.sql", "name": "stg_govideo_production_product_sessions", "resource_type": "model", "alias": "stg_govideo_production_product_sessions", "checksum": {"name": "sha256", "checksum": "cdf786dbdb768df4cf9e6b5bdb1f08cc03f7e588c38087f0842bc4f0cd31edf0"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "product_sessions"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.product_sessions"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "decsription": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin"}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io   https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_product_sessions.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        product_sessions.event_id as eventID,\n        product_sessions.user_id as userID,\n        product_sessions.time as eventTime,\n        product_sessions.continent as continent,\n        product_sessions.country as country,\n        product_sessions.region as region,\n        product_sessions.city as city,\n        product_sessions.platform as platform,\n        product_sessions.device as device,\n        product_sessions.device_type as deviceType,\n        product_sessions.browser as browser,\n        product_sessions.browser_type as browserType,\n        product_sessions.vidyard_platform as vidyardPlatform,\n        product_sessions.referrer as referrer,\n        product_sessions.landing_page as landingPage,\n        product_sessions.landing_page_query as landingPageQuery,\n        product_sessions.query as query,\n        product_sessions.domain as domain,\n        product_sessions.path as path,\n        product_sessions.title as title,\n        product_sessions.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"product_sessions\" as product_sessions\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_product_sessions\""}, "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo": {"raw_sql": "SELECT \n        video_creation_started_to_create_or_upload_a_video_combo.event_id as eventID,\n        video_creation_started_to_create_or_upload_a_video_combo.user_id as userID,\n        video_creation_started_to_create_or_upload_a_video_combo.time as eventTime,\n        video_creation_started_to_create_or_upload_a_video_combo.continent as continent,\n        video_creation_started_to_create_or_upload_a_video_combo.country as country,\n        video_creation_started_to_create_or_upload_a_video_combo.region as region,\n        video_creation_started_to_create_or_upload_a_video_combo.city as city,\n        video_creation_started_to_create_or_upload_a_video_combo.platform as platform,\n        video_creation_started_to_create_or_upload_a_video_combo.device_type as deviceType,\n        video_creation_started_to_create_or_upload_a_video_combo.browser as browser,\n        video_creation_started_to_create_or_upload_a_video_combo.browser_type as browserType,\n        video_creation_started_to_create_or_upload_a_video_combo.vidyard_platform as vidyardPlatform,\n        video_creation_started_to_create_or_upload_a_video_combo.referrer as referrer,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page as landingPage,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page_query as landingPageQuery,\n        video_creation_started_to_create_or_upload_a_video_combo.query as query,\n        video_creation_started_to_create_or_upload_a_video_combo.domain as domain,\n        video_creation_started_to_create_or_upload_a_video_combo.path as path,\n        video_creation_started_to_create_or_upload_a_video_combo.title as title,\n        video_creation_started_to_create_or_upload_a_video_combo.channels as channels\nFROM\n        {{ source ('govideo_production' , 'video_creation_started_to_create_or_upload_a_video_combo')}} as video_creation_started_to_create_or_upload_a_video_combo\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "unique_id": "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo.sql", "original_file_path": "models/staging/heap/stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo.sql", "name": "stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo", "resource_type": "model", "alias": "stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo", "checksum": {"name": "sha256", "checksum": "11c32dcbcdf3aa9b9902717fcc0f23a821002f6a731c50f8e6179e8a22283829"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "video_creation_started_to_create_or_upload_a_video_combo"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        video_creation_started_to_create_or_upload_a_video_combo.event_id as eventID,\n        video_creation_started_to_create_or_upload_a_video_combo.user_id as userID,\n        video_creation_started_to_create_or_upload_a_video_combo.time as eventTime,\n        video_creation_started_to_create_or_upload_a_video_combo.continent as continent,\n        video_creation_started_to_create_or_upload_a_video_combo.country as country,\n        video_creation_started_to_create_or_upload_a_video_combo.region as region,\n        video_creation_started_to_create_or_upload_a_video_combo.city as city,\n        video_creation_started_to_create_or_upload_a_video_combo.platform as platform,\n        video_creation_started_to_create_or_upload_a_video_combo.device_type as deviceType,\n        video_creation_started_to_create_or_upload_a_video_combo.browser as browser,\n        video_creation_started_to_create_or_upload_a_video_combo.browser_type as browserType,\n        video_creation_started_to_create_or_upload_a_video_combo.vidyard_platform as vidyardPlatform,\n        video_creation_started_to_create_or_upload_a_video_combo.referrer as referrer,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page as landingPage,\n        video_creation_started_to_create_or_upload_a_video_combo.landing_page_query as landingPageQuery,\n        video_creation_started_to_create_or_upload_a_video_combo.query as query,\n        video_creation_started_to_create_or_upload_a_video_combo.domain as domain,\n        video_creation_started_to_create_or_upload_a_video_combo.path as path,\n        video_creation_started_to_create_or_upload_a_video_combo.title as title,\n        video_creation_started_to_create_or_upload_a_video_combo.channels as channels\nFROM\n        \"dev\".\"govideo_production\".\"video_creation_started_to_create_or_upload_a_video_combo\" as video_creation_started_to_create_or_upload_a_video_combo\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo\""}, "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview": {"raw_sql": "SELECT\n        vidyard_com_any_pageview.event_id as eventID,\n        vidyard_com_any_pageview.user_id as userID,\n        vidyard_com_any_pageview.time as eventTime,\n        vidyard_com_any_pageview.continent as continent,\n        vidyard_com_any_pageview.country as country,\n        vidyard_com_any_pageview.region as region,\n        vidyard_com_any_pageview.city as city,\n        vidyard_com_any_pageview.platform as platform,\n        vidyard_com_any_pageview.device_type as deviceType,\n        vidyard_com_any_pageview.browser as browser,\n        vidyard_com_any_pageview.browser_type as browserType,\n        vidyard_com_any_pageview.vidyard_platform as vidyardPlatform,\n        vidyard_com_any_pageview.referrer as referrer,\n        vidyard_com_any_pageview.landing_page as landingPage,\n        vidyard_com_any_pageview.landing_page_query as landingPageQuery,\n        vidyard_com_any_pageview.query as query,\n        vidyard_com_any_pageview.domain as domain,\n        vidyard_com_any_pageview.path as path,\n        vidyard_com_any_pageview.title as title,\n        vidyard_com_any_pageview.channels as channels,\n        vidyard_com_any_pageview.utm_source as utmSource,\n        vidyard_com_any_pageview.utm_medium as utmMedium,\n        vidyard_com_any_pageview.utm_campaign as utmCampaign,\n        vidyard_com_any_pageview.utm_term as utmTerm,\n        vidyard_com_any_pageview.utm_content as utmContent\nFROM\n        {{ source ('govideo_production' , 'vidyard_com_any_pageview')}} as vidyard_com_any_pageview\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_vidyard_com_any_pageview"], "unique_id": "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_vidyard_com_any_pageview.sql", "original_file_path": "models/staging/heap/stg_govideo_production_vidyard_com_any_pageview.sql", "name": "stg_govideo_production_vidyard_com_any_pageview", "resource_type": "model", "alias": "stg_govideo_production_vidyard_com_any_pageview", "checksum": {"name": "sha256", "checksum": "68ef35f8014df78718dc34f0a0d12b7483388dcb7bbd660440af6554293c47fc"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "vidyard_com_any_pageview"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.vidyard_com_any_pageview"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "dscription": "A randomly generated user ID used to identify a user in Heap."}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_vidyard_com_any_pageview.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_com_any_pageview.event_id as eventID,\n        vidyard_com_any_pageview.user_id as userID,\n        vidyard_com_any_pageview.time as eventTime,\n        vidyard_com_any_pageview.continent as continent,\n        vidyard_com_any_pageview.country as country,\n        vidyard_com_any_pageview.region as region,\n        vidyard_com_any_pageview.city as city,\n        vidyard_com_any_pageview.platform as platform,\n        vidyard_com_any_pageview.device_type as deviceType,\n        vidyard_com_any_pageview.browser as browser,\n        vidyard_com_any_pageview.browser_type as browserType,\n        vidyard_com_any_pageview.vidyard_platform as vidyardPlatform,\n        vidyard_com_any_pageview.referrer as referrer,\n        vidyard_com_any_pageview.landing_page as landingPage,\n        vidyard_com_any_pageview.landing_page_query as landingPageQuery,\n        vidyard_com_any_pageview.query as query,\n        vidyard_com_any_pageview.domain as domain,\n        vidyard_com_any_pageview.path as path,\n        vidyard_com_any_pageview.title as title,\n        vidyard_com_any_pageview.channels as channels,\n        vidyard_com_any_pageview.utm_source as utmSource,\n        vidyard_com_any_pageview.utm_medium as utmMedium,\n        vidyard_com_any_pageview.utm_campaign as utmCampaign,\n        vidyard_com_any_pageview.utm_term as utmTerm,\n        vidyard_com_any_pageview.utm_content as utmContent\nFROM\n        \"dev\".\"govideo_production\".\"vidyard_com_any_pageview\" as vidyard_com_any_pageview\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_vidyard_com_any_pageview\""}, "model.master_dbt_models.stg_govideo_production_sharing_share_combo": {"raw_sql": "SELECT\n    share_combo.event_id as eventID,\n    share_combo.user_id as userID,\n    share_combo.session_id as sessionID,\n    share_combo.time as eventTime,\n    share_combo.session_time as sessionTime,\n    share_combo.continent as continent,\n    share_combo.country as country,\n    share_combo.region as region,\n    share_combo.city as city,\n    share_combo.platform as platform,\n    share_combo.device as device,\n    share_combo.device_type as deviceType,\n    share_combo.browser as browser,\n    share_combo.browser_type as browserType,\n    share_combo.vidyard_platform as vidyardPlatform,\n    share_combo.referrer as referrer,\n    share_combo.landing_page as landingPage,\n    share_combo.landing_page_query as landingPageQuery,\n    share_combo.query as query,\n    share_combo.domain as domain,\n    share_combo.path as path,\n    share_combo.title as title,\n    share_combo.channels as channels\nFROM\n    {{ source ('govideo_production' , 'sharing_share_combo')}} as share_combo\nWHERE\n    TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_sharing_share_combo"], "unique_id": "model.master_dbt_models.stg_govideo_production_sharing_share_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_sharing_share_combo.sql", "original_file_path": "models/staging/heap/stg_govideo_production_sharing_share_combo.sql", "name": "stg_govideo_production_sharing_share_combo", "resource_type": "model", "alias": "stg_govideo_production_sharing_share_combo", "checksum": {"name": "sha256", "checksum": "b6cd998cc9a436f071fd92f90834bc9b4a9f5930e3fc8002b94e165d24ee4232"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "sharing_share_combo"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.sharing_share_combo"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionID": {"name": "sessionID", "description": "The ID of the associated session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventTime": {"name": "eventTime", "description": "The time when the event happened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionTime": {"name": "sessionTime", "description": "The timestamp of when the session began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "User's device name. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=phone-model-phone_model%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property: The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels: email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_sharing_share_combo.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    share_combo.event_id as eventID,\n    share_combo.user_id as userID,\n    share_combo.session_id as sessionID,\n    share_combo.time as eventTime,\n    share_combo.session_time as sessionTime,\n    share_combo.continent as continent,\n    share_combo.country as country,\n    share_combo.region as region,\n    share_combo.city as city,\n    share_combo.platform as platform,\n    share_combo.device as device,\n    share_combo.device_type as deviceType,\n    share_combo.browser as browser,\n    share_combo.browser_type as browserType,\n    share_combo.vidyard_platform as vidyardPlatform,\n    share_combo.referrer as referrer,\n    share_combo.landing_page as landingPage,\n    share_combo.landing_page_query as landingPageQuery,\n    share_combo.query as query,\n    share_combo.domain as domain,\n    share_combo.path as path,\n    share_combo.title as title,\n    share_combo.channels as channels\nFROM\n    \"dev\".\"govideo_production\".\"sharing_share_combo\" as share_combo\nWHERE\n    TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_sharing_share_combo\""}, "model.master_dbt_models.stg_govideo_production_global_session": {"raw_sql": "SELECT \n        global_session.event_id as eventID,\n        global_session.user_id as userID,\n        global_session.session_id as sessionID,\n        global_session.session_time as sessionTime,\n        global_session.continent as continent,\n        global_session.country as country,\n        global_session.region as region,\n        global_session.city as city,\n        global_session.platform as platform,\n        global_session.device_type as deviceType,\n        global_session.browser as browser,\n        global_session.browser_type as browserType,\n        global_session.vidyard_platform as vidyardPlatform,\n        global_session.referrer as referrer,\n        global_session.landing_page as landingPage,\n        global_session.landing_page_query as landingPageQuery,\n        global_session.query as query,\n        global_session.domain as domain,\n        global_session.path as path,\n        global_session.title as title,\n        global_session.channels as channels,\n        global_session.utm_source as utmSource,\n        global_session.utm_medium as utmMedium,\n        global_session.utm_campaign as utmCampaign,\n        global_session.utm_term as utmTerm,\n        global_session.utm_content as utmContent\nFROM\n        {{ source('govideo_production' , 'global_session')}} as global_session\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_global_session"], "unique_id": "model.master_dbt_models.stg_govideo_production_global_session", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_global_session.sql", "original_file_path": "models/staging/heap/stg_govideo_production_global_session.sql", "name": "stg_govideo_production_global_session", "resource_type": "model", "alias": "stg_govideo_production_global_session", "checksum": {"name": "sha256", "checksum": "23402b0b8eaa33406505bfa6dbde6dd183bbf86780ad98aba15bc34c2a843511"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "global_session"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.global_session"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "A randomly generated user ID used to identify a user in Heap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionID": {"name": "sessionID", "description": "The ID of the associated session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessionTime": {"name": "sessionTime", "description": "The timestamp of when the session began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "continent": {"name": "continent", "description": "Custom event property that groups together values of the Country property into continent. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Continent-296291", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The user\u2019s country, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=country-country%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The user\u2019s region, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=region-region%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The user\u2019s city, based on their geolocation data. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=city-city%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The user\u2019s operating system. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=platform-platform%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deviceType": {"name": "deviceType", "description": "The device type, either Mobile, Tablet or Desktop. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=device-type-device_type%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "The user\u2019s browser. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=browser-browser%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browserType": {"name": "browserType", "description": "what type of browser, chrome vs ie, etc. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Browser-Type-305959 ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardPlatform": {"name": "vidyardPlatform", "description": "Defined property to determine if the event was trigged on Vidyards' Product, Website, Knowledge Base, Chrome Store or Partner App. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Vidyard-Platform-300767   ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer": {"name": "referrer", "description": "Webpage that linked to your site and initiated the session. If the user navigated directly to your site, or referral headers were stripped, then this value will appear as direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=referrer-referrer%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPage": {"name": "landingPage", "description": "Event Property- The first page of the users' current session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-landing_page%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landingPageQuery": {"name": "landingPageQuery", "description": "Query parameters of the first page of the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=landing-page-query-landing_page_query%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query": {"name": "query", "description": "The query params of the page\u2019s current URL, e.g. ?utm_id=1234 for heapanalytics.com?utm_id=1234. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=query-query%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "The current website domain, including the subdomain, e.g. blog.heap.io https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=domain-domain%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The part of the current URL following your domain, e.g. /docs for heapanalytics.com/docs. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=path-path%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the current HTML page.  https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=title-title%3Apageview%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channels": {"name": "channels", "description": "Custom event property that groups all traffic into specific channels- email, paid, social, search, product and direct. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=defined_property&id=Channels-300931", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmSource": {"name": "utmSource", "description": "UTM parameter attributing the source for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-source-utm_source%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmMedium": {"name": "utmMedium", "description": "UTM parameter attributing the medium for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-medium-utm_medium%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmCampaign": {"name": "utmCampaign", "description": "UTM parameter attributing the campaign for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-campaign-utm_campaign%3Asession%3Abuiltin ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmTerm": {"name": "utmTerm", "description": "UTM parameter attributing the keyword for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-term-utm_term%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utmContent": {"name": "utmContent", "description": "UTM parameter attributing the campaign content for the user's session. https://heapanalytics.com/app/env/4242522408/definitions?view=properties&type=property&id=utm-content-utm_content%3Asession%3Abuiltin", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_global_session.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        global_session.event_id as eventID,\n        global_session.user_id as userID,\n        global_session.session_id as sessionID,\n        global_session.session_time as sessionTime,\n        global_session.continent as continent,\n        global_session.country as country,\n        global_session.region as region,\n        global_session.city as city,\n        global_session.platform as platform,\n        global_session.device_type as deviceType,\n        global_session.browser as browser,\n        global_session.browser_type as browserType,\n        global_session.vidyard_platform as vidyardPlatform,\n        global_session.referrer as referrer,\n        global_session.landing_page as landingPage,\n        global_session.landing_page_query as landingPageQuery,\n        global_session.query as query,\n        global_session.domain as domain,\n        global_session.path as path,\n        global_session.title as title,\n        global_session.channels as channels,\n        global_session.utm_source as utmSource,\n        global_session.utm_medium as utmMedium,\n        global_session.utm_campaign as utmCampaign,\n        global_session.utm_term as utmTerm,\n        global_session.utm_content as utmContent\nFROM\n        \"dev\".\"govideo_production\".\"global_session\" as global_session\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_global_session\""}, "model.master_dbt_models.stg_govideo_production_users": {"raw_sql": "SELECT\n        users.user_id as userID,\n        cast(users.\"identity\" as varchar(10)) as \"identity\",\n        users.appcuesuserid as appcuesUserID,\n        users.joindate as joinDate,\n        users.last_modified as lastModifiedDate,\n        users.video_completion as videoCompletion,\n        users.extensionversion as extensionVersion,\n        users.camera_enabled as cameraEnabled,\n        users.appversion as appVersion,\n        users.microphone_enabled as microphoneEnabled,\n        users.camera_allowed as cameraAllowed,\n        users.microphone_allowed as microphoneAllowed,\n        users.mirrored_camera as mirroredCamera,\n        users.general_use_case as generalUseCase,\n        users.specific_use_case as specificUseCase,\n        users.tailored_onboarding_use_case_response as onboardingUsecaseResponse\n\nFROM\n        {{ source('govideo_production' , 'users')}} as users\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "heap", "stg_govideo_production_users"], "unique_id": "model.master_dbt_models.stg_govideo_production_users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/heap/stg_govideo_production_users.sql", "original_file_path": "models/staging/heap/stg_govideo_production_users.sql", "name": "stg_govideo_production_users", "resource_type": "model", "alias": "stg_govideo_production_users", "checksum": {"name": "sha256", "checksum": "ad8429c01276a501f8124deadecccc72a4576be1ac4a625034de9c65a89ef6aa"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["govideo_production", "users"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.govideo_production.users"]}, "description": "", "columns": {"userID": {"name": "userID", "description": "a randomly generated user ID used to identify a user in Heap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identity": {"name": "identity", "description": "If you configure your Heap implementation to use the Identify API, this is where it will appear. Tranformed - cast(identity as varchar(10)) as identity ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "appcuesUserID": {"name": "appcuesUserID", "description": "custom api user property giving you the appcues user id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "joinDate": {"name": "joinDate", "description": "the date a user was first identified in heap?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastModifiedDate": {"name": "lastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "videoCompletion": {"name": "videoCompletion", "description": "custom api user property; have to check with a developer to see what the actual defintion via code is", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extensionVersion": {"name": "extensionVersion", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cameraEnabled": {"name": "cameraEnabled", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "appVersion": {"name": "appVersion", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "microphoneEnabled": {"name": "microphoneEnabled", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cameraAllowed": {"name": "cameraAllowed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "microphoneAllowed": {"name": "microphoneAllowed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mirroredCamera": {"name": "mirroredCamera", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generalUseCase": {"name": "generalUseCase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specificUseCase": {"name": "specificUseCase", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "onboardingUsecaseResponse": {"name": "onboardingUsecaseResponse", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/heap/heap.yml", "build_path": "target/run/master_dbt_models/models/staging/heap/stg_govideo_production_users.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        users.user_id as userID,\n        cast(users.\"identity\" as varchar(10)) as \"identity\",\n        users.appcuesuserid as appcuesUserID,\n        users.joindate as joinDate,\n        users.last_modified as lastModifiedDate,\n        users.video_completion as videoCompletion,\n        users.extensionversion as extensionVersion,\n        users.camera_enabled as cameraEnabled,\n        users.appversion as appVersion,\n        users.microphone_enabled as microphoneEnabled,\n        users.camera_allowed as cameraAllowed,\n        users.microphone_allowed as microphoneAllowed,\n        users.mirrored_camera as mirroredCamera,\n        users.general_use_case as generalUseCase,\n        users.specific_use_case as specificUseCase,\n        users.tailored_onboarding_use_case_response as onboardingUsecaseResponse\n\nFROM\n        \"dev\".\"govideo_production\".\"users\" as users\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_govideo_production_users\""}, "model.master_dbt_models.stg_zuora_subscription": {"raw_sql": "SELECT \n        subscription.id as subscriptionId,\n        subscription.account_id as accountId,\n        subscription.cancelled_date as cancelledDate,\n        subscription.contract_effective_date as contractStartDate,\n        subscription.created_by_id as createdById,\n        subscription.created_date as createdDate,\n        subscription.current_term as currentTerm,\n        subscription.current_term_period_type as currentTermPeriodType,\n        subscription.initial_term as initialTerm,\n        subscription.initial_term_period_type as initialTermPeriodType,\n        subscription.name as name,\n        subscription.original_created_date as originalCreatedDate,\n        subscription.original_id as originalSubscriptionId,\n        subscription.previous_subscription_id as previousSubscriptionId,\n        subscription.renewal_term as renewalTerm,\n        subscription.renewal_term_period_type as renewalTermPeriodType,\n        subscription.status as status,\n        subscription.subscription_end_date as subscriptionEndDate,\n        subscription.subscription_start_date as subscriptionStartDate,\n        subscription.term_end_date as termEndDate,\n        subscription.term_start_date as termStartDate,\n        subscription.term_type as termType,\n        subscription.updated_by_id as updatedById,\n        subscription.updated_date as updatedDate,\n        subscription.vidyard_cancel_date_c as vidyardCancelDate,\n        subscription._fivetran_deleted as fivetranDeleted,\n        subscription.sold_to_contact_id as soldToContactId,\n        subscription.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        subscription.default_payment_method_id as defaultPaymentMethodId,\n        subscription.bill_to_contact_id as billToContactId\n\nFROM\n    {{ source ('zuora', 'subscription')}} as subscription\n\nWHERE\n\n    TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_subscription"], "unique_id": "model.master_dbt_models.stg_zuora_subscription", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_subscription.sql", "original_file_path": "models/staging/zuora/stg_zuora_subscription.sql", "name": "stg_zuora_subscription", "resource_type": "model", "alias": "stg_zuora_subscription", "checksum": {"name": "sha256", "checksum": "ede142e0b9bbf463b31613f3d92152faad2dce79bad50c93ceca1bced1a0b6f9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "subscription"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.subscription"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_subscription.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        subscription.id as subscriptionId,\n        subscription.account_id as accountId,\n        subscription.cancelled_date as cancelledDate,\n        subscription.contract_effective_date as contractStartDate,\n        subscription.created_by_id as createdById,\n        subscription.created_date as createdDate,\n        subscription.current_term as currentTerm,\n        subscription.current_term_period_type as currentTermPeriodType,\n        subscription.initial_term as initialTerm,\n        subscription.initial_term_period_type as initialTermPeriodType,\n        subscription.name as name,\n        subscription.original_created_date as originalCreatedDate,\n        subscription.original_id as originalSubscriptionId,\n        subscription.previous_subscription_id as previousSubscriptionId,\n        subscription.renewal_term as renewalTerm,\n        subscription.renewal_term_period_type as renewalTermPeriodType,\n        subscription.status as status,\n        subscription.subscription_end_date as subscriptionEndDate,\n        subscription.subscription_start_date as subscriptionStartDate,\n        subscription.term_end_date as termEndDate,\n        subscription.term_start_date as termStartDate,\n        subscription.term_type as termType,\n        subscription.updated_by_id as updatedById,\n        subscription.updated_date as updatedDate,\n        subscription.vidyard_cancel_date_c as vidyardCancelDate,\n        subscription._fivetran_deleted as fivetranDeleted,\n        subscription.sold_to_contact_id as soldToContactId,\n        subscription.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        subscription.default_payment_method_id as defaultPaymentMethodId,\n        subscription.bill_to_contact_id as billToContactId\n\nFROM\n    \"dev\".\"zuora\".\"subscription\" as subscription\n\nWHERE\n\n    TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_subscription\""}, "model.master_dbt_models.stg_zuora_account": {"raw_sql": "SELECT \n        account.id as accountId,\n        account.account_number as accountNumber,\n        account.created_by_id as createdById,\n        account.created_date as createdDate,\n        account.crm_id as crmId,\n        account.customer_acquisition_date_c as customerAcquisitionDate,\n        account.cx_department_c as cxDepartment,\n        account.mrr as net_mrr,\n        account.name as accountName,\n        account.status as accountStatus,\n        account.sales_rep_name as salesRepName,\n        account.vidyard_id_c as vidyardId,\n        account.sold_to_contact_id as soldToContactId,\n        account.bill_to_contact_id as billToContactId,\n        account.updated_by_id as updatedById,\n        account.updated_date as updatedDate,\n        account._fivetran_deleted as fivetranDeleted,\n        account._fivetran_synced as fivetranSynced\nFROM\n        {{ source ('zuora', 'account')}} as account\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_account"], "unique_id": "model.master_dbt_models.stg_zuora_account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_account.sql", "original_file_path": "models/staging/zuora/stg_zuora_account.sql", "name": "stg_zuora_account", "resource_type": "model", "alias": "stg_zuora_account", "checksum": {"name": "sha256", "checksum": "d56876fa1af7329a689f971eae2bbce464fad5d7719f3f863fd961a2d6d32bae"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "account"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.account"]}, "description": "", "columns": {"accountId": {"name": "accountId", "description": "Unique Identifier Generated by Zuora for the Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountNumber": {"name": "accountNumber", "description": "Unique Identifier Generated by Zuora for the Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "Identifier of Zuora user who created account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Date of when account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crmId": {"name": "crmId", "description": "Corresponding Salesforce Account ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerAcquisitionDate": {"name": "customerAcquisitionDate", "description": "Date of Acquisiton", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cxDepartment": {"name": "cxDepartment", "description": "Enterprise Department Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_mrr": {"name": "net_mrr", "description": "MRR of the contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountName": {"name": "accountName", "description": "Name of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountStatus": {"name": "accountStatus", "description": "Current Status of Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesRepName": {"name": "salesRepName", "description": "Name of AE who sold the contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardId": {"name": "vidyardId", "description": "Corresponding Vidyard Account ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "soldToContactId": {"name": "soldToContactId", "description": "Identifier of Zuora buyer contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billToContactId": {"name": "billToContactId", "description": "Identifier of Zuora bill recipient contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedById": {"name": "updatedById", "description": "Identifier of Zuora user who updated account last", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "Date of when account was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranDeleted": {"name": "fivetranDeleted", "description": "Flag when fivetran deletes record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranSynced": {"name": "fivetranSynced", "description": "Date when fivetran synced record", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_account.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        account.id as accountId,\n        account.account_number as accountNumber,\n        account.created_by_id as createdById,\n        account.created_date as createdDate,\n        account.crm_id as crmId,\n        account.customer_acquisition_date_c as customerAcquisitionDate,\n        account.cx_department_c as cxDepartment,\n        account.mrr as net_mrr,\n        account.name as accountName,\n        account.status as accountStatus,\n        account.sales_rep_name as salesRepName,\n        account.vidyard_id_c as vidyardId,\n        account.sold_to_contact_id as soldToContactId,\n        account.bill_to_contact_id as billToContactId,\n        account.updated_by_id as updatedById,\n        account.updated_date as updatedDate,\n        account._fivetran_deleted as fivetranDeleted,\n        account._fivetran_synced as fivetranSynced\nFROM\n        \"dev\".\"zuora\".\"account\" as account\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_account\""}, "model.master_dbt_models.stg_zuora_product": {"raw_sql": "SELECT\n        product.id as productId,\n        product.allow_feature_changes as allowFeatureChanges,\n        product.category as category,\n        product.created_by_id as createdById,\n        product.created_date as createdDate,\n        product.description as description,\n        product.effective_end_date as effectiveEndDate,\n        product.effective_start_date as effectiveStartDate,\n        product.name as name,\n        product.optional_for_c as optionalFor,\n        product.plan_type_c as planType,\n        product.price_book_c as priceBook,\n        product.sku as sku,\n        product.sub_category_c as subCategory,\n        product.updated_by_id as updatedById,\n        product.updated_date as updatedDate\n\nFROM\n\n        {{ source ('zuora', 'product')}} as product\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_product"], "unique_id": "model.master_dbt_models.stg_zuora_product", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_product.sql", "original_file_path": "models/staging/zuora/stg_zuora_product.sql", "name": "stg_zuora_product", "resource_type": "model", "alias": "stg_zuora_product", "checksum": {"name": "sha256", "checksum": "7bd04b69e895b029cf2a8504287ded559ac8b45b5d0e4d57a83708ca46bb51b6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "product"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.product"]}, "description": "", "columns": {"productId": {"name": "productId", "description": "Unique product identifier assigned by Zuora", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowFeatureChanges": {"name": "allowFeatureChanges", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Vidyard related package to what this product relates to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "The ID of the user in Zuora that created the product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Object created date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "General description of what the product is", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveEndDate": {"name": "effectiveEndDate", "description": "Time frame (End) in which the product will be valid for offering", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveStartDate": {"name": "effectiveStartDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "descpription": "Time frame (Start) in which the product will be valid for offering"}, "name": {"name": "name", "description": "User friendly name of the product (Matches to what Marketing and sales offer)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optionalFor": {"name": "optionalFor", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "planType": {"name": "planType", "description": "Package level in which this product is offered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priceBook": {"name": "priceBook", "description": "The price book to what this product is configured to use", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "Internal Vidyard generated identifier for this product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subCategory": {"name": "subCategory", "description": "Type of offering inside Vidyard defined packages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedById": {"name": "updatedById", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_product.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        product.id as productId,\n        product.allow_feature_changes as allowFeatureChanges,\n        product.category as category,\n        product.created_by_id as createdById,\n        product.created_date as createdDate,\n        product.description as description,\n        product.effective_end_date as effectiveEndDate,\n        product.effective_start_date as effectiveStartDate,\n        product.name as name,\n        product.optional_for_c as optionalFor,\n        product.plan_type_c as planType,\n        product.price_book_c as priceBook,\n        product.sku as sku,\n        product.sub_category_c as subCategory,\n        product.updated_by_id as updatedById,\n        product.updated_date as updatedDate\n\nFROM\n\n        \"dev\".\"zuora\".\"product\" as product\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_product\""}, "model.master_dbt_models.stg_zuora_rate_plan": {"raw_sql": "SELECT\n        rate_plan.id as ratePlanID,\n        rate_plan.amendment_id as amendmentID,\n        rate_plan.amendment_subscription_rate_plan_id as amendmentSubscriptionRatePlanId,\n        rate_plan.amendment_type as amendmentType,\n        rate_plan.created_by_id as createdById,\n        rate_plan.created_date as createdDate,\n        rate_plan.name as name,\n        rate_plan.product_rate_plan_id as productRatePlanId,\n        rate_plan.subscription_id as subscriptionId,\n        rate_plan.updated_by_id as updatedbyId,\n        rate_plan.updated_date as updatedDate,\n        rate_plan.sold_to_contact_id as soldToContactId,\n        rate_plan.account_id as accountId,\n        rate_plan.product_id as productId,\n        rate_plan.bill_to_contact_id as billtoContactId,\n        rate_plan.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        rate_plan.default_payment_method_id as defaultPaymentMethodId,\n        rate_plan.triggersync_c as triggerSync,\n        rate_plan.parent_account_id as parentAccountId\n\nFROM\n        {{ source ('zuora', 'rate_plan')}} as rate_plan\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_rate_plan"], "unique_id": "model.master_dbt_models.stg_zuora_rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_rate_plan.sql", "original_file_path": "models/staging/zuora/stg_zuora_rate_plan.sql", "name": "stg_zuora_rate_plan", "resource_type": "model", "alias": "stg_zuora_rate_plan", "checksum": {"name": "sha256", "checksum": "33b34fc30870765bd97ca03e1d4abb70bc8ac4299b6d90b6b4465d22598a6b74"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "rate_plan"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.rate_plan"]}, "description": "", "columns": {"ratePlanID": {"name": "ratePlanID", "description": "Unique Identifier Generated by Zuora", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendmentID": {"name": "amendmentID", "description": "Amendment ID attached to Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendmentSubscriptionRatePlanId": {"name": "amendmentSubscriptionRatePlanId", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendmentType": {"name": "amendmentType", "description": "The type of amendment installed on subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "ID of user that created Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Creation Date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productRatePlanId": {"name": "productRatePlanId", "description": "ID of the rate plan linked to the Product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriptionId": {"name": "subscriptionId", "description": "Subscription ID linked to Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedbyId": {"name": "updatedbyId", "description": "Id of User that Updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "last updated date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "soldToContactId": {"name": "soldToContactId", "description": "ID of contact that rate plan was Sold to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "Account Id attached to Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productId": {"name": "productId", "description": "Product ID attached to rateplan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billtoContactId": {"name": "billtoContactId", "description": "ID of contact that rate plan was billed to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriptionVersionAmendmentId": {"name": "subscriptionVersionAmendmentId", "description": "Amendment version", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultPaymentMethodId": {"name": "defaultPaymentMethodId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "triggerSync": {"name": "triggerSync", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentAccountId": {"name": "parentAccountId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_rate_plan.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        rate_plan.id as ratePlanID,\n        rate_plan.amendment_id as amendmentID,\n        rate_plan.amendment_subscription_rate_plan_id as amendmentSubscriptionRatePlanId,\n        rate_plan.amendment_type as amendmentType,\n        rate_plan.created_by_id as createdById,\n        rate_plan.created_date as createdDate,\n        rate_plan.name as name,\n        rate_plan.product_rate_plan_id as productRatePlanId,\n        rate_plan.subscription_id as subscriptionId,\n        rate_plan.updated_by_id as updatedbyId,\n        rate_plan.updated_date as updatedDate,\n        rate_plan.sold_to_contact_id as soldToContactId,\n        rate_plan.account_id as accountId,\n        rate_plan.product_id as productId,\n        rate_plan.bill_to_contact_id as billtoContactId,\n        rate_plan.subscription_version_amendment_id as subscriptionVersionAmendmentId,\n        rate_plan.default_payment_method_id as defaultPaymentMethodId,\n        rate_plan.triggersync_c as triggerSync,\n        rate_plan.parent_account_id as parentAccountId\n\nFROM\n        \"dev\".\"zuora\".\"rate_plan\" as rate_plan\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_rate_plan\""}, "model.master_dbt_models.stg_zuora_product_rate_plan": {"raw_sql": "SELECT \n        product_rate_plan.id as productRatePlanId,\n        product_rate_plan.active_currencies as activeCurrencies,\n        product_rate_plan.created_by_id as CreatedById,\n        product_rate_plan.created_date as createdDate,\n        product_rate_plan.description as description,\n        product_rate_plan.effective_end_date as effectiveEndDate,\n        product_rate_plan.effective_start_date as effectiveStartDate,\n        product_rate_plan.name as name,\n        product_rate_plan.product_id as productId,\n        product_rate_plan.updated_by_id as UpdatedByID,\n        product_rate_plan.updated_date as updatedDate,\n        product_rate_plan.visible_c as visible,\n        product_rate_plan.billing_period_c as billingPeriod,\n        product_rate_plan.pvstatus_c as pvStatus\n\nFROM\n        {{ source ('zuora', 'product_rate_plan')}} as product_rate_plan\n\nWHERE\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_product_rate_plan"], "unique_id": "model.master_dbt_models.stg_zuora_product_rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_product_rate_plan.sql", "original_file_path": "models/staging/zuora/stg_zuora_product_rate_plan.sql", "name": "stg_zuora_product_rate_plan", "resource_type": "model", "alias": "stg_zuora_product_rate_plan", "checksum": {"name": "sha256", "checksum": "c625b3fbc4753c90e5aca8f942d5bc9aaa09b40be42eb2742ae1f71e6a7b4729"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "product_rate_plan"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.product_rate_plan"]}, "description": "", "columns": {"productRatePlanId": {"name": "productRatePlanId", "description": "Zuora Generated unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activeCurrencies": {"name": "activeCurrencies", "description": "Currency in which the plan is calculated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedById": {"name": "CreatedById", "description": "User ID of the admin who created the package", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Creation Date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Long text form that describes the different rate plan created for the product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveEndDate": {"name": "effectiveEndDate", "description": "Final date of validity for this price plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveStartDate": {"name": "effectiveStartDate", "description": "Start date of validity for plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "General name for Rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productId": {"name": "productId", "description": "Identifier that links the product to the rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UpdatedByID": {"name": "UpdatedByID", "description": "User ID of the last user that updated the package", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "Last Updated Date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visible": {"name": "visible", "description": "Flag that defines the availability for clients to see the offering", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingPeriod": {"name": "billingPeriod", "description": "Billing timeframe in which this plan is applied", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pvStatus": {"name": "pvStatus", "description": "Unique for Personalized Video that defines the type of customer for the rate plan", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_product_rate_plan.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        product_rate_plan.id as productRatePlanId,\n        product_rate_plan.active_currencies as activeCurrencies,\n        product_rate_plan.created_by_id as CreatedById,\n        product_rate_plan.created_date as createdDate,\n        product_rate_plan.description as description,\n        product_rate_plan.effective_end_date as effectiveEndDate,\n        product_rate_plan.effective_start_date as effectiveStartDate,\n        product_rate_plan.name as name,\n        product_rate_plan.product_id as productId,\n        product_rate_plan.updated_by_id as UpdatedByID,\n        product_rate_plan.updated_date as updatedDate,\n        product_rate_plan.visible_c as visible,\n        product_rate_plan.billing_period_c as billingPeriod,\n        product_rate_plan.pvstatus_c as pvStatus\n\nFROM\n        \"dev\".\"zuora\".\"product_rate_plan\" as product_rate_plan\n\nWHERE\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_product_rate_plan\""}, "model.master_dbt_models.stg_zuora_contact": {"raw_sql": "SELECT\n        contact.id as contactId,\n        contact.account_id as accountId,\n        contact.created_by_id as createdById,\n        contact.created_date as createdDate,\n        contact.city as city,\n        contact.country as country,\n        contact.first_name as firstName,\n        contact.last_name as lastName,\n        contact.personal_email as personalEmail,\n        contact.postal_code as postalCode,\n        contact.state as state,\n        contact.work_email as workEmail,\n        contact.updated_by_id as updatedById,\n        contact.updated_date as updatedDate,\n        contact._fivetran_deleted as fivetranDeleted,\n        contact._fivetran_synced as fivetranSynced\nFROM\n        {{ source ('zuora' , 'contact')}} as contact\n\nWHERE\n\n        TRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "zuora", "stg_zuora_contact"], "unique_id": "model.master_dbt_models.stg_zuora_contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/zuora/stg_zuora_contact.sql", "original_file_path": "models/staging/zuora/stg_zuora_contact.sql", "name": "stg_zuora_contact", "resource_type": "model", "alias": "stg_zuora_contact", "checksum": {"name": "sha256", "checksum": "01ad9b956ecd519827401ad35a6e0bddf390e8e11c831ca5cb82de4fddd8de0e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["zuora", "contact"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.zuora.contact"]}, "description": "", "columns": {"contactId": {"name": "contactId", "description": "Unique Identifier Generated by Zuora for the Contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "Identifier for the associated Zuora account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdById": {"name": "createdById", "description": "Identifier of Zuora user who created contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "Date of when contact was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "City of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Country of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "First name of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "Last name of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personalEmail": {"name": "personalEmail", "description": "Non-work email of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postalCode": {"name": "postalCode", "description": "Postal code of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "State of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workEmail": {"name": "workEmail", "description": "Work email of contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedById": {"name": "updatedById", "description": "Identifier of Zuora user who updated contact last", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "Date of when contact was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranDeleted": {"name": "fivetranDeleted", "description": "Flag when fivetran deletes record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fivetranSynced": {"name": "fivetranSynced", "description": "Date when fivetran synced record", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/zuora/zuora.yml", "build_path": "target/run/master_dbt_models/models/staging/zuora/stg_zuora_contact.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        contact.id as contactId,\n        contact.account_id as accountId,\n        contact.created_by_id as createdById,\n        contact.created_date as createdDate,\n        contact.city as city,\n        contact.country as country,\n        contact.first_name as firstName,\n        contact.last_name as lastName,\n        contact.personal_email as personalEmail,\n        contact.postal_code as postalCode,\n        contact.state as state,\n        contact.work_email as workEmail,\n        contact.updated_by_id as updatedById,\n        contact.updated_date as updatedDate,\n        contact._fivetran_deleted as fivetranDeleted,\n        contact._fivetran_synced as fivetranSynced\nFROM\n        \"dev\".\"zuora\".\"contact\" as contact\n\nWHERE\n\n        TRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_zuora_contact\""}, "model.master_dbt_models.stg_vidyard_features": {"raw_sql": "SELECT \n\tvidyard_features.id as featureId,\n\tvidyard_features.friendly_name as friendlyName,\n\tvidyard_features.include_by_default as includeByDefault,\n\tvidyard_features.category as category,\n\tvidyard_features.unique_name as uniqueName\r\n FROM \n\t{{ source('public', 'vidyard_features') }} as vidyard_features", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_features"], "unique_id": "model.master_dbt_models.stg_vidyard_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_features.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_features.sql", "name": "stg_vidyard_features", "resource_type": "model", "alias": "stg_vidyard_features", "checksum": {"name": "sha256", "checksum": "c460c01436f2a44db28ce35054261d2d1d6a4e21a8832061a4058b81acb04644"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_features"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_features"]}, "description": "", "columns": {"featureId": {"name": "featureId", "description": "the unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "friendlyName": {"name": "friendlyName", "description": "description of the features", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includeByDefault": {"name": "includeByDefault", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "what category the feature falls under", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uniqueName": {"name": "uniqueName", "description": "name of the feature", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_features.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_features.id as featureId,\n\tvidyard_features.friendly_name as friendlyName,\n\tvidyard_features.include_by_default as includeByDefault,\n\tvidyard_features.category as category,\n\tvidyard_features.unique_name as uniqueName\n FROM \n\t\"dev\".\"public\".\"vidyard_features\" as vidyard_features", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_features\""}, "model.master_dbt_models.stg_vidyard_team_memberships": {"raw_sql": "SELECT \n\tvidyard_team_memberships.id as teamMembershipID,\n\tvidyard_team_memberships.team_id as teamID,\n\tvidyard_team_memberships.user_id as userID,\n\tvidyard_team_memberships.invite_accepted as inviteAccepted,\n\tvidyard_team_memberships.created_at as createdAt,\n\tvidyard_team_memberships.updated_at as updatedAt\r\n FROM \n\t{{ source('public', 'vidyard_team_memberships') }} as vidyard_team_memberships", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_team_memberships"], "unique_id": "model.master_dbt_models.stg_vidyard_team_memberships", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_team_memberships.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_team_memberships.sql", "name": "stg_vidyard_team_memberships", "resource_type": "model", "alias": "stg_vidyard_team_memberships", "checksum": {"name": "sha256", "checksum": "edc81c1614afca4024fdce387c984a5e78403ae6a6e42509ce9cbcad5dd76845"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_team_memberships"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_team_memberships"]}, "description": "", "columns": {"teamMembershipID": {"name": "teamMembershipID", "description": "unique ID for the team member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "teamID": {"name": "teamID", "description": "unique ID of the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "vidyard user ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inviteAccepted": {"name": "inviteAccepted", "description": "if a user accepted invite, only then would he be tied to an existing org/account, rather than being a standalone org", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdAt": {"name": "createdAt", "description": "when an invite is sent to a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedAt": {"name": "updatedAt", "description": "timestamp when the user accepts invite; for users who have not accepted invite, this is the same timestamp as created_at", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_team_memberships.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_team_memberships.id as teamMembershipID,\n\tvidyard_team_memberships.team_id as teamID,\n\tvidyard_team_memberships.user_id as userID,\n\tvidyard_team_memberships.invite_accepted as inviteAccepted,\n\tvidyard_team_memberships.created_at as createdAt,\n\tvidyard_team_memberships.updated_at as updatedAt\n FROM \n\t\"dev\".\"public\".\"vidyard_team_memberships\" as vidyard_team_memberships", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_team_memberships\""}, "model.master_dbt_models.stg_vidyard_events": {"raw_sql": "SELECT\n        vidyard_events.id as eventID,\n        vidyard_events.event_type as eventType,\n        vidyard_events.organization_id as organizationID,\n        vidyard_events.created_at as createdDate,\n        vidyard_events.updated_at as updatedDate\nFROM\n    {{ source ('public','vidyard_events')}} as vidyard_events", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_events"], "unique_id": "model.master_dbt_models.stg_vidyard_events", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_events.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_events.sql", "name": "stg_vidyard_events", "resource_type": "model", "alias": "stg_vidyard_events", "checksum": {"name": "sha256", "checksum": "c82ef0f585f30fece300b04c63a1abd1a925261f94209a1e4975ecca69aef418"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_events"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_events"]}, "description": "", "columns": {"eventID": {"name": "eventID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventType": {"name": "eventType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_events.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_events.id as eventID,\n        vidyard_events.event_type as eventType,\n        vidyard_events.organization_id as organizationID,\n        vidyard_events.created_at as createdDate,\n        vidyard_events.updated_at as updatedDate\nFROM\n    \"dev\".\"public\".\"vidyard_events\" as vidyard_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_events\""}, "model.master_dbt_models.stg_vidyard_allotment_limits": {"raw_sql": "SELECT \n\tvidyard_allotment_limits.account_id as accountID,\n\tvidyard_allotment_limits.id as allotmentLimitID,\n\tvidyard_allotment_limits.limit as limit,\n\tvidyard_allotment_limits.grace_limit as graceLimit,\n\tvidyard_allotment_limits.allotment_type_id as allotmentTypeID,\n\tvidyard_allotment_limits.enforced as enforced\r\n FROM \n\t{{ source('public', 'vidyard_allotment_limits') }} as vidyard_allotment_limits", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_allotment_limits"], "unique_id": "model.master_dbt_models.stg_vidyard_allotment_limits", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_allotment_limits.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_allotment_limits.sql", "name": "stg_vidyard_allotment_limits", "resource_type": "model", "alias": "stg_vidyard_allotment_limits", "checksum": {"name": "sha256", "checksum": "f63abb80caef01f1bd3014e476cbd95eb761ef0aaceb7f402e21b079b1ba42e6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_allotment_limits"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_allotment_limits"]}, "description": "", "columns": {"accountID": {"name": "accountID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allotmentLimitID": {"name": "allotmentLimitID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "limit": {"name": "limit", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "graceLimit": {"name": "graceLimit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allotmentTypeID": {"name": "allotmentTypeID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enforced": {"name": "enforced", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_allotment_limits.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_allotment_limits.account_id as accountID,\n\tvidyard_allotment_limits.id as allotmentLimitID,\n\tvidyard_allotment_limits.limit as limit,\n\tvidyard_allotment_limits.grace_limit as graceLimit,\n\tvidyard_allotment_limits.allotment_type_id as allotmentTypeID,\n\tvidyard_allotment_limits.enforced as enforced\n FROM \n\t\"dev\".\"public\".\"vidyard_allotment_limits\" as vidyard_allotment_limits", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_allotment_limits\""}, "model.master_dbt_models.stg_vidyard_nps_surveys": {"raw_sql": "SELECT \n\tvidyard_nps_surveys.id as npsSurveyID,\n\tvidyard_nps_surveys.user_score as userScore,\n\tvidyard_nps_surveys.user_comment as userComment,\n\tvidyard_nps_surveys.user_id as userId,\n\tvidyard_nps_surveys.organization_id as organizationId,\n\tvidyard_nps_surveys.created_at as createdAt,\n\tvidyard_nps_surveys.updated_at as updatedAt,\n\tvidyard_nps_surveys.filled as filled,\n\tvidyard_nps_surveys.allow_contact as allowContact,\n\tvidyard_nps_surveys.survey_type as surveyType,\n\tvidyard_nps_surveys.cancelled as cancelled\n FROM \n\t{{ source('public', 'vidyard_nps_surveys') }} as vidyard_nps_surveys", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_nps_surveys"], "unique_id": "model.master_dbt_models.stg_vidyard_nps_surveys", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_nps_surveys.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_nps_surveys.sql", "name": "stg_vidyard_nps_surveys", "resource_type": "model", "alias": "stg_vidyard_nps_surveys", "checksum": {"name": "sha256", "checksum": "f4bd1a90960534cbf63931070b0d866cf8b704555a1d62fe17ae25d168d73bd4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_nps_surveys"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_nps_surveys"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_nps_surveys.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_nps_surveys.id as npsSurveyID,\n\tvidyard_nps_surveys.user_score as userScore,\n\tvidyard_nps_surveys.user_comment as userComment,\n\tvidyard_nps_surveys.user_id as userId,\n\tvidyard_nps_surveys.organization_id as organizationId,\n\tvidyard_nps_surveys.created_at as createdAt,\n\tvidyard_nps_surveys.updated_at as updatedAt,\n\tvidyard_nps_surveys.filled as filled,\n\tvidyard_nps_surveys.allow_contact as allowContact,\n\tvidyard_nps_surveys.survey_type as surveyType,\n\tvidyard_nps_surveys.cancelled as cancelled\n FROM \n\t\"dev\".\"public\".\"vidyard_nps_surveys\" as vidyard_nps_surveys", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_nps_surveys\""}, "model.master_dbt_models.stg_vidyard_allotment_types": {"raw_sql": "SELECT \n\tvidyard_allotment_types.id as allotmentTypeID,\n\tvidyard_allotment_types.name as name,\n\tvidyard_allotment_types.description as description,\n\tvidyard_allotment_types.default_limit as defaultLimit,\n\tvidyard_allotment_types.default_grace_limit as defaultGraceLimit,\n\tvidyard_allotment_types.default_enforced as defaultEnforced\r\n FROM \n\t{{ source('public', 'vidyard_allotment_types') }} as vidyard_allotment_types", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_allotment_types"], "unique_id": "model.master_dbt_models.stg_vidyard_allotment_types", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_allotment_types.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_allotment_types.sql", "name": "stg_vidyard_allotment_types", "resource_type": "model", "alias": "stg_vidyard_allotment_types", "checksum": {"name": "sha256", "checksum": "2ab056f6d616dbfaa22c4db877288599572cded8c9a0cf183879542b3985baea"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_allotment_types"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_allotment_types"]}, "description": "", "columns": {"allotmentTypeID": {"name": "allotmentTypeID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultLimit": {"name": "defaultLimit", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultGraceLimit": {"name": "defaultGraceLimit", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultEnforced": {"name": "defaultEnforced", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_allotment_types.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_allotment_types.id as allotmentTypeID,\n\tvidyard_allotment_types.name as name,\n\tvidyard_allotment_types.description as description,\n\tvidyard_allotment_types.default_limit as defaultLimit,\n\tvidyard_allotment_types.default_grace_limit as defaultGraceLimit,\n\tvidyard_allotment_types.default_enforced as defaultEnforced\n FROM \n\t\"dev\".\"public\".\"vidyard_allotment_types\" as vidyard_allotment_types", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_allotment_types\""}, "model.master_dbt_models.stg_vidyard_event_joins": {"raw_sql": "SELECT\n        vidyard_event_joins.id as eventJoinID,\n        vidyard_event_joins.event_id as eventID,\n        vidyard_event_joins.owner_type as ownerType,\n        vidyard_event_joins.owner_id as ownerID,\n        vidyard_event_joins.second as second,\n        vidyard_event_joins.duration as duration,\n        vidyard_event_joins.created_at as createdDate,\n        vidyard_event_joins.updated_at as updatedDate\nFROM\n    {{ source ('public','vidyard_event_joins')}} as vidyard_event_joins", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_event_joins"], "unique_id": "model.master_dbt_models.stg_vidyard_event_joins", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_event_joins.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_event_joins.sql", "name": "stg_vidyard_event_joins", "resource_type": "model", "alias": "stg_vidyard_event_joins", "checksum": {"name": "sha256", "checksum": "e209a7ad0915badebf931bb4b2f35c0027b5d8004f110ed2b78f947ae8a466e5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_event_joins"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_event_joins"]}, "description": "", "columns": {"eventJoinID": {"name": "eventJoinID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "eventID": {"name": "eventID", "description": "use to join to vidyard_events table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerType": {"name": "ownerType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerID": {"name": "ownerID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "second": {"name": "second", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration": {"name": "duration", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_event_joins.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n        vidyard_event_joins.id as eventJoinID,\n        vidyard_event_joins.event_id as eventID,\n        vidyard_event_joins.owner_type as ownerType,\n        vidyard_event_joins.owner_id as ownerID,\n        vidyard_event_joins.second as second,\n        vidyard_event_joins.duration as duration,\n        vidyard_event_joins.created_at as createdDate,\n        vidyard_event_joins.updated_at as updatedDate\nFROM\n    \"dev\".\"public\".\"vidyard_event_joins\" as vidyard_event_joins", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_event_joins\""}, "model.master_dbt_models.stg_vidyard_organizations": {"raw_sql": "SELECT \n\tvidyard_organizations.id as organizationID,\n\tvidyard_organizations.name as name,\n\tvidyard_organizations.org_type as orgtype,\n\tvidyard_organizations.parent_id as parentID,\n\tvidyard_organizations.locked as locked,\n\tvidyard_organizations.created_by_client_id as createdByClientID,\n\tvidyard_organizations.created_at as createdDate,\n\tvidyard_organizations.updated_at as updatedDate,\n\tvidyard_organizations.owner_id as ownerId,\n\tvidyard_organizations.locked_at as lockedAt,\n\tvidyard_organizations.account_id as accountId,\n\tvidyard_organizations.paying as paying\n FROM \n\t{{ source('public', 'vidyard_organizations') }} as vidyard_organizations", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_organizations"], "unique_id": "model.master_dbt_models.stg_vidyard_organizations", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_organizations.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_organizations.sql", "name": "stg_vidyard_organizations", "resource_type": "model", "alias": "stg_vidyard_organizations", "checksum": {"name": "sha256", "checksum": "d17a731b04ef24017f0b293ad8042af034564a4a4cb2f13ac6c3f30e19c7ec98"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_organizations"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_organizations"]}, "description": "", "columns": {"organizationID": {"name": "organizationID", "description": "unique identifier of this table, the ID of the organization/folder", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "the name of the organization/folder", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orgtype": {"name": "orgtype", "description": "='self_serve' for free/pro and =' ' for enterprise", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentID": {"name": "parentID", "description": "=' ' blank if this is the parent org, otherwise shows which parent org this org belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locked": {"name": "locked", "description": "T|F if the organization's account is locked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdByClientID": {"name": "createdByClientID", "description": "location where orgs were created- enterprise/hubspot/vidyard/etc. = 'Enterprise' means the user was created as a user in the enterprise account and not as a self-serve signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "organization created datetime", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerId": {"name": "ownerId", "description": "user who owns the organiztation, owner_id = user_id for free/pro orgs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lockedAt": {"name": "lockedAt", "description": "date the organization's account was locked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "account id of the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_organizations.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_organizations.id as organizationID,\n\tvidyard_organizations.name as name,\n\tvidyard_organizations.org_type as orgtype,\n\tvidyard_organizations.parent_id as parentID,\n\tvidyard_organizations.locked as locked,\n\tvidyard_organizations.created_by_client_id as createdByClientID,\n\tvidyard_organizations.created_at as createdDate,\n\tvidyard_organizations.updated_at as updatedDate,\n\tvidyard_organizations.owner_id as ownerId,\n\tvidyard_organizations.locked_at as lockedAt,\n\tvidyard_organizations.account_id as accountId,\n\tvidyard_organizations.paying as paying\n FROM \n\t\"dev\".\"public\".\"vidyard_organizations\" as vidyard_organizations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_organizations\""}, "model.master_dbt_models.stg_vidyard_players": {"raw_sql": "SELECT \n\tvidyard_players.id as playerID,\n\tvidyard_players.organization_id as organizationID,\n\tvidyard_players.owner_id as ownerID,\n\tvidyard_players.created_by_client_id as createdbyclientID,\n\tvidyard_players.created_at as createdDate,\n\tvidyard_players.updated_at as updatedDate,\n\tvidyard_players.player_type as playerType,\n\tvidyard_players.uuid as uuID\r\n FROM \n\t{{ source('public', 'vidyard_players') }} as vidyard_players", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_players"], "unique_id": "model.master_dbt_models.stg_vidyard_players", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_players.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_players.sql", "name": "stg_vidyard_players", "resource_type": "model", "alias": "stg_vidyard_players", "checksum": {"name": "sha256", "checksum": "b96ef55293fda4fc86ba0b2f6c0bd656f4564bb6af0ed83733fb8ef105636f8c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_players"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_players"]}, "description": "", "columns": {"playerID": {"name": "playerID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": "the organization the player lives in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerID": {"name": "ownerID", "description": "the owner of the player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdbyclientID": {"name": "createdbyclientID", "description": "location where orgs were created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "date the player was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "playerType": {"name": "playerType", "description": "description of the player", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uuID": {"name": "uuID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_players.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_players.id as playerID,\n\tvidyard_players.organization_id as organizationID,\n\tvidyard_players.owner_id as ownerID,\n\tvidyard_players.created_by_client_id as createdbyclientID,\n\tvidyard_players.created_at as createdDate,\n\tvidyard_players.updated_at as updatedDate,\n\tvidyard_players.player_type as playerType,\n\tvidyard_players.uuid as uuID\n FROM \n\t\"dev\".\"public\".\"vidyard_players\" as vidyard_players", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_players\""}, "model.master_dbt_models.stg_vidyard_org_metrics": {"raw_sql": "SELECT \n\tvidyard_org_metrics.id as organizationID,\n\tvidyard_org_metrics.total_seconds as totalSeconds,\n\tvidyard_org_metrics.views_count as viewsCount,\n\tvidyard_org_metrics.videos_with_views as videosWithViews,\n\tvidyard_org_metrics.first_view as firstView,\n\tvidyard_org_metrics.first_view_video_id as firstViewVideoID\r\n FROM \n\t{{ source('public', 'vidyard_org_metrics') }} as vidyard_org_metrics", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_org_metrics"], "unique_id": "model.master_dbt_models.stg_vidyard_org_metrics", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_org_metrics.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_org_metrics.sql", "name": "stg_vidyard_org_metrics", "resource_type": "model", "alias": "stg_vidyard_org_metrics", "checksum": {"name": "sha256", "checksum": "6dd7390757e53bf0de387bb2e8742169376f25fe7f64c33cdaeac41236582ea9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_org_metrics"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_org_metrics"]}, "description": "", "columns": {"organizationID": {"name": "organizationID", "description": "vidyard org id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "totalSeconds": {"name": "totalSeconds", "description": "total seconds of videos being viewed = view time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "viewsCount": {"name": "viewsCount", "description": "number fo views this org received", "meta": {}, "data_type": null, "quote": null, "tags": []}, "videosWithViews": {"name": "videosWithViews", "description": "number of videos with views in the organzation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstView": {"name": "firstView", "description": "the timestamp of the first view of a video in this org, in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstViewVideoID": {"name": "firstViewVideoID", "description": "the video id of the first-viewed video", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_org_metrics.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_org_metrics.id as organizationID,\n\tvidyard_org_metrics.total_seconds as totalSeconds,\n\tvidyard_org_metrics.views_count as viewsCount,\n\tvidyard_org_metrics.videos_with_views as videosWithViews,\n\tvidyard_org_metrics.first_view as firstView,\n\tvidyard_org_metrics.first_view_video_id as firstViewVideoID\n FROM \n\t\"dev\".\"public\".\"vidyard_org_metrics\" as vidyard_org_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_org_metrics\""}, "model.master_dbt_models.stg_vidyard_user_groups": {"raw_sql": "SELECT \n\tvidyard_user_groups.id as groupID,\n\tvidyard_user_groups.user_id as userID,\n\tvidyard_user_groups.organization_id as organizationID,\n\tvidyard_user_groups.invite_accepted as inviteAccepted,\n\tvidyard_user_groups.created_at as createdDate,\n\tvidyard_user_groups.updated_at as updatedDate\n FROM \n\t{{ source('public', 'vidyard_user_groups') }} as vidyard_user_groups", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_user_groups"], "unique_id": "model.master_dbt_models.stg_vidyard_user_groups", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_user_groups.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_user_groups.sql", "name": "stg_vidyard_user_groups", "resource_type": "model", "alias": "stg_vidyard_user_groups", "checksum": {"name": "sha256", "checksum": "a36a7c5f735d57e0f0de4ca2b96c993e972910a794da5894768ca045111c7431"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_user_groups"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_user_groups"]}, "description": "", "columns": {"groupID": {"name": "groupID", "description": "Uniquie identifier for this table to find the user groups id. This table is used to link vidyard_organizations to vidyard_users when organizations contain more than 1 users (non-self-serve orgs)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "vidyard user's id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": "the organization id the user belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inviteAccepted": {"name": "inviteAccepted", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "datetime the user group was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "datetime the user group was updated", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_user_groups.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_user_groups.id as groupID,\n\tvidyard_user_groups.user_id as userID,\n\tvidyard_user_groups.organization_id as organizationID,\n\tvidyard_user_groups.invite_accepted as inviteAccepted,\n\tvidyard_user_groups.created_at as createdDate,\n\tvidyard_user_groups.updated_at as updatedDate\n FROM \n\t\"dev\".\"public\".\"vidyard_user_groups\" as vidyard_user_groups", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_user_groups\""}, "model.master_dbt_models.stg_vidyard_active_features": {"raw_sql": "SELECT \n\tvidyard_active_features.id as activeFeatureID,\n\tvidyard_active_features.organization_id as organizationID,\n\tvidyard_active_features.feature_id as featureID,\n\tvidyard_active_features.created_at as createdDate,\n\tvidyard_active_features.updated_at as updatedDate\r\n FROM \n\t{{ source('public', 'vidyard_active_features') }} as vidyard_active_features", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_active_features"], "unique_id": "model.master_dbt_models.stg_vidyard_active_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_active_features.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_active_features.sql", "name": "stg_vidyard_active_features", "resource_type": "model", "alias": "stg_vidyard_active_features", "checksum": {"name": "sha256", "checksum": "c366cee101089849ece1d594db0dd854919d8a6f0c677a66ea5aa92bf58fbfd6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_active_features"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_active_features"]}, "description": "", "columns": {"activeFeatureID": {"name": "activeFeatureID", "description": "unique identifier for the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "featureID": {"name": "featureID", "description": "which feature the organization has access to, used to join with vidyard_features to get the feature information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "datetime the feature was activated for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_active_features.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_active_features.id as activeFeatureID,\n\tvidyard_active_features.organization_id as organizationID,\n\tvidyard_active_features.feature_id as featureID,\n\tvidyard_active_features.created_at as createdDate,\n\tvidyard_active_features.updated_at as updatedDate\n FROM \n\t\"dev\".\"public\".\"vidyard_active_features\" as vidyard_active_features", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_active_features\""}, "model.master_dbt_models.stg_vidyard_teams": {"raw_sql": "SELECT \n\tvidyard_teams.id as teamID,\n\tvidyard_teams.account_id as accountID,\n\tvidyard_teams.is_admin as isAdmin\r\n FROM \n\t{{ source('public', 'vidyard_teams') }} as vidyard_teams", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_teams"], "unique_id": "model.master_dbt_models.stg_vidyard_teams", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_teams.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_teams.sql", "name": "stg_vidyard_teams", "resource_type": "model", "alias": "stg_vidyard_teams", "checksum": {"name": "sha256", "checksum": "b575b1e7c1fdfa998a1a2a1a60795ba6a19e9ee5c87f415bf5d8dea648ae2464"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_teams"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_teams"]}, "description": "", "columns": {"teamID": {"name": "teamID", "description": "vidyard team ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountID": {"name": "accountID", "description": "Vidyard account ID, links to the account each team belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isAdmin": {"name": "isAdmin", "description": "Flags if the team is the admin team within the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_teams.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_teams.id as teamID,\n\tvidyard_teams.account_id as accountID,\n\tvidyard_teams.is_admin as isAdmin\n FROM \n\t\"dev\".\"public\".\"vidyard_teams\" as vidyard_teams", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_teams\""}, "model.master_dbt_models.stg_vidyard_videos": {"raw_sql": "SELECT \n\tvidyard_videos.id as videoID,\n\tvidyard_videos.user_id as userID,\n\tvidyard_videos.organization_id as organizationID,\n\tvidyard_videos.hosting_provider as hostingProvider,\n\tvidyard_videos.is_secure as isSecure,\n\tvidyard_videos.status as status,\n\tvidyard_videos.created_by_client_id as createdByClientID,\n\tvidyard_videos.created_at as createdAt,\n\tvidyard_videos.origin as origin,\n\tvidyard_videos.milliseconds as milliseconds,\n\tvidyard_videos.updated_at as updatedAt,\n\tvidyard_videos.video_type as videoType\r\n FROM \n\t{{ source('public', 'vidyard_videos') }} as vidyard_videos", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_videos"], "unique_id": "model.master_dbt_models.stg_vidyard_videos", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_videos.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_videos.sql", "name": "stg_vidyard_videos", "resource_type": "model", "alias": "stg_vidyard_videos", "checksum": {"name": "sha256", "checksum": "7c2711abcdb7ba155d15ca2666880b6d3fbe9281e3fd3c3ed4ec2e7c48e41712"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_videos"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_videos"]}, "description": "", "columns": {"videoID": {"name": "videoID", "description": "unique video id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "userID": {"name": "userID", "description": "vidyard user id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": "vidyard org id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hostingProvider": {"name": "hostingProvider", "description": "vidyard/youtube/audio/etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isSecure": {"name": "isSecure", "description": "indicates where the video currently has one of our security controls enabled on it (e.g. password, SSO, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "status of the video - failed, processing, ready, etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdByClientID": {"name": "createdByClientID", "description": "where the video was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdAt": {"name": "createdAt", "description": "video creation timestamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "how the video was created - upload, chrome extension, etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "milliseconds": {"name": "milliseconds", "description": "length of the video in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedAt": {"name": "updatedAt", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "videoType": {"name": "videoType", "description": "360 or normal", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_videos.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_videos.id as videoID,\n\tvidyard_videos.user_id as userID,\n\tvidyard_videos.organization_id as organizationID,\n\tvidyard_videos.hosting_provider as hostingProvider,\n\tvidyard_videos.is_secure as isSecure,\n\tvidyard_videos.status as status,\n\tvidyard_videos.created_by_client_id as createdByClientID,\n\tvidyard_videos.created_at as createdAt,\n\tvidyard_videos.origin as origin,\n\tvidyard_videos.milliseconds as milliseconds,\n\tvidyard_videos.updated_at as updatedAt,\n\tvidyard_videos.video_type as videoType\n FROM \n\t\"dev\".\"public\".\"vidyard_videos\" as vidyard_videos", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_videos\""}, "model.master_dbt_models.stg_vidyard_hubs": {"raw_sql": "SELECT \n        vidyard_hubs.id as hubID,\n        vidyard_hubs.organization_id as organizationID,\n        vidyard_hubs.account_id as accountID,\n        vidyard_hubs.cname as name,\n        vidyard_hubs.subdomain as subDomain,\n        vidyard_hubs.hub_type as hubType,\n        vidyard_hubs.manage_hub_users as manageHubUsers,\n        vidyard_hubs.route_type as routeType,\n        vidyard_hubs.enabled_seo as enabledSEO,\n        vidyard_hubs.created_at as createdDate,\n        vidyard_hubs.updated_at as updatedDate,\n        vidyard_hubs.index_layout_id as indexLayoutID,\n        vidyard_hubs.show_layout_id as showLayoutID,\n        vidyard_hubs.category_layout_id as categoryLayoutID,\n        vidyard_hubs.search_layout_id as searchLayoutID\nFROM\n    {{ source ('public', 'vidyard_hubs')}} as vidyard_hubs", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_hubs"], "unique_id": "model.master_dbt_models.stg_vidyard_hubs", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_hubs.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_hubs.sql", "name": "stg_vidyard_hubs", "resource_type": "model", "alias": "stg_vidyard_hubs", "checksum": {"name": "sha256", "checksum": "67fa4d286d352ef703537ee09ec7d2d39b7bfa3f227b2ded11160ec558716def"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_hubs"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_hubs"]}, "description": "", "columns": {"hubID": {"name": "hubID", "description": "unique identifier for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organizationID": {"name": "organizationID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountID": {"name": "accountID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subDomain": {"name": "subDomain", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hubType": {"name": "hubType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "manageHubUsers": {"name": "manageHubUsers", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "routeType": {"name": "routeType", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indexLayoutID": {"name": "indexLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "showLayoutID": {"name": "showLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categoryLayoutID": {"name": "categoryLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "searchLayoutID": {"name": "searchLayoutID", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_hubs.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        vidyard_hubs.id as hubID,\n        vidyard_hubs.organization_id as organizationID,\n        vidyard_hubs.account_id as accountID,\n        vidyard_hubs.cname as name,\n        vidyard_hubs.subdomain as subDomain,\n        vidyard_hubs.hub_type as hubType,\n        vidyard_hubs.manage_hub_users as manageHubUsers,\n        vidyard_hubs.route_type as routeType,\n        vidyard_hubs.enabled_seo as enabledSEO,\n        vidyard_hubs.created_at as createdDate,\n        vidyard_hubs.updated_at as updatedDate,\n        vidyard_hubs.index_layout_id as indexLayoutID,\n        vidyard_hubs.show_layout_id as showLayoutID,\n        vidyard_hubs.category_layout_id as categoryLayoutID,\n        vidyard_hubs.search_layout_id as searchLayoutID\nFROM\n    \"dev\".\"public\".\"vidyard_hubs\" as vidyard_hubs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_hubs\""}, "model.master_dbt_models.stg_vidyard_users": {"raw_sql": "SELECT \n\tvidyard_users.id as userId,\n\tvidyard_users.email as email,\n\tvidyard_users.created_at as createdDate,\n\tvidyard_users.updated_at as updatedDate,\n\tvidyard_users.first_name as firstName,\n\tvidyard_users.last_name as lastName\n FROM \n\t{{ source('public', 'vidyard_users') }} as vidyard_users", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "vidyard", "stg_vidyard_users"], "unique_id": "model.master_dbt_models.stg_vidyard_users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/vidyard/stg_vidyard_users.sql", "original_file_path": "models/staging/vidyard/stg_vidyard_users.sql", "name": "stg_vidyard_users", "resource_type": "model", "alias": "stg_vidyard_users", "checksum": {"name": "sha256", "checksum": "f00909a7fa439867ff141ef61c9cce0028a606ba649c325d088b66a339f46617"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["public", "vidyard_users"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.public.vidyard_users"]}, "description": "", "columns": {"userId": {"name": "userId", "description": "Unique identifier for the Vidyard user's ID, can be used to join with- * vidyard_organizations.owner_id & * vidyard_user_groups.user_id etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "user's email the signed up with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "users creation date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updatedDate": {"name": "updatedDate", "description": " ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "first name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "last name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/vidyard/vidyard.yml", "build_path": "target/run/master_dbt_models/models/staging/vidyard/stg_vidyard_users.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\tvidyard_users.id as userId,\n\tvidyard_users.email as email,\n\tvidyard_users.created_at as createdDate,\n\tvidyard_users.updated_at as updatedDate,\n\tvidyard_users.first_name as firstName,\n\tvidyard_users.last_name as lastName\n FROM \n\t\"dev\".\"public\".\"vidyard_users\" as vidyard_users", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_vidyard_users\""}, "model.master_dbt_models.stg_salesforce_account": {"raw_sql": "SELECT \n    sfdc_account.id as accountId,\n    sfdc_account.name as accountName,\n    sfdc_account.isdeleted as isDeleted,\n    sfdc_account.type as accountType,\n    sfdc_account.parentid as parentAccountId,\n    sfdc_account.phone as accountPhone,\n    sfdc_account.industry as accountIndustry,\n    sfdc_account.employee_segment__c as employeeSegment,\n    sfdc_account.numberofemployees as numberOfEmployees,\n    sfdc_account.annualrevenue as annualRevenue,\n    sfdc_account.ownerid as ownerId,\n    sfdc_account.customer_tier__c as customerTier,\n    sfdc_account.email_domain__c as emailDomain,\n    sfdc_account.website as website,\n    sfdc_account.account_id__c as vidyardAccountId,\n    sfdc_account.original_contract_date__c as originalContractDate,\n    sfdc_account.csm_owner__c as csmOwnerId,\n    sfdc_account.ispersonaccount as isPersonAccount,\n    sfdc_account.self_serve_customer__c as isSelfServe,\n    sfdc_account.billingstreet as billingStreet,\n    sfdc_account.billingcity as billingCity,\n    sfdc_account.billingstate as billingState,\n    sfdc_account.billingpostalcode as billingPostalCode,\n    sfdc_account.billingcountry as billingCountry,\n    sfdc_account.ispartner as isPartner,\n    sfdc_account.date_of_churn__c as dateOfChurn,\n    sfdc_account.churn_reason__c as churnReason,\n    sfdc_account.churn_reason_details__c as churnReasonDetails,\n    sfdc_account.partner_type2__c as partnerType,\n    sfdc_account.zvidyard_Account_Products__c as vidyardAccountProducts,\n    sfdc_account.created_datetime__c as createdDate,\n    sfdc_account.new_territory__c as accountTerritory,\n    sfdc_account.region__c as accountRegion,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.vidyard_user_id__pc as vidyardUserId,\n    sfdc_account.crm__c as crmPlatform,\n    sfdc_account.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_account.abm_tier__c as abmTier,\n    sfdc_account.online_video_platform__c as onlineVideoPlatform,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.primary_use_case__c as primaryUseCase,\n    sfdc_account.qa_status__c as qaStatus \n FROM \n    {{ source('salesforce_production', 'account') }} as sfdc_account\nWHERE\n    sfdc_account.type LIKE 'Customer'\n    AND sfdc_account.ispersonaccount = false", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_account"], "unique_id": "model.master_dbt_models.stg_salesforce_account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_account.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_account.sql", "name": "stg_salesforce_account", "resource_type": "model", "alias": "stg_salesforce_account", "checksum": {"name": "sha256", "checksum": "d981fd946899dafbeeb009ee949b1d37e70e23be31a1ac62d77550764d0fd906"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "account"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.account"]}, "description": "", "columns": {"accountId": {"name": "accountId", "description": "Unique Identifier Generated by Salesforce for the Account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountName": {"name": "accountName", "description": "salesforce account name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "If the account is deleted or not, currently all accounts have this value as FALSE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountType": {"name": "accountType", "description": "prospect/customer/former customer/etc. ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentAccountId": {"name": "parentAccountId", "description": "salesforce account id of the parent company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountPhone": {"name": "accountPhone", "description": "firmographics information, enriched by zoominfo/clearbit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountIndustry": {"name": "accountIndustry", "description": "industry of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employeeSegment": {"name": "employeeSegment", "description": "based on size of company - Commercial (>=200), Emerging (0 to 200), Unknown (number of employees is blank)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numberOfEmployees": {"name": "numberOfEmployees", "description": "Number of employees in the account company, used to populate employee_segment_c", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annualRevenue": {"name": "annualRevenue", "description": "annual revenue of the company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerId": {"name": "ownerId", "description": "Salesforce id of the owner of the account, id of an Vidyard account executive, not a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerTier": {"name": "customerTier", "description": "Customer tiers assigned by CX", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emailDomain": {"name": "emailDomain", "description": "domain of the company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "website address of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardAccountId": {"name": "vidyardAccountId", "description": "vidyard account id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "originalContractDate": {"name": "originalContractDate", "description": "start date of the original contract of the account with Vidyard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csmOwnerId": {"name": "csmOwnerId", "description": "salesforce user id of the CSM owner for the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isPersonAccount": {"name": "isPersonAccount", "description": "T/F; True if self-serve, False if enterprise customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isSelfServe": {"name": "isSelfServe", "description": "whether a customer is self-serve or not; based on the most recent oppotunity the account closed with VY, not accurate for customers with active contracts AND active self serve; used to be used for HubSpot customers; legacy field probably", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingStreet": {"name": "billingStreet", "description": "billing street of the company ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingCity": {"name": "billingCity", "description": "billing city of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingState": {"name": "billingState", "description": "billing state of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingPostalCode": {"name": "billingPostalCode", "description": "billing postal code of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billingCountry": {"name": "billingCountry", "description": "billing country of the account company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isPartner": {"name": "isPartner", "description": "If the account is a Vidyard partner or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dateOfChurn": {"name": "dateOfChurn", "description": "date when customers churn", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churnReason": {"name": "churnReason", "description": "reason of churn for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churnReasonDetails": {"name": "churnReasonDetails", "description": "details reasons of churns for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partnerType": {"name": "partnerType", "description": "Type of partners", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardAccountProducts": {"name": "vidyardAccountProducts", "description": "description of the typ of product the account is under; used to calculate many boolean fields for type of the account(for enterprise, for business, for teams, etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "date and time of when the account was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountTerritory": {"name": "accountTerritory", "description": "Refers to sales reps' territories: sub-categories under commercial and emerging. What category does the account fall under size wise for the reps to work on. e.g. LE = Large Enterprise; KA = Key Accounts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountRegion": {"name": "accountRegion", "description": "the region the account is from; picklist in Salesforce - NA East, NA West, NA Unknown, EMEA, APAC, LATAM", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonContract": {"name": "nonContract", "description": "really really old customers who paid us by credit card, but not self serve; legacy", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardUserId": {"name": "vidyardUserId", "description": "vidyard user id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crmPlatform": {"name": "crmPlatform", "description": "CRM tool the account uses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "marketingAutomationPlatform": {"name": "marketingAutomationPlatform", "description": "the marketing automation platform used by the acconut", "meta": {}, "data_type": null, "quote": null, "tags": []}, "abmTier": {"name": "abmTier", "description": "customer tier in ABM program", "meta": {}, "data_type": null, "quote": null, "tags": []}, "onlineVideoPlatform": {"name": "onlineVideoPlatform", "description": "online video platform used by the account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primaryUseCase": {"name": "primaryUseCase", "description": "the account's primary use case for vidyard (e.g. corporate comms, hosting, sales etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qaStatus": {"name": "qaStatus", "description": "status of an account that has been deemed qualified to act on by marketing (via a picklist)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_account.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n    sfdc_account.id as accountId,\n    sfdc_account.name as accountName,\n    sfdc_account.isdeleted as isDeleted,\n    sfdc_account.type as accountType,\n    sfdc_account.parentid as parentAccountId,\n    sfdc_account.phone as accountPhone,\n    sfdc_account.industry as accountIndustry,\n    sfdc_account.employee_segment__c as employeeSegment,\n    sfdc_account.numberofemployees as numberOfEmployees,\n    sfdc_account.annualrevenue as annualRevenue,\n    sfdc_account.ownerid as ownerId,\n    sfdc_account.customer_tier__c as customerTier,\n    sfdc_account.email_domain__c as emailDomain,\n    sfdc_account.website as website,\n    sfdc_account.account_id__c as vidyardAccountId,\n    sfdc_account.original_contract_date__c as originalContractDate,\n    sfdc_account.csm_owner__c as csmOwnerId,\n    sfdc_account.ispersonaccount as isPersonAccount,\n    sfdc_account.self_serve_customer__c as isSelfServe,\n    sfdc_account.billingstreet as billingStreet,\n    sfdc_account.billingcity as billingCity,\n    sfdc_account.billingstate as billingState,\n    sfdc_account.billingpostalcode as billingPostalCode,\n    sfdc_account.billingcountry as billingCountry,\n    sfdc_account.ispartner as isPartner,\n    sfdc_account.date_of_churn__c as dateOfChurn,\n    sfdc_account.churn_reason__c as churnReason,\n    sfdc_account.churn_reason_details__c as churnReasonDetails,\n    sfdc_account.partner_type2__c as partnerType,\n    sfdc_account.zvidyard_Account_Products__c as vidyardAccountProducts,\n    sfdc_account.created_datetime__c as createdDate,\n    sfdc_account.new_territory__c as accountTerritory,\n    sfdc_account.region__c as accountRegion,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.vidyard_user_id__pc as vidyardUserId,\n    sfdc_account.crm__c as crmPlatform,\n    sfdc_account.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_account.abm_tier__c as abmTier,\n    sfdc_account.online_video_platform__c as onlineVideoPlatform,\n    sfdc_account.non_contract__c as nonContract,\n    sfdc_account.primary_use_case__c as primaryUseCase,\n    sfdc_account.qa_status__c as qaStatus \n FROM \n    \"dev\".\"salesforce_production\".\"account\" as sfdc_account\nWHERE\n    sfdc_account.type LIKE 'Customer'\n    AND sfdc_account.ispersonaccount = false", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_account\""}, "model.master_dbt_models.stg_salesforce_opportunity": {"raw_sql": "SELECT \n        op.id as opportunityId,\n        op.accountid as accountId,\n        op.ownerid as ownerId,\n        op.name as opportunityName,\n        op.stagename as stageName,\n        op.closedate as closeDate,\n        op.type as opportunityType,\n        op.isclosed as isClosed,\n        op.iswon as isWon,\n        op.campaignid as campaignId,\n        op.createddate as createdDate,\n        op.Entered_Pipeline_Date__c as enteredPipelineDate,\n        op.dead_reason__c as deadReason,\n        op.x7_closed_won_date__c as closedWonDate,\n        op.x8_dead_date__c as deadDate,\n        op.renewal_due_date__c as renewalDueDate,\n        op.multi_year_1st_due_date__c as multiYear1stDueDate,\n        op.multi_year_2nd_due_date__c as multiYear2ndDueDate,\n        op.contact_champion__c as contactChampionId,\n        op.business_unit__c as businessUnit,\n        op.vy_attribution__c as opportunityAttribution,\n        op.new_arr__c as newARR,\n        op.one_time__c as oneTimeCharge,\n        op.last_year_arr__c as lastYearARR,\n        op.renewal_amount__c as renewalAmount,\n        op.csm_owner__c as csmOwnerId,\n        op.contract_start_date__c as contractStartDate,\n        op.contract_end_date__c as contractEndDate,\n        op.previous_contract_start_date__c as previousContractStartDate,\n        op.previous_contract_end_date__c as previousContractEndDate,\n        op.churn_reason__c as churnReason,\n        op.competition__c as competitor,\n        op.forecastcategoryname as forecastCategory,\n        op.red_opportunity__c as redOpportunity,\n        op.assurance__c as Assurance,\n        op.vy_use_case__c as useCase\nFROM \n    {{ source('salesforce_production', 'opportunity') }} as op", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_opportunity"], "unique_id": "model.master_dbt_models.stg_salesforce_opportunity", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_opportunity.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_opportunity.sql", "name": "stg_salesforce_opportunity", "resource_type": "model", "alias": "stg_salesforce_opportunity", "checksum": {"name": "sha256", "checksum": "4083154348e847e0427a9df1c65481c73c5b6524daf4e7d3f0f67a80c70fd95c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "opportunity"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.opportunity"]}, "description": "", "columns": {"opportunityId": {"name": "opportunityId", "description": "salesforce opportunity id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "salesforce account id tied to this opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ownerId": {"name": "ownerId", "description": "Salesforce user id who owns the opportunity , id of a Vidyard person, not a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityName": {"name": "opportunityName", "description": "Name of the Opportunity in Salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stageName": {"name": "stageName", "description": "where the opportunity is in the sales funnel (stage 1 to 7, dead)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closeDate": {"name": "closeDate", "description": "close date of the opportunity (either won or dead out), used for pipeline purposes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityType": {"name": "opportunityType", "description": "opportunity type - new business, add-on, renewal, etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isClosed": {"name": "isClosed", "description": "T/F, opportunity is close - won or dead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isWon": {"name": "isWon", "description": "T/F, opportunity is won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignId": {"name": "campaignId", "description": "salesforce campaign that brought the opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "opportunity created date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enteredPipelineDate": {"name": "enteredPipelineDate", "description": "opportunity entered pipeline date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deadReason": {"name": "deadReason", "description": "the reason for an opportunity to be deaded out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closedWonDate": {"name": "closedWonDate", "description": "date when the opportunity is marked closed-won by the salesperson; used for commission purposes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deadDate": {"name": "deadDate", "description": "date when the opportunity is deaded out", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewalDueDate": {"name": "renewalDueDate", "description": "date when the next renewal is due", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiYear1stDueDate": {"name": "multiYear1stDueDate", "description": "for a multi-year contract, the first year's renewal duedate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiYear2ndDueDate": {"name": "multiYear2ndDueDate", "description": "for a multi-year contract, the second year's renewal due date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contactChampionId": {"name": "contactChampionId", "description": "the main contact for the opportunity in the customer company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "businessUnit": {"name": "businessUnit", "description": "whether the opportunity is coming from commercial or emerging business", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityAttribution": {"name": "opportunityAttribution", "description": "where the opportunity is attributed to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newARR": {"name": "newARR", "description": "arr amount for the opportunity, enterprise contract only! not including self serve", "meta": {}, "data_type": null, "quote": null, "tags": []}, "oneTimeCharge": {"name": "oneTimeCharge", "description": "one time charge fee on the opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastYearARR": {"name": "lastYearARR", "description": "arr charged from last year, used as renewal target for this year", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewalAmount": {"name": "renewalAmount", "description": "renewal amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csmOwnerId": {"name": "csmOwnerId", "description": "Salesforce ID of the CSM owners of the opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contractStartDate": {"name": "contractStartDate", "description": "Start date of current contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contractEndDate": {"name": "contractEndDate", "description": "end date of current contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previousContractStartDate": {"name": "previousContractStartDate", "description": "start date of last contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previousContractEndDate": {"name": "previousContractEndDate", "description": "end date of last contract", "meta": {}, "data_type": null, "quote": null, "tags": []}, "churnReason": {"name": "churnReason", "description": "reason opportunity/account is churning", "meta": {}, "data_type": null, "quote": null, "tags": []}, "competitor": {"name": "competitor", "description": "potential competitor being evaluated/used by prospect", "meta": {}, "data_type": null, "quote": null, "tags": []}, "forecastCategory": {"name": "forecastCategory", "description": "a list of values to pick from that CX uses for reporting - omitted, pipeline, best case, commit, closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redOpportunity": {"name": "redOpportunity", "description": "T/F for labeling if the opportunity is Red Opportunity or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Assurance": {"name": "Assurance", "description": "positive - confirmed to renew; negative - haven't heard from them, but will auto-renew; sales order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "useCase": {"name": "useCase", "description": "The main purpose the client has stated this products will be used for", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_opportunity.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n        op.id as opportunityId,\n        op.accountid as accountId,\n        op.ownerid as ownerId,\n        op.name as opportunityName,\n        op.stagename as stageName,\n        op.closedate as closeDate,\n        op.type as opportunityType,\n        op.isclosed as isClosed,\n        op.iswon as isWon,\n        op.campaignid as campaignId,\n        op.createddate as createdDate,\n        op.Entered_Pipeline_Date__c as enteredPipelineDate,\n        op.dead_reason__c as deadReason,\n        op.x7_closed_won_date__c as closedWonDate,\n        op.x8_dead_date__c as deadDate,\n        op.renewal_due_date__c as renewalDueDate,\n        op.multi_year_1st_due_date__c as multiYear1stDueDate,\n        op.multi_year_2nd_due_date__c as multiYear2ndDueDate,\n        op.contact_champion__c as contactChampionId,\n        op.business_unit__c as businessUnit,\n        op.vy_attribution__c as opportunityAttribution,\n        op.new_arr__c as newARR,\n        op.one_time__c as oneTimeCharge,\n        op.last_year_arr__c as lastYearARR,\n        op.renewal_amount__c as renewalAmount,\n        op.csm_owner__c as csmOwnerId,\n        op.contract_start_date__c as contractStartDate,\n        op.contract_end_date__c as contractEndDate,\n        op.previous_contract_start_date__c as previousContractStartDate,\n        op.previous_contract_end_date__c as previousContractEndDate,\n        op.churn_reason__c as churnReason,\n        op.competition__c as competitor,\n        op.forecastcategoryname as forecastCategory,\n        op.red_opportunity__c as redOpportunity,\n        op.assurance__c as Assurance,\n        op.vy_use_case__c as useCase\nFROM \n    \"dev\".\"salesforce_production\".\"opportunity\" as op", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_opportunity\""}, "model.master_dbt_models.stg_salesforce_campaign": {"raw_sql": "SELECT \n    sfdc_campaign .id as campaignId,\n    sfdc_campaign .isdeleted as isDeleted,\n    sfdc_campaign .name as name,\n    sfdc_campaign .parentid as parentId,\n    sfdc_campaign .type as type,\n    sfdc_campaign .status as status,\n    sfdc_campaign .startdate as startDate,\n    sfdc_campaign .enddate as endDate,\n    sfdc_campaign .expectedrevenue as expectedRevenue,\n    sfdc_campaign .budgetedcost as budgetedCost,\n    sfdc_campaign .actualcost as actualCost,\n    sfdc_campaign .isactive as isActive,\n    sfdc_campaign .description as description,\n    sfdc_campaign .createddate as createdDate,\n    sfdc_campaign .media_type__c as mediaType,\n    sfdc_campaign .inbound_vs_outbound__c as inboundVsOutbound,\n    sfdc_campaign .cta__c as cta,\n    sfdc_campaign .cta_subtype__c as ctaSubtype,\n    sfdc_campaign .channel_picklist__c as channelPicklist,\n    sfdc_campaign .channel_detail__c as channelDetail,\n    sfdc_campaign .channel_media_type__c as channelMediaType,\n    sfdc_campaign .campaign_sourced_by__c as campaignSourcedBy,\n    sfdc_campaign .response_type__c as responseType \n FROM \n    {{ source('salesforce_production', 'campaign') }}  as sfdc_campaign", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_campaign"], "unique_id": "model.master_dbt_models.stg_salesforce_campaign", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_campaign.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_campaign.sql", "name": "stg_salesforce_campaign", "resource_type": "model", "alias": "stg_salesforce_campaign", "checksum": {"name": "sha256", "checksum": "946820f90c702e1927ca927de25b06bd27b7d70027281e83a0fc6187d3e445e6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "campaign"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.campaign"]}, "description": "", "columns": {"campaignId": {"name": "campaignId", "description": "salesforce id for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "True if the campaign is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parentId": {"name": "parentId", "description": "parent campaign id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "the type of campaign - in progress, planned, completed, aborted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "status of the campaign - ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "startDate": {"name": "startDate", "description": "start date of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "endDate": {"name": "endDate", "description": "end date of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expectedRevenue": {"name": "expectedRevenue", "description": "expected revenue of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budgetedCost": {"name": "budgetedCost", "description": "budgeted cost for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "actualCost": {"name": "actualCost", "description": "actual cost of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isActive": {"name": "isActive", "description": "T/F if the campaign is still active", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "description of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "created date of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mediaType": {"name": "mediaType", "description": "type of media - owned, paid, other earned, blank", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inboundVsOutbound": {"name": "inboundVsOutbound", "description": "inbound vs outbound of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cta": {"name": "cta", "description": "cta type of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctaSubtype": {"name": "ctaSubtype", "description": "cta sub-type of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channelPicklist": {"name": "channelPicklist", "description": "channel of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channelDetail": {"name": "channelDetail", "description": "details of the channel of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channelMediaType": {"name": "channelMediaType", "description": "media type of the channel of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignSourcedBy": {"name": "campaignSourcedBy", "description": "campaign sourced by - product, partner, sales, marketing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "responseType": {"name": "responseType", "description": "MQL versus non-MQL", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_campaign.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n    sfdc_campaign .id as campaignId,\n    sfdc_campaign .isdeleted as isDeleted,\n    sfdc_campaign .name as name,\n    sfdc_campaign .parentid as parentId,\n    sfdc_campaign .type as type,\n    sfdc_campaign .status as status,\n    sfdc_campaign .startdate as startDate,\n    sfdc_campaign .enddate as endDate,\n    sfdc_campaign .expectedrevenue as expectedRevenue,\n    sfdc_campaign .budgetedcost as budgetedCost,\n    sfdc_campaign .actualcost as actualCost,\n    sfdc_campaign .isactive as isActive,\n    sfdc_campaign .description as description,\n    sfdc_campaign .createddate as createdDate,\n    sfdc_campaign .media_type__c as mediaType,\n    sfdc_campaign .inbound_vs_outbound__c as inboundVsOutbound,\n    sfdc_campaign .cta__c as cta,\n    sfdc_campaign .cta_subtype__c as ctaSubtype,\n    sfdc_campaign .channel_picklist__c as channelPicklist,\n    sfdc_campaign .channel_detail__c as channelDetail,\n    sfdc_campaign .channel_media_type__c as channelMediaType,\n    sfdc_campaign .campaign_sourced_by__c as campaignSourcedBy,\n    sfdc_campaign .response_type__c as responseType \n FROM \n    \"dev\".\"salesforce_production\".\"campaign\"  as sfdc_campaign", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_campaign\""}, "model.master_dbt_models.stg_salesforce_campaignmember": {"raw_sql": "SELECT \n\t\tsfdc_campaignmember.id as campaignMemberId,\n\t\tsfdc_campaignmember.createddate as createdDate,\n\t\tsfdc_campaignmember.isdeleted as isDeleted,\n\t\tsfdc_campaignmember.campaignid as campaignId,\n\t\tsfdc_campaignmember.type as type,\n\t\tsfdc_campaignmember.leadid as leadId,\n\t\tsfdc_campaignmember.contactid as contactId,\n\t\tsfdc_campaignmember.status as status,\n\t\tsfdc_campaignmember.name as name,\n\t\tsfdc_campaignmember.email as email,\n\t\tsfdc_campaignmember.campaign_sourced_by__c as campaignSourcedBy,\n\t\tsfdc_campaignmember.mql__c as mql,\n\t\tsfdc_campaignmember.mql_date_and_time__c as mqlDate,\n\t\tsfdc_campaignmember.sal__c as sal,\n\t\tsfdc_campaignmember.sal_date_and_time__c as salDate,\n\t\tsfdc_campaignmember.sql__c as sql,\n\t\tsfdc_campaignmember.sql_date_and_time__c as sqlDate,\n\t\tsfdc_campaignmember.sqo__c as sqo,\n\t\tsfdc_campaignmember.sqo_date__c as sqoDate,\n\t\tsfdc_campaignmember.sqo_lost__c as sqoLost,\n\t\tsfdc_campaignmember.sqo_lost_date__c as sqoLostDate,\n\t\tsfdc_campaignmember.won__c as won,\n\t\tsfdc_campaignmember.opportunity_closed_won_date__c as opportunityClosedWonDate,\n\t\tsfdc_campaignmember.opportunity__c as opportunityId,\n\t\tsfdc_campaignmember.status_reason__c as statusReason,\n\t\tsfdc_campaignmember.current_status_reason__c as currentStatusReason\n\n FROM \n \t\t{{ source ('salesforce_production' , 'campaignmember') }} as sfdc_campaignmember\n WHERE\n \t\tTRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_campaignmember"], "unique_id": "model.master_dbt_models.stg_salesforce_campaignmember", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_campaignmember.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_campaignmember.sql", "name": "stg_salesforce_campaignmember", "resource_type": "model", "alias": "stg_salesforce_campaignmember", "checksum": {"name": "sha256", "checksum": "53bc1c52a178258e9783838e94136f1b7934c611cc061258f474d83c5e5deb9b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "campaignmember"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.campaignmember"]}, "description": "", "columns": {"campaignMemberId": {"name": "campaignMemberId", "description": "id of a campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "date when the lead/contact engaged with the campaign also known as the inquiry date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "T|F for if the campaign member is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignId": {"name": "campaignId", "description": "id of the campaign that the lead/contact engaged with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "determines of the user is a lead or contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadId": {"name": "leadId", "description": "id for the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contactId": {"name": "contactId", "description": "id for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "status of the campaign member. E.g. Responded to a campaign or Fills out Form", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name of campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "email of campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaignSourcedBy": {"name": "campaignSourcedBy", "description": "which team the campaign member is sourced by based on the team that owns the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mql": {"name": "mql", "description": "T/F for converted into mql", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mqlDate": {"name": "mqlDate", "description": "date of MQL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sal": {"name": "sal", "description": "T/F for converted into sal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salDate": {"name": "salDate", "description": "date of SAL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sql": {"name": "sql", "description": "T/F for converted into sql", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqlDate": {"name": "sqlDate", "description": "date of SQL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqo": {"name": "sqo", "description": "T/F for converted into sqo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqoDate": {"name": "sqoDate", "description": "date of SQO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqoLost": {"name": "sqoLost", "description": "T/F for sqo lost", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sqoLostDate": {"name": "sqoLostDate", "description": "date of lost SQO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "won": {"name": "won", "description": "T/F for opportunity won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityClosedWonDate": {"name": "opportunityClosedWonDate", "description": "date of opportunity won", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opportunityId": {"name": "opportunityId", "description": "opportunity ID if opportunity was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusReason": {"name": "statusReason", "description": "status of the campaign member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currentStatusReason": {"name": "currentStatusReason", "description": "reason for a campaign members status", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_campaignmember.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\t\tsfdc_campaignmember.id as campaignMemberId,\n\t\tsfdc_campaignmember.createddate as createdDate,\n\t\tsfdc_campaignmember.isdeleted as isDeleted,\n\t\tsfdc_campaignmember.campaignid as campaignId,\n\t\tsfdc_campaignmember.type as type,\n\t\tsfdc_campaignmember.leadid as leadId,\n\t\tsfdc_campaignmember.contactid as contactId,\n\t\tsfdc_campaignmember.status as status,\n\t\tsfdc_campaignmember.name as name,\n\t\tsfdc_campaignmember.email as email,\n\t\tsfdc_campaignmember.campaign_sourced_by__c as campaignSourcedBy,\n\t\tsfdc_campaignmember.mql__c as mql,\n\t\tsfdc_campaignmember.mql_date_and_time__c as mqlDate,\n\t\tsfdc_campaignmember.sal__c as sal,\n\t\tsfdc_campaignmember.sal_date_and_time__c as salDate,\n\t\tsfdc_campaignmember.sql__c as sql,\n\t\tsfdc_campaignmember.sql_date_and_time__c as sqlDate,\n\t\tsfdc_campaignmember.sqo__c as sqo,\n\t\tsfdc_campaignmember.sqo_date__c as sqoDate,\n\t\tsfdc_campaignmember.sqo_lost__c as sqoLost,\n\t\tsfdc_campaignmember.sqo_lost_date__c as sqoLostDate,\n\t\tsfdc_campaignmember.won__c as won,\n\t\tsfdc_campaignmember.opportunity_closed_won_date__c as opportunityClosedWonDate,\n\t\tsfdc_campaignmember.opportunity__c as opportunityId,\n\t\tsfdc_campaignmember.status_reason__c as statusReason,\n\t\tsfdc_campaignmember.current_status_reason__c as currentStatusReason\n\n FROM \n \t\t\"dev\".\"salesforce_production\".\"campaignmember\" as sfdc_campaignmember\n WHERE\n \t\tTRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_campaignmember\""}, "model.master_dbt_models.stg_salesforce_contact": {"raw_sql": "SELECT \n    sfdc_contact.id as contactId,\n    sfdc_contact.isdeleted as isDeleted,\n    sfdc_contact.accountid as accountId,\n    sfdc_contact.vidyard_user_id__c as vidyardUserId,\n    sfdc_contact.createddate as createdDate,\n    sfdc_contact.account_owner_id__c as createdDate,\n    sfdc_contact.ownerid as createdDate,\n    sfdc_contact.lastname as lastName,\n    sfdc_contact.firstname as firstName,\n    sfdc_contact.name as name,\n    sfdc_contact.email as email,\n    sfdc_contact.title as title,\n    sfdc_contact.role__c as role,\n    sfdc_contact.job_role__c as jobRole,\n    sfdc_contact.department__c as department,\n    sfdc_contact.account_lead_type__c as accountLeadType,\n    sfdc_contact.leadsource as leadSource,\n    sfdc_contact.baller_score__c as ballerScore,\n    sfdc_contact.contact_status_vy__c as contactStatus,\n    sfdc_contact.status_reason__c as statusReason,\n    sfdc_contact.main_csm_contact__c as mainContact,\n    sfdc_contact.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_contact.crm__c as crm,\n    sfdc_contact.mailingstreet as mailingStreet,\n    sfdc_contact.mailingcity as mailingCity,\n    sfdc_contact.mailingstate as mailingState,\n    sfdc_contact.mailingpostalcode as mailingPostalCode,\n    sfdc_contact.mailingcountry as mailingCountry \n FROM \n    {{ source('salesforce_production', 'contact') }} as sfdc_contact", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_contact"], "unique_id": "model.master_dbt_models.stg_salesforce_contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_contact.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_contact.sql", "name": "stg_salesforce_contact", "resource_type": "model", "alias": "stg_salesforce_contact", "checksum": {"name": "sha256", "checksum": "52f74375a19b32e6018ef796fd02ef9384e835c9ba1dfbbe50d4587a457de3fa"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "contact"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.contact"]}, "description": "", "columns": {"contactId": {"name": "contactId", "description": "Unique identifier generated by salesforce for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "T|F for if the contact is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "The account id that the contact is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardUserId": {"name": "vidyardUserId", "description": "The vidyard user id of the contact if the user has a vidyard account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "contact owner id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "Last name of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "First name of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The contact's email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The contact's job title", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The contact's level in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "jobRole": {"name": "jobRole", "description": "The contact's role in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The contact's department in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountLeadType": {"name": "accountLeadType", "description": "Description on what type of lead the Contact is it is e.g. Prospect, Former Customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadSource": {"name": "leadSource", "description": "Source of where the contact originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ballerScore": {"name": "ballerScore", "description": "Contact's lead score calculated in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contactStatus": {"name": "contactStatus", "description": "Current status of the contact, e.g. Called", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusReason": {"name": "statusReason", "description": "Reason for a particular status assigned to the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainContact": {"name": "mainContact", "description": "csm contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "marketingAutomationPlatform": {"name": "marketingAutomationPlatform", "description": "Which marketing platform the lead uses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crm": {"name": "crm", "description": "Which CRM platform the lead uses", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingStreet": {"name": "mailingStreet", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingCity": {"name": "mailingCity", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingState": {"name": "mailingState", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingPostalCode": {"name": "mailingPostalCode", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mailingCountry": {"name": "mailingCountry", "description": "also used as billing information for the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_contact.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n    sfdc_contact.id as contactId,\n    sfdc_contact.isdeleted as isDeleted,\n    sfdc_contact.accountid as accountId,\n    sfdc_contact.vidyard_user_id__c as vidyardUserId,\n    sfdc_contact.createddate as createdDate,\n    sfdc_contact.account_owner_id__c as createdDate,\n    sfdc_contact.ownerid as createdDate,\n    sfdc_contact.lastname as lastName,\n    sfdc_contact.firstname as firstName,\n    sfdc_contact.name as name,\n    sfdc_contact.email as email,\n    sfdc_contact.title as title,\n    sfdc_contact.role__c as role,\n    sfdc_contact.job_role__c as jobRole,\n    sfdc_contact.department__c as department,\n    sfdc_contact.account_lead_type__c as accountLeadType,\n    sfdc_contact.leadsource as leadSource,\n    sfdc_contact.baller_score__c as ballerScore,\n    sfdc_contact.contact_status_vy__c as contactStatus,\n    sfdc_contact.status_reason__c as statusReason,\n    sfdc_contact.main_csm_contact__c as mainContact,\n    sfdc_contact.marketing_automation_platform__c as marketingAutomationPlatform,\n    sfdc_contact.crm__c as crm,\n    sfdc_contact.mailingstreet as mailingStreet,\n    sfdc_contact.mailingcity as mailingCity,\n    sfdc_contact.mailingstate as mailingState,\n    sfdc_contact.mailingpostalcode as mailingPostalCode,\n    sfdc_contact.mailingcountry as mailingCountry \n FROM \n    \"dev\".\"salesforce_production\".\"contact\" as sfdc_contact", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_contact\""}, "model.master_dbt_models.stg_salesforce_lead": {"raw_sql": "SELECT \n\t\tsfdc_lead.id as leadId,\n\t\tsfdc_lead.isdeleted as isDeleted,\n\t\tsfdc_lead.account_id__c as accountId,\n\t\tsfdc_lead.vidyard_user__c as vidyardUserId,\n\t\tsfdc_lead.isconverted as isConverted,\n\t\tsfdc_lead.convertedcontactid as convertedContactId,\n\t\tsfdc_lead.createddate as createdDate,\n\t\tsfdc_lead.converteddate as convertedDate,\n\t\tsfdc_lead.lead_owner_id__c as leadOwnerId,\n\t\tsfdc_lead.lastname as lastName,\n\t\tsfdc_lead.firstname as firstName,\n\t\tsfdc_lead.name as name,\n\t\tsfdc_lead.email as email,\n\t\tsfdc_lead.title as title,\n\t\tsfdc_lead.role__c as role,\n\t\tsfdc_lead.company as company,\n\t\tsfdc_lead.industry as industry,\n\t\tsfdc_lead.leadsource as leadSource,\n\t\tsfdc_lead.lead_type__c as leadType,\n\t\tsfdc_lead.status as status,\n\t\tsfdc_lead.status_reason__c as statusReason,\n\t\tsfdc_lead.reason_unqualified__c as reasonUnqualified,\n\t\tsfdc_lead.baller_score__c as ballerScore\n\nFROM \n\t\t{{ source ('salesforce_production','lead') }} as sfdc_lead\n\nWHERE\n\t\tTRUE", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "staging", "salesforce", "stg_salesforce_lead"], "unique_id": "model.master_dbt_models.stg_salesforce_lead", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "staging/salesforce/stg_salesforce_lead.sql", "original_file_path": "models/staging/salesforce/stg_salesforce_lead.sql", "name": "stg_salesforce_lead", "resource_type": "model", "alias": "stg_salesforce_lead", "checksum": {"name": "sha256", "checksum": "f4e67410fa5efbcf6b24ad3ae4c9aad3bba78b701d17741f6711b51d9d18b67b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [], "sources": [["salesforce_production", "lead"]], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["source.master_dbt_models.salesforce_production.lead"]}, "description": "", "columns": {"leadId": {"name": "leadId", "description": "Unique identifier generated by salesforce for the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isDeleted": {"name": "isDeleted", "description": "T|F for if the lead is deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountId": {"name": "accountId", "description": "The account id that the lead is associated with, IF the lead is attached to an account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vidyardUserId": {"name": "vidyardUserId", "description": "The vidyard user id of the lead if the user has a vidyard account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isConverted": {"name": "isConverted", "description": "T|F field for determining if the lead was converted to a contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "convertedContactId": {"name": "convertedContactId", "description": "the contact id for the lead that was converted to a contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createdDate": {"name": "createdDate", "description": "The date the lead was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "convertedDate": {"name": "convertedDate", "description": "The date the lead was converted to a contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadOwnerId": {"name": "leadOwnerId", "description": "owner of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastName": {"name": "lastName", "description": "Last name of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstName": {"name": "firstName", "description": "First name of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The lead's email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The lead's job title", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The lead's level in their company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "The company of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "The industry of the lead's company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadSource": {"name": "leadSource", "description": "Source of where the lead originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leadType": {"name": "leadType", "description": "Description on what type of lead the user is, e.g. Prospect, Former Customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the lead, e.g. Called", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statusReason": {"name": "statusReason", "description": "Reason for a particular status assigned to the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reasonUnqualified": {"name": "reasonUnqualified", "description": "reason for why a lead is unqualified", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ballerScore": {"name": "ballerScore", "description": "lead score calculated in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/salesforce/salesforce.yml", "build_path": "target/run/master_dbt_models/models/staging/salesforce/stg_salesforce_lead.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT \n\t\tsfdc_lead.id as leadId,\n\t\tsfdc_lead.isdeleted as isDeleted,\n\t\tsfdc_lead.account_id__c as accountId,\n\t\tsfdc_lead.vidyard_user__c as vidyardUserId,\n\t\tsfdc_lead.isconverted as isConverted,\n\t\tsfdc_lead.convertedcontactid as convertedContactId,\n\t\tsfdc_lead.createddate as createdDate,\n\t\tsfdc_lead.converteddate as convertedDate,\n\t\tsfdc_lead.lead_owner_id__c as leadOwnerId,\n\t\tsfdc_lead.lastname as lastName,\n\t\tsfdc_lead.firstname as firstName,\n\t\tsfdc_lead.name as name,\n\t\tsfdc_lead.email as email,\n\t\tsfdc_lead.title as title,\n\t\tsfdc_lead.role__c as role,\n\t\tsfdc_lead.company as company,\n\t\tsfdc_lead.industry as industry,\n\t\tsfdc_lead.leadsource as leadSource,\n\t\tsfdc_lead.lead_type__c as leadType,\n\t\tsfdc_lead.status as status,\n\t\tsfdc_lead.status_reason__c as statusReason,\n\t\tsfdc_lead.reason_unqualified__c as reasonUnqualified,\n\t\tsfdc_lead.baller_score__c as ballerScore\n\nFROM \n\t\t\"dev\".\"salesforce_production\".\"lead\" as sfdc_lead\n\nWHERE\n\t\tTRUE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"stg_salesforce_lead\""}, "model.master_dbt_models.fct_sfdc_accounts_use_case": {"raw_sql": "SELECT\n    sfdc_account.accountid as accountId,\n    listagg (distinct sfdc_opp.usecase,';') as useCase\nFROM\n    {{ ref('stg_salesforce_opportunity') }} as sfdc_opp\nJOIN\n    {{ ref('stg_salesforce_account') }} as sfdc_account\nON\n    sfdc_opp.accountid = sfdc_account.accountid\nWHERE\n  sfdc_opp.usecase is not null\n  and sfdc_opp.stagename LIKE '7 - Closed Won'\nGROUP BY\n  sfdc_account.accountId", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "marts", "utils", "fct_sfdc_accounts_use_case"], "unique_id": "model.master_dbt_models.fct_sfdc_accounts_use_case", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "marts/utils/fct_sfdc_accounts_use_case.sql", "original_file_path": "models/marts/utils/fct_sfdc_accounts_use_case.sql", "name": "fct_sfdc_accounts_use_case", "resource_type": "model", "alias": "fct_sfdc_accounts_use_case", "checksum": {"name": "sha256", "checksum": "70163fa9458ad7a776168da19c0c87ede0fba9249d15a148377c43a6078e80fd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["stg_salesforce_opportunity"], ["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity", "model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {"useCase": {"name": "useCase", "description": "The main use case this particular customer has indicated will be applied to their products", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/utils/utils.yml", "build_path": "target/run/master_dbt_models/models/marts/utils/fct_sfdc_accounts_use_case.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    sfdc_account.accountid as accountId,\n    listagg (distinct sfdc_opp.usecase,';') as useCase\nFROM\n    \"dev\".\"dbt_vidyard_master\".\"stg_salesforce_opportunity\" as sfdc_opp\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_salesforce_account\" as sfdc_account\nON\n    sfdc_opp.accountid = sfdc_account.accountid\nWHERE\n  sfdc_opp.usecase is not null\n  and sfdc_opp.stagename LIKE '7 - Closed Won'\nGROUP BY\n  sfdc_account.accountId", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"fct_sfdc_accounts_use_case\""}, "model.master_dbt_models.fct_vidyard_pro_customers": {"raw_sql": "SELECT\n    COUNT (DISTINCT subscription.subscriptionId) as activeProSubscriptions,\n    subscription.status\nFROM\n    {{ ref('stg_zuora_account') }} as account\nJOIN\n    {{ ref('stg_zuora_subscription') }} as subscription\nON\n    subscription.accountId = account.accountId\nJOIN\n    {{ ref('stg_zuora_rate_plan') }} as rateplan\nON\n    subscription.subscriptionId = rateplan.subscriptionId\nJOIN\n    {{ ref('stg_zuora_product_rate_plan') }} as productrateplan\nON\n    rateplan.productRatePlanId = productrateplan.productRatePlanId\nJOIN\n    {{ ref('stg_zuora_product') }} as product\nON\n    productrateplan.productID = product.productId\nWHERE\n    product.sku LIKE 'SS-010'\nGROUP BY\n    subscription.status", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "marts", "utils", "fct_vidyard_pro_customers"], "unique_id": "model.master_dbt_models.fct_vidyard_pro_customers", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "marts/utils/fct_vidyard_pro_customers.sql", "original_file_path": "models/marts/utils/fct_vidyard_pro_customers.sql", "name": "fct_vidyard_pro_customers", "resource_type": "model", "alias": "fct_vidyard_pro_customers", "checksum": {"name": "sha256", "checksum": "3a91341830312cbacd92f7a66b27b5ae3f861b5a6cfffcb57f4093cdbdcb74ae"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["stg_zuora_account"], ["stg_zuora_subscription"], ["stg_zuora_rate_plan"], ["stg_zuora_product_rate_plan"], ["stg_zuora_product"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.master_dbt_models.stg_zuora_account", "model.master_dbt_models.stg_zuora_subscription", "model.master_dbt_models.stg_zuora_rate_plan", "model.master_dbt_models.stg_zuora_product_rate_plan", "model.master_dbt_models.stg_zuora_product"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/marts/utils/fct_vidyard_pro_customers.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    COUNT (DISTINCT subscription.subscriptionId) as activeProSubscriptions,\n    subscription.status\nFROM\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_account\" as account\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_subscription\" as subscription\nON\n    subscription.accountId = account.accountId\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_rate_plan\" as rateplan\nON\n    subscription.subscriptionId = rateplan.subscriptionId\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_product_rate_plan\" as productrateplan\nON\n    rateplan.productRatePlanId = productrateplan.productRatePlanId\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_zuora_product\" as product\nON\n    productrateplan.productID = product.productId\nWHERE\n    product.sku LIKE 'SS-010'\nGROUP BY\n    subscription.status", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"fct_vidyard_pro_customers\""}, "model.master_dbt_models.nps_survey_responses": {"raw_sql": "SELECT\n    surveys.npsSurveyID,\n    surveys.userId,\n    surveys.organizationId,\n    users.email,\n    surveys.filled,\n    surveys.cancelled,\n    surveys.userScore,\n    surveys.userComment,\n    surveys.createdAt\nFROM \n    {{ ref('stg_vidyard_nps_surveys') }} as surveys\nJOIN\n    {{ ref('stg_vidyard_users') }} as users\non\n    surveys.userid = users.userId\n  WHERE TRUE\n    AND surveys.userScore IS NOT null\n    AND surveys.filled = true\n    AND surveys.cancelled = false\n    AND surveys.surveytype IS null", "compiled": true, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "marts", "utils", "nps_survey_responses"], "unique_id": "model.master_dbt_models.nps_survey_responses", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "marts/utils/nps_survey_responses.sql", "original_file_path": "models/marts/utils/nps_survey_responses.sql", "name": "nps_survey_responses", "resource_type": "model", "alias": "nps_survey_responses", "checksum": {"name": "sha256", "checksum": "59ef35e69e152f84ee41f6f4c53c6cfbf9b84f75700382a20576dca4d26fcbe3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "bind": false}, "tags": [], "refs": [["stg_vidyard_nps_surveys"], ["stg_vidyard_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.master_dbt_models.stg_vidyard_nps_surveys", "model.master_dbt_models.stg_vidyard_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/master_dbt_models/models/marts/utils/nps_survey_responses.sql", "deferred": false, "unrendered_config": {"bind": false}, "compiled_sql": "SELECT\n    surveys.npsSurveyID,\n    surveys.userId,\n    surveys.organizationId,\n    users.email,\n    surveys.filled,\n    surveys.cancelled,\n    surveys.userScore,\n    surveys.userComment,\n    surveys.createdAt\nFROM \n    \"dev\".\"dbt_vidyard_master\".\"stg_vidyard_nps_surveys\" as surveys\nJOIN\n    \"dev\".\"dbt_vidyard_master\".\"stg_vidyard_users\" as users\non\n    surveys.userid = users.userId\n  WHERE TRUE\n    AND surveys.userScore IS NOT null\n    AND surveys.filled = true\n    AND surveys.cancelled = false\n    AND surveys.surveytype IS null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_vidyard_master\".\"nps_survey_responses\""}, "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_product_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_product_sessions_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_product_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_product_sessions_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_product_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_product_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_product_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_product_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_product_sessions_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_product_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_product_sessions_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_product_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_product_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_product_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_govideo_production_product_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_product_sessions_userID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_product_sessions_userID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_product_sessions_userID", "resource_type": "test", "alias": "not_null_stg_govideo_production_product_sessions_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_product_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_product_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_govideo_production_users_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_govideo_production_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_users_userID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_users_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_users_userID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_users_userID", "resource_type": "test", "alias": "not_null_stg_govideo_production_users_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_govideo_production_users_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_govideo_production_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_users_userID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_users_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_users_userID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_users_userID", "resource_type": "test", "alias": "unique_stg_govideo_production_users_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_vidyard_com_sessions_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_vidyard_com_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_vidyard_com_sessions_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_vidyard_com_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_sessions') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_vidyard_com_sessions_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_vidyard_com_sessions_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_vidyard_com_sessions_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_vidyard_com_sessions_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_opened_extension') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_opened_extension_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_opened_extension_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_opened_extension_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_opened_extension_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_opened_extension"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_opened_extension"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_opened_extension') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_opened_extension_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_opened_extension_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_opened_extension_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_opened_extension_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_opened_extension"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_opened_extension"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_global_session') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_global_session_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_global_session_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_global_session_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_global_session_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_global_session"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_global_session"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_global_session') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_global_session_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_global_session_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_global_session_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_global_session_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_global_session"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_global_session"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_pageviews') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_pageviews_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_pageviews_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_pageviews_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_pageviews_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_pageviews"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_pageviews"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_pageviews') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_pageviews_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_pageviews_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_pageviews_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_pageviews_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_pageviews"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_pageviews"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_recorded_or_uploaded') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_video_recorded_or_uploaded_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_video_recorded_or_uploaded_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_recorded_or_uploaded"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_recorded_or_uploaded') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_video_recorded_or_uploaded_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_video_recorded_or_uploaded_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_video_recorded_or_uploaded_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_video_recorded_or_uploaded_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_recorded_or_uploaded"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_any_pageview') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_vidyard_com_any_pageview_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_vidyard_com_any_pageview_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_any_pageview"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_vidyard_com_any_pageview') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_vidyard_com_any_pageview_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_vidyard_com_any_pageview_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_vidyard_com_any_pageview_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_vidyard_com_any_pageview_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_vidyard_com_any_pageview"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_sharing_share_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_govideo_production_sharing_share_combo_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_govideo_production_sharing_share_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "not_null_stg_govideo_production_sharing_share_combo_eventID", "resource_type": "test", "alias": "not_null_stg_govideo_production_sharing_share_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_sharing_share_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_govideo_production_sharing_share_combo') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_govideo_production_sharing_share_combo_eventID"], "unique_id": "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_govideo_production_sharing_share_combo_eventID.sql", "original_file_path": "models/staging/heap/heap.yml", "name": "unique_stg_govideo_production_sharing_share_combo_eventID", "resource_type": "test", "alias": "unique_stg_govideo_production_sharing_share_combo_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_govideo_production_sharing_share_combo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_zuora_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_zuora_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_account_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_account_accountId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_account_accountId", "resource_type": "test", "alias": "not_null_stg_zuora_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_zuora_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_zuora_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_account_accountId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_account_accountId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_account_accountId", "resource_type": "test", "alias": "unique_stg_zuora_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_zuora_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_zuora_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_contact_contactId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_contact_contactId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_contact_contactId", "resource_type": "test", "alias": "unique_stg_zuora_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.not_null_stg_zuora_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_zuora_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_contact_contactId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_contact_contactId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_contact_contactId", "resource_type": "test", "alias": "not_null_stg_zuora_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "subscriptionId", "model": "{{ ref('stg_zuora_subscrip') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_subscrip_subscriptionId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_subscrip_subscriptionId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_subscrip_subscriptionId", "resource_type": "test", "alias": "unique_stg_zuora_subscrip_subscriptionId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_subscrip"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "subscriptionId"}, "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "subscriptionId", "model": "{{ ref('stg_zuora_subscrip') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_subscrip_subscriptionId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_subscrip_subscriptionId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_subscrip_subscriptionId", "resource_type": "test", "alias": "not_null_stg_zuora_subscrip_subscriptionId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_subscrip"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "subscriptionId"}, "test.master_dbt_models.unique_stg_zuora_product_productId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "productId", "model": "{{ ref('stg_zuora_product') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_product_productId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_product_productId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_product_productId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_product_productId", "resource_type": "test", "alias": "unique_stg_zuora_product_productId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_product"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productId"}, "test.master_dbt_models.not_null_stg_zuora_product_productId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "productId", "model": "{{ ref('stg_zuora_product') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_product_productId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_product_productId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_product_productId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_product_productId", "resource_type": "test", "alias": "not_null_stg_zuora_product_productId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_product"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productId"}, "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "productRatePlanId", "model": "{{ ref('stg_zuora_product_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_product_rate_plan_productRatePlanId"], "unique_id": "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_product_rate_plan_productRatePlanId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_product_rate_plan_productRatePlanId", "resource_type": "test", "alias": "unique_stg_zuora_product_rate_plan_productRatePlanId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_product_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productRatePlanId"}, "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "productRatePlanId", "model": "{{ ref('stg_zuora_product_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_product_rate_plan_productRatePlanId"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_product_rate_plan_productRatePlanId.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_product_rate_plan_productRatePlanId", "resource_type": "test", "alias": "not_null_stg_zuora_product_rate_plan_productRatePlanId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_product_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_product_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "productRatePlanId"}, "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ratePlanID", "model": "{{ ref('stg_zuora_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_zuora_rate_plan_ratePlanID"], "unique_id": "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_zuora_rate_plan_ratePlanID.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "unique_stg_zuora_rate_plan_ratePlanID", "resource_type": "test", "alias": "unique_stg_zuora_rate_plan_ratePlanID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_zuora_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ratePlanID"}, "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ratePlanID", "model": "{{ ref('stg_zuora_rate_plan') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_zuora_rate_plan_ratePlanID"], "unique_id": "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_zuora_rate_plan_ratePlanID.sql", "original_file_path": "models/staging/zuora/zuora.yml", "name": "not_null_stg_zuora_rate_plan_ratePlanID", "resource_type": "test", "alias": "not_null_stg_zuora_rate_plan_ratePlanID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_zuora_rate_plan"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_zuora_rate_plan"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ratePlanID"}, "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_organizations_parentID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "parentID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_parentID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_parentID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_parentID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_parentID", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_parentID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "parentID"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "parentID", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_parentID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_parentID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_parentID", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_parentID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "parentID"}, "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_ownerId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_ownerId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_ownerId", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_ownerId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_ownerId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_ownerId", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.unique_stg_vidyard_organizations_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_organizations_accountId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_organizations_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_organizations_accountId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_organizations_accountId", "resource_type": "test", "alias": "unique_stg_vidyard_organizations_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_vidyard_organizations') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_organizations_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_organizations_accountId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_organizations_accountId", "resource_type": "test", "alias": "not_null_stg_vidyard_organizations_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_organizations"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_organizations"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_vidyard_users_userId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userId", "model": "{{ ref('stg_vidyard_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_users_userId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_users_userId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_users_userId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_users_userId", "resource_type": "test", "alias": "unique_stg_vidyard_users_userId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userId"}, "test.master_dbt_models.not_null_stg_vidyard_users_userId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userId", "model": "{{ ref('stg_vidyard_users') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_users_userId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_users_userId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_users_userId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_users_userId", "resource_type": "test", "alias": "not_null_stg_vidyard_users_userId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_users"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userId"}, "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "groupID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_user_groups_groupID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_user_groups_groupID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_user_groups_groupID", "resource_type": "test", "alias": "unique_stg_vidyard_user_groups_groupID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "groupID"}, "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "groupID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_user_groups_groupID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_user_groups_groupID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_user_groups_groupID", "resource_type": "test", "alias": "not_null_stg_vidyard_user_groups_groupID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "groupID"}, "test.master_dbt_models.unique_stg_vidyard_user_groups_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_user_groups_userID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_user_groups_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_user_groups_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_user_groups_userID", "resource_type": "test", "alias": "unique_stg_vidyard_user_groups_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_user_groups_userID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_user_groups_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_user_groups_userID", "resource_type": "test", "alias": "not_null_stg_vidyard_user_groups_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_user_groups_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_user_groups_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_user_groups_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_user_groups_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_user_groups') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_user_groups_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_user_groups_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_user_groups_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_user_groups_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_user_groups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_user_groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_teams_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_teams_teamID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_teams_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_teams_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_teams_teamID", "resource_type": "test", "alias": "unique_stg_vidyard_teams_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.not_null_stg_vidyard_teams_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_teams_teamID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_teams_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_teams_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_teams_teamID", "resource_type": "test", "alias": "not_null_stg_vidyard_teams_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.unique_stg_vidyard_teams_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_teams_accountID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_teams_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_teams_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_teams_accountID", "resource_type": "test", "alias": "unique_stg_vidyard_teams_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.not_null_stg_vidyard_teams_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_teams') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_teams_accountID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_teams_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_teams_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_teams_accountID", "resource_type": "test", "alias": "not_null_stg_vidyard_teams_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_teams"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_teams"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "teamMembershipID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_team_memberships_teamMembershipID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_team_memberships_teamMembershipID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_team_memberships_teamMembershipID", "resource_type": "test", "alias": "unique_stg_vidyard_team_memberships_teamMembershipID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamMembershipID"}, "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "teamMembershipID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_team_memberships_teamMembershipID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_team_memberships_teamMembershipID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_team_memberships_teamMembershipID", "resource_type": "test", "alias": "not_null_stg_vidyard_team_memberships_teamMembershipID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamMembershipID"}, "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_team_memberships_teamID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_team_memberships_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_team_memberships_teamID", "resource_type": "test", "alias": "unique_stg_vidyard_team_memberships_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "teamID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_team_memberships_teamID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_team_memberships_teamID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_team_memberships_teamID", "resource_type": "test", "alias": "not_null_stg_vidyard_team_memberships_teamID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "teamID"}, "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_team_memberships_userID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_team_memberships_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_team_memberships_userID", "resource_type": "test", "alias": "unique_stg_vidyard_team_memberships_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_team_memberships') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_team_memberships_userID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_team_memberships_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_team_memberships_userID", "resource_type": "test", "alias": "not_null_stg_vidyard_team_memberships_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_team_memberships"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_team_memberships"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_org_metrics_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_org_metrics_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_org_metrics_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_org_metrics_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_org_metrics_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_org_metrics_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_org_metrics_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_org_metrics_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "firstViewVideoID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_org_metrics_firstViewVideoID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_org_metrics_firstViewVideoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_org_metrics_firstViewVideoID", "resource_type": "test", "alias": "unique_stg_vidyard_org_metrics_firstViewVideoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "firstViewVideoID"}, "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "firstViewVideoID", "model": "{{ ref('stg_vidyard_org_metrics') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_org_metrics_firstViewVideoID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_org_metrics_firstViewVideoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_org_metrics_firstViewVideoID", "resource_type": "test", "alias": "not_null_stg_vidyard_org_metrics_firstViewVideoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_org_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_org_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "firstViewVideoID"}, "test.master_dbt_models.unique_stg_vidyard_videos_videoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "videoID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_videos_videoID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_videos_videoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_videos_videoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_videos_videoID", "resource_type": "test", "alias": "unique_stg_vidyard_videos_videoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "videoID"}, "test.master_dbt_models.not_null_stg_vidyard_videos_videoID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "videoID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_videos_videoID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_videos_videoID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_videos_videoID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_videos_videoID", "resource_type": "test", "alias": "not_null_stg_vidyard_videos_videoID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "videoID"}, "test.master_dbt_models.unique_stg_vidyard_videos_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_videos_userID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_videos_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_videos_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_videos_userID", "resource_type": "test", "alias": "unique_stg_vidyard_videos_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.not_null_stg_vidyard_videos_userID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "userID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_videos_userID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_videos_userID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_videos_userID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_videos_userID", "resource_type": "test", "alias": "not_null_stg_vidyard_videos_userID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "userID"}, "test.master_dbt_models.unique_stg_vidyard_videos_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_videos_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_videos_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_videos_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_videos_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_videos_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_videos') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_videos_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_videos_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_videos_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_videos_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_videos"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_videos"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "activeFeatureID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_active_features_activeFeatureID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_active_features_activeFeatureID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_active_features_activeFeatureID", "resource_type": "test", "alias": "unique_stg_vidyard_active_features_activeFeatureID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "activeFeatureID"}, "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "activeFeatureID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_active_features_activeFeatureID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_active_features_activeFeatureID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_active_features_activeFeatureID", "resource_type": "test", "alias": "not_null_stg_vidyard_active_features_activeFeatureID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "activeFeatureID"}, "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_active_features_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_active_features_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_active_features_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_active_features_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_active_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_active_features_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_active_features_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_active_features_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_active_features_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_active_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_active_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_features_featureId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "featureId", "model": "{{ ref('stg_vidyard_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_features_featureId"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_features_featureId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_features_featureId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_features_featureId", "resource_type": "test", "alias": "unique_stg_vidyard_features_featureId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "featureId"}, "test.master_dbt_models.not_null_stg_vidyard_features_featureId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "featureId", "model": "{{ ref('stg_vidyard_features') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_features_featureId"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_features_featureId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_features_featureId.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_features_featureId", "resource_type": "test", "alias": "not_null_stg_vidyard_features_featureId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_features"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_features"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "featureId"}, "test.master_dbt_models.unique_stg_vidyard_players_playerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "playerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_players_playerID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_players_playerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_players_playerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_players_playerID", "resource_type": "test", "alias": "unique_stg_vidyard_players_playerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "playerID"}, "test.master_dbt_models.not_null_stg_vidyard_players_playerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "playerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_players_playerID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_players_playerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_players_playerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_players_playerID", "resource_type": "test", "alias": "not_null_stg_vidyard_players_playerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "playerID"}, "test.master_dbt_models.unique_stg_vidyard_players_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_players_organizationID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_players_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_players_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_players_organizationID", "resource_type": "test", "alias": "unique_stg_vidyard_players_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.not_null_stg_vidyard_players_organizationID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organizationID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_players_organizationID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_players_organizationID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_players_organizationID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_players_organizationID", "resource_type": "test", "alias": "not_null_stg_vidyard_players_organizationID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "organizationID"}, "test.master_dbt_models.unique_stg_vidyard_players_ownerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ownerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_players_ownerID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_players_ownerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_players_ownerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_players_ownerID", "resource_type": "test", "alias": "unique_stg_vidyard_players_ownerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerID"}, "test.master_dbt_models.not_null_stg_vidyard_players_ownerID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerID", "model": "{{ ref('stg_vidyard_players') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_players_ownerID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_players_ownerID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_players_ownerID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_players_ownerID", "resource_type": "test", "alias": "not_null_stg_vidyard_players_ownerID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_players"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_players"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerID"}, "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_allotment_limits_accountID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_allotment_limits_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_allotment_limits_accountID", "resource_type": "test", "alias": "unique_stg_vidyard_allotment_limits_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_allotment_limits_accountID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_allotment_limits_accountID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_allotment_limits_accountID", "resource_type": "test", "alias": "not_null_stg_vidyard_allotment_limits_accountID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountID"}, "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "allotmentLimitID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_allotment_limits_allotmentLimitID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_allotment_limits_allotmentLimitID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_allotment_limits_allotmentLimitID", "resource_type": "test", "alias": "unique_stg_vidyard_allotment_limits_allotmentLimitID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentLimitID"}, "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "allotmentLimitID", "model": "{{ ref('stg_vidyard_allotment_limits') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_allotment_limits_allotmentLimitID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_allotment_limits_allotmentLimitID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_allotment_limits_allotmentLimitID", "resource_type": "test", "alias": "not_null_stg_vidyard_allotment_limits_allotmentLimitID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_limits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_limits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentLimitID"}, "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "allotmentTypeID", "model": "{{ ref('stg_vidyard_allotment_types') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_allotment_types_allotmentTypeID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_allotment_types_allotmentTypeID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_allotment_types_allotmentTypeID", "resource_type": "test", "alias": "unique_stg_vidyard_allotment_types_allotmentTypeID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentTypeID"}, "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "allotmentTypeID", "model": "{{ ref('stg_vidyard_allotment_types') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_allotment_types_allotmentTypeID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_allotment_types_allotmentTypeID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_allotment_types_allotmentTypeID", "resource_type": "test", "alias": "not_null_stg_vidyard_allotment_types_allotmentTypeID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_allotment_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_allotment_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "allotmentTypeID"}, "test.master_dbt_models.unique_stg_vidyard_hubs_hubID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "hubID", "model": "{{ ref('stg_vidyard_hubs') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_hubs_hubID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_hubs_hubID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_hubs_hubID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_hubs_hubID", "resource_type": "test", "alias": "unique_stg_vidyard_hubs_hubID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_hubs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_hubs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "hubID"}, "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "hubID", "model": "{{ ref('stg_vidyard_hubs') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_hubs_hubID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_hubs_hubID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_hubs_hubID", "resource_type": "test", "alias": "not_null_stg_vidyard_hubs_hubID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_hubs"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_hubs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "hubID"}, "test.master_dbt_models.unique_stg_vidyard_events_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_vidyard_events') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_events_eventID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_events_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_events_eventID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_events_eventID", "resource_type": "test", "alias": "unique_stg_vidyard_events_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.not_null_stg_vidyard_events_eventID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventID", "model": "{{ ref('stg_vidyard_events') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_events_eventID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_events_eventID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_events_eventID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_events_eventID", "resource_type": "test", "alias": "not_null_stg_vidyard_events_eventID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventID"}, "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "eventJoinID", "model": "{{ ref('stg_vidyard_event_joins') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_vidyard_event_joins_eventJoinID"], "unique_id": "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_vidyard_event_joins_eventJoinID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "unique_stg_vidyard_event_joins_eventJoinID", "resource_type": "test", "alias": "unique_stg_vidyard_event_joins_eventJoinID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_event_joins"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_vidyard_event_joins"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventJoinID"}, "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "eventJoinID", "model": "{{ ref('stg_vidyard_event_joins') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_vidyard_event_joins_eventJoinID"], "unique_id": "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_vidyard_event_joins_eventJoinID.sql", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "not_null_stg_vidyard_event_joins_eventJoinID", "resource_type": "test", "alias": "not_null_stg_vidyard_event_joins_eventJoinID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_vidyard_event_joins"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_vidyard_event_joins"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "eventJoinID"}, "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "opportunityId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_opportunity_opportunityId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_opportunity_opportunityId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_opportunity_opportunityId", "resource_type": "test", "alias": "unique_stg_salesforce_opportunity_opportunityId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "opportunityId"}, "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "opportunityId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_opportunity_opportunityId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_opportunity_opportunityId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_opportunity_opportunityId", "resource_type": "test", "alias": "not_null_stg_salesforce_opportunity_opportunityId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "opportunityId"}, "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_opportunity_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_opportunity_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_opportunity_accountId", "resource_type": "test", "alias": "not_null_stg_salesforce_opportunity_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_salesforce_opportunity') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_opportunity_ownerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_opportunity_ownerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_opportunity_ownerId", "resource_type": "test", "alias": "not_null_stg_salesforce_opportunity_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.unique_stg_salesforce_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_accountId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_accountId", "resource_type": "test", "alias": "unique_stg_salesforce_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_salesforce_account_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_accountId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_salesforce_account_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_ownerId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_ownerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_ownerId", "resource_type": "test", "alias": "unique_stg_salesforce_account_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.not_null_stg_salesforce_account_ownerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ownerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_ownerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_ownerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_ownerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_ownerId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_ownerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "ownerId"}, "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "vidyardAccountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_vidyardAccountId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_vidyardAccountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_vidyardAccountId", "resource_type": "test", "alias": "unique_stg_salesforce_account_vidyardAccountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardAccountId"}, "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "vidyardAccountId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_vidyardAccountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_vidyardAccountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_vidyardAccountId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_vidyardAccountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardAccountId"}, "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "csmOwnerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_csmOwnerId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_csmOwnerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_csmOwnerId", "resource_type": "test", "alias": "unique_stg_salesforce_account_csmOwnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "csmOwnerId"}, "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "csmOwnerId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_csmOwnerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_csmOwnerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_csmOwnerId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_csmOwnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "csmOwnerId"}, "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "vidyardUserId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_account_vidyardUserId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_account_vidyardUserId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_account_vidyardUserId", "resource_type": "test", "alias": "unique_stg_salesforce_account_vidyardUserId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardUserId"}, "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "vidyardUserId", "model": "{{ ref('stg_salesforce_account') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_account_vidyardUserId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_account_vidyardUserId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_account_vidyardUserId", "resource_type": "test", "alias": "not_null_stg_salesforce_account_vidyardUserId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "vidyardUserId"}, "test.master_dbt_models.unique_stg_salesforce_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_contact_contactId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_contact_contactId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_contact_contactId", "resource_type": "test", "alias": "unique_stg_salesforce_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.not_null_stg_salesforce_contact_contactId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "contactId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_contact_contactId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_contact_contactId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_contact_contactId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_contact_contactId", "resource_type": "test", "alias": "not_null_stg_salesforce_contact_contactId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "contactId"}, "test.master_dbt_models.unique_stg_salesforce_contact_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_contact_accountId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_contact_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_contact_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_contact_accountId", "resource_type": "test", "alias": "unique_stg_salesforce_contact_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.not_null_stg_salesforce_contact_accountId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "accountId", "model": "{{ ref('stg_salesforce_contact') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_contact_accountId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_contact_accountId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_contact_accountId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_contact_accountId", "resource_type": "test", "alias": "not_null_stg_salesforce_contact_accountId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_contact"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_contact"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "accountId"}, "test.master_dbt_models.unique_stg_salesforce_lead_leadId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "leadId", "model": "{{ ref('stg_salesforce_lead') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_lead_leadId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_lead_leadId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_lead_leadId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_lead_leadId", "resource_type": "test", "alias": "unique_stg_salesforce_lead_leadId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "leadId"}, "test.master_dbt_models.not_null_stg_salesforce_lead_leadId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "leadId", "model": "{{ ref('stg_salesforce_lead') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_lead_leadId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_lead_leadId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_lead_leadId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_lead_leadId", "resource_type": "test", "alias": "not_null_stg_salesforce_lead_leadId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "leadId"}, "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "leadOwnerId", "model": "{{ ref('stg_salesforce_lead') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_lead_leadOwnerId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_lead_leadOwnerId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_lead_leadOwnerId", "resource_type": "test", "alias": "not_null_stg_salesforce_lead_leadOwnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_lead"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_lead"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "leadOwnerId"}, "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaignMemberId", "model": "{{ ref('stg_salesforce_campaignmember') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "unique_stg_salesforce_campaignmember_campaignMemberId"], "unique_id": "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/unique_stg_salesforce_campaignmember_campaignMemberId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "unique_stg_salesforce_campaignmember_campaignMemberId", "resource_type": "test", "alias": "unique_stg_salesforce_campaignmember_campaignMemberId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_campaignmember"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.master_dbt_models.stg_salesforce_campaignmember"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "campaignMemberId"}, "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaignMemberId", "model": "{{ ref('stg_salesforce_campaignmember') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_campaignmember_campaignMemberId"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_campaignmember_campaignMemberId.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_campaignmember_campaignMemberId", "resource_type": "test", "alias": "not_null_stg_salesforce_campaignmember_campaignMemberId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_campaignmember"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_campaignmember"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "campaignMemberId"}, "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "createdDate", "model": "{{ ref('stg_salesforce_campaignmember') }}"}}, "database": "dev", "schema": "dbt_vidyard_master", "fqn": ["master_dbt_models", "schema_test", "not_null_stg_salesforce_campaignmember_createdDate"], "unique_id": "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "schema_test/not_null_stg_salesforce_campaignmember_createdDate.sql", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "not_null_stg_salesforce_campaignmember_createdDate", "resource_type": "test", "alias": "not_null_stg_salesforce_campaignmember_createdDate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "bind": false}, "tags": ["schema"], "refs": [["stg_salesforce_campaignmember"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.master_dbt_models.stg_salesforce_campaignmember"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "severity": "ERROR"}, "column_name": "createdDate"}}, "sources": {"source.master_dbt_models.govideo_production.product_sessions": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "product_sessions"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.product_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "product_sessions", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "product_sessions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"product_sessions\""}, "source.master_dbt_models.govideo_production.users": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "users"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "users", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"users\""}, "source.master_dbt_models.govideo_production.vidyard_com_sessions": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "vidyard_com_sessions"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.vidyard_com_sessions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "vidyard_com_sessions", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "vidyard_com_sessions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"vidyard_com_sessions\""}, "source.master_dbt_models.govideo_production.opened_extension": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "opened_extension"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.opened_extension", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "opened_extension", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "opened_extension", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"opened_extension\""}, "source.master_dbt_models.govideo_production.global_session": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "global_session"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.global_session", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "global_session", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "global_session", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"global_session\""}, "source.master_dbt_models.govideo_production.pageviews": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "pageviews"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.pageviews", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "pageviews", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "pageviews", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"pageviews\""}, "source.master_dbt_models.govideo_production.video_recorded_or_uploaded": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "video_recorded_or_uploaded"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.video_recorded_or_uploaded", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "video_recorded_or_uploaded", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "video_recorded_or_uploaded", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"video_recorded_or_uploaded\""}, "source.master_dbt_models.govideo_production.platform_video_shared": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "platform_video_shared"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.platform_video_shared", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "platform_video_shared", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "platform_video_shared", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"platform_video_shared\""}, "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "video_creation_started_to_create_or_upload_a_video_combo"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "video_creation_started_to_create_or_upload_a_video_combo", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "video_creation_started_to_create_or_upload_a_video_combo", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"video_creation_started_to_create_or_upload_a_video_combo\""}, "source.master_dbt_models.govideo_production.vidyard_com_any_pageview": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "vidyard_com_any_pageview"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.vidyard_com_any_pageview", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "vidyard_com_any_pageview", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "vidyard_com_any_pageview", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"vidyard_com_any_pageview\""}, "source.master_dbt_models.govideo_production.sharing_share_combo": {"fqn": ["master_dbt_models", "staging", "heap", "govideo_production", "sharing_share_combo"], "database": "dev", "schema": "govideo_production", "unique_id": "source.master_dbt_models.govideo_production.sharing_share_combo", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/heap/heap.yml", "original_file_path": "models/staging/heap/heap.yml", "name": "sharing_share_combo", "source_name": "govideo_production", "source_description": "Heap Tables", "loader": "", "identifier": "sharing_share_combo", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"govideo_production\".\"sharing_share_combo\""}, "source.master_dbt_models.zuora.account": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "account"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "account", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"account\""}, "source.master_dbt_models.zuora.contact": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "contact"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "contact", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"contact\""}, "source.master_dbt_models.zuora.subscription": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "subscription"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.subscription", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "subscription", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "subscription", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"subscription\""}, "source.master_dbt_models.zuora.product": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "product"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.product", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "product", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "product", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"product\""}, "source.master_dbt_models.zuora.product_rate_plan": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "product_rate_plan"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.product_rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "product_rate_plan", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "product_rate_plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"product_rate_plan\""}, "source.master_dbt_models.zuora.rate_plan": {"fqn": ["master_dbt_models", "staging", "zuora", "zuora", "rate_plan"], "database": "dev", "schema": "zuora", "unique_id": "source.master_dbt_models.zuora.rate_plan", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/zuora/zuora.yml", "original_file_path": "models/staging/zuora/zuora.yml", "name": "rate_plan", "source_name": "zuora", "source_description": "Zuora Tables", "loader": "", "identifier": "rate_plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"zuora\".\"rate_plan\""}, "source.master_dbt_models.public.vidyard_organizations": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_organizations"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_organizations", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_organizations", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_organizations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_organizations\""}, "source.master_dbt_models.public.vidyard_users": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_users"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_users", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_users", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_users\""}, "source.master_dbt_models.public.vidyard_user_groups": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_user_groups"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_user_groups", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_user_groups", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_user_groups", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_user_groups\""}, "source.master_dbt_models.public.vidyard_teams": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_teams"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_teams", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_teams", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_teams", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_teams\""}, "source.master_dbt_models.public.vidyard_team_memberships": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_team_memberships"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_team_memberships", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_team_memberships", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_team_memberships", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_team_memberships\""}, "source.master_dbt_models.public.vidyard_org_metrics": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_org_metrics"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_org_metrics", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_org_metrics", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_org_metrics", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_org_metrics\""}, "source.master_dbt_models.public.vidyard_videos": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_videos"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_videos", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_videos", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_videos", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_videos\""}, "source.master_dbt_models.public.vidyard_active_features": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_active_features"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_active_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_active_features", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_active_features", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_active_features\""}, "source.master_dbt_models.public.vidyard_features": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_features"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_features", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_features", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_features", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_features\""}, "source.master_dbt_models.public.vidyard_players": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_players"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_players", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_players", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_players", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_players\""}, "source.master_dbt_models.public.vidyard_allotment_limits": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_allotment_limits"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_allotment_limits", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_allotment_limits", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_allotment_limits", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_allotment_limits\""}, "source.master_dbt_models.public.vidyard_allotment_types": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_allotment_types"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_allotment_types", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_allotment_types", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_allotment_types", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_allotment_types\""}, "source.master_dbt_models.public.vidyard_hubs": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_hubs"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_hubs", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_hubs", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_hubs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_hubs\""}, "source.master_dbt_models.public.vidyard_events": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_events"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_events", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_events", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_events\""}, "source.master_dbt_models.public.vidyard_event_joins": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_event_joins"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_event_joins", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_event_joins", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_event_joins", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_event_joins\""}, "source.master_dbt_models.public.vidyard_nps_surveys": {"fqn": ["master_dbt_models", "staging", "vidyard", "public", "vidyard_nps_surveys"], "database": "dev", "schema": "public", "unique_id": "source.master_dbt_models.public.vidyard_nps_surveys", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/vidyard/vidyard.yml", "original_file_path": "models/staging/vidyard/vidyard.yml", "name": "vidyard_nps_surveys", "source_name": "public", "source_description": "Vidyard Tables", "loader": "", "identifier": "vidyard_nps_surveys", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"public\".\"vidyard_nps_surveys\""}, "source.master_dbt_models.salesforce_production.opportunity": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "opportunity"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.opportunity", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "opportunity", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "opportunity", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"opportunity\""}, "source.master_dbt_models.salesforce_production.account": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "account"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.account", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "account", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"account\""}, "source.master_dbt_models.salesforce_production.contact": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "contact"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.contact", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "contact", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"contact\""}, "source.master_dbt_models.salesforce_production.campaign": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "campaign"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.campaign", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "campaign", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "campaign", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"campaign\""}, "source.master_dbt_models.salesforce_production.lead": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "lead"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.lead", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "lead", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "lead", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"lead\""}, "source.master_dbt_models.salesforce_production.campaignmember": {"fqn": ["master_dbt_models", "staging", "salesforce", "salesforce_production", "campaignmember"], "database": "dev", "schema": "salesforce_production", "unique_id": "source.master_dbt_models.salesforce_production.campaignmember", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/staging/salesforce/salesforce.yml", "original_file_path": "models/staging/salesforce/salesforce.yml", "name": "campaignmember", "source_name": "salesforce_production", "source_description": "Main CRM", "loader": "", "identifier": "campaignmember", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce_production\".\"campaignmember\""}, "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case": {"fqn": ["master_dbt_models", "marts", "utils", "salesforce", "fct_sfdc_accounts_use_case"], "database": "dev", "schema": "salesforce", "unique_id": "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "models/marts/utils/utils.yml", "original_file_path": "models/marts/utils/utils.yml", "name": "fct_sfdc_accounts_use_case", "source_name": "salesforce", "source_description": "Main CRM", "loader": "", "identifier": "fct_sfdc_accounts_use_case", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"salesforce\".\"fct_sfdc_accounts_use_case\""}}, "macros": {"macro.master_dbt_models.reset_permissions": {"unique_id": "macro.master_dbt_models.reset_permissions", "package_name": "master_dbt_models", "root_path": "/usr/src/develop/user-9404/environment-25532/repository-19156", "path": "macros/permissions_fixer.sql", "original_file_path": "macros/permissions_fixer.sql", "name": "reset_permissions", "macro_sql": "{% macro reset_permissions(table) %}\n\n  {% set query %}\n    GRANT ALL PRIVILEGES ON TABLE {{table}} TO vidyarddbt\n  {% endset %}\n\n  {% do run_query(query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n  getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__make_temp_relation": {"unique_id": "macro.dbt_redshift.redshift__make_temp_relation", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__make_temp_relation", "macro_sql": "{% macro redshift__make_temp_relation(base_relation, suffix) %}\n    {% do return(postgres__make_temp_relation(base_relation, suffix)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded": ["source.master_dbt_models.govideo_production.video_recorded_or_uploaded"], "model.master_dbt_models.stg_govideo_production_pageviews": ["source.master_dbt_models.govideo_production.pageviews"], "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions": ["source.master_dbt_models.govideo_production.vidyard_com_sessions"], "model.master_dbt_models.stg_govideo_production_opened_extension": ["source.master_dbt_models.govideo_production.opened_extension"], "model.master_dbt_models.stg_govideo_production_product_sessions": ["source.master_dbt_models.govideo_production.product_sessions"], "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo": ["source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo"], "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview": ["source.master_dbt_models.govideo_production.vidyard_com_any_pageview"], "model.master_dbt_models.stg_govideo_production_sharing_share_combo": ["source.master_dbt_models.govideo_production.sharing_share_combo"], "model.master_dbt_models.stg_govideo_production_global_session": ["source.master_dbt_models.govideo_production.global_session"], "model.master_dbt_models.stg_govideo_production_users": ["source.master_dbt_models.govideo_production.users"], "model.master_dbt_models.stg_zuora_subscription": ["source.master_dbt_models.zuora.subscription"], "model.master_dbt_models.stg_zuora_account": ["source.master_dbt_models.zuora.account"], "model.master_dbt_models.stg_zuora_product": ["source.master_dbt_models.zuora.product"], "model.master_dbt_models.stg_zuora_rate_plan": ["source.master_dbt_models.zuora.rate_plan"], "model.master_dbt_models.stg_zuora_product_rate_plan": ["source.master_dbt_models.zuora.product_rate_plan"], "model.master_dbt_models.stg_zuora_contact": ["source.master_dbt_models.zuora.contact"], "model.master_dbt_models.stg_vidyard_features": ["source.master_dbt_models.public.vidyard_features"], "model.master_dbt_models.stg_vidyard_team_memberships": ["source.master_dbt_models.public.vidyard_team_memberships"], "model.master_dbt_models.stg_vidyard_events": ["source.master_dbt_models.public.vidyard_events"], "model.master_dbt_models.stg_vidyard_allotment_limits": ["source.master_dbt_models.public.vidyard_allotment_limits"], "model.master_dbt_models.stg_vidyard_nps_surveys": ["source.master_dbt_models.public.vidyard_nps_surveys"], "model.master_dbt_models.stg_vidyard_allotment_types": ["source.master_dbt_models.public.vidyard_allotment_types"], "model.master_dbt_models.stg_vidyard_event_joins": ["source.master_dbt_models.public.vidyard_event_joins"], "model.master_dbt_models.stg_vidyard_organizations": ["source.master_dbt_models.public.vidyard_organizations"], "model.master_dbt_models.stg_vidyard_players": ["source.master_dbt_models.public.vidyard_players"], "model.master_dbt_models.stg_vidyard_org_metrics": ["source.master_dbt_models.public.vidyard_org_metrics"], "model.master_dbt_models.stg_vidyard_user_groups": ["source.master_dbt_models.public.vidyard_user_groups"], "model.master_dbt_models.stg_vidyard_active_features": ["source.master_dbt_models.public.vidyard_active_features"], "model.master_dbt_models.stg_vidyard_teams": ["source.master_dbt_models.public.vidyard_teams"], "model.master_dbt_models.stg_vidyard_videos": ["source.master_dbt_models.public.vidyard_videos"], "model.master_dbt_models.stg_vidyard_hubs": ["source.master_dbt_models.public.vidyard_hubs"], "model.master_dbt_models.stg_vidyard_users": ["source.master_dbt_models.public.vidyard_users"], "model.master_dbt_models.stg_salesforce_account": ["source.master_dbt_models.salesforce_production.account"], "model.master_dbt_models.stg_salesforce_opportunity": ["source.master_dbt_models.salesforce_production.opportunity"], "model.master_dbt_models.stg_salesforce_campaign": ["source.master_dbt_models.salesforce_production.campaign"], "model.master_dbt_models.stg_salesforce_campaignmember": ["source.master_dbt_models.salesforce_production.campaignmember"], "model.master_dbt_models.stg_salesforce_contact": ["source.master_dbt_models.salesforce_production.contact"], "model.master_dbt_models.stg_salesforce_lead": ["source.master_dbt_models.salesforce_production.lead"], "model.master_dbt_models.fct_sfdc_accounts_use_case": ["model.master_dbt_models.stg_salesforce_account", "model.master_dbt_models.stg_salesforce_opportunity"], "model.master_dbt_models.fct_vidyard_pro_customers": ["model.master_dbt_models.stg_zuora_account", "model.master_dbt_models.stg_zuora_product", "model.master_dbt_models.stg_zuora_product_rate_plan", "model.master_dbt_models.stg_zuora_rate_plan", "model.master_dbt_models.stg_zuora_subscription"], "model.master_dbt_models.nps_survey_responses": ["model.master_dbt_models.stg_vidyard_nps_surveys", "model.master_dbt_models.stg_vidyard_users"], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "test.master_dbt_models.not_null_stg_govideo_production_users_userID": ["model.master_dbt_models.stg_govideo_production_users"], "test.master_dbt_models.unique_stg_govideo_production_users_userID": ["model.master_dbt_models.stg_govideo_production_users"], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"], "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID": ["model.master_dbt_models.stg_govideo_production_opened_extension"], "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID": ["model.master_dbt_models.stg_govideo_production_opened_extension"], "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID": ["model.master_dbt_models.stg_govideo_production_global_session"], "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID": ["model.master_dbt_models.stg_govideo_production_global_session"], "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID": ["model.master_dbt_models.stg_govideo_production_pageviews"], "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID": ["model.master_dbt_models.stg_govideo_production_pageviews"], "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"], "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"], "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"], "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"], "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"], "test.master_dbt_models.not_null_stg_zuora_account_accountId": ["model.master_dbt_models.stg_zuora_account"], "test.master_dbt_models.unique_stg_zuora_account_accountId": ["model.master_dbt_models.stg_zuora_account"], "test.master_dbt_models.unique_stg_zuora_contact_contactId": ["model.master_dbt_models.stg_zuora_contact"], "test.master_dbt_models.not_null_stg_zuora_contact_contactId": ["model.master_dbt_models.stg_zuora_contact"], "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.unique_stg_zuora_product_productId": ["model.master_dbt_models.stg_zuora_product"], "test.master_dbt_models.not_null_stg_zuora_product_productId": ["model.master_dbt_models.stg_zuora_product"], "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId": ["model.master_dbt_models.stg_zuora_product_rate_plan"], "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId": ["model.master_dbt_models.stg_zuora_product_rate_plan"], "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID": ["model.master_dbt_models.stg_zuora_rate_plan"], "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID": ["model.master_dbt_models.stg_zuora_rate_plan"], "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_organizations_parentID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_organizations_accountId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId": ["model.master_dbt_models.stg_vidyard_organizations"], "test.master_dbt_models.unique_stg_vidyard_users_userId": ["model.master_dbt_models.stg_vidyard_users"], "test.master_dbt_models.not_null_stg_vidyard_users_userId": ["model.master_dbt_models.stg_vidyard_users"], "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.unique_stg_vidyard_user_groups_userID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID": ["model.master_dbt_models.stg_vidyard_user_groups"], "test.master_dbt_models.unique_stg_vidyard_teams_teamID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.not_null_stg_vidyard_teams_teamID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.unique_stg_vidyard_teams_accountID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.not_null_stg_vidyard_teams_accountID": ["model.master_dbt_models.stg_vidyard_teams"], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID": ["model.master_dbt_models.stg_vidyard_team_memberships"], "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID": ["model.master_dbt_models.stg_vidyard_org_metrics"], "test.master_dbt_models.unique_stg_vidyard_videos_videoID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.not_null_stg_vidyard_videos_videoID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.unique_stg_vidyard_videos_userID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.not_null_stg_vidyard_videos_userID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.unique_stg_vidyard_videos_organizationID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID": ["model.master_dbt_models.stg_vidyard_videos"], "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID": ["model.master_dbt_models.stg_vidyard_active_features"], "test.master_dbt_models.unique_stg_vidyard_features_featureId": ["model.master_dbt_models.stg_vidyard_features"], "test.master_dbt_models.not_null_stg_vidyard_features_featureId": ["model.master_dbt_models.stg_vidyard_features"], "test.master_dbt_models.unique_stg_vidyard_players_playerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.not_null_stg_vidyard_players_playerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.unique_stg_vidyard_players_organizationID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.not_null_stg_vidyard_players_organizationID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.unique_stg_vidyard_players_ownerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.not_null_stg_vidyard_players_ownerID": ["model.master_dbt_models.stg_vidyard_players"], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID": ["model.master_dbt_models.stg_vidyard_allotment_types"], "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID": ["model.master_dbt_models.stg_vidyard_allotment_types"], "test.master_dbt_models.unique_stg_vidyard_hubs_hubID": ["model.master_dbt_models.stg_vidyard_hubs"], "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID": ["model.master_dbt_models.stg_vidyard_hubs"], "test.master_dbt_models.unique_stg_vidyard_events_eventID": ["model.master_dbt_models.stg_vidyard_events"], "test.master_dbt_models.not_null_stg_vidyard_events_eventID": ["model.master_dbt_models.stg_vidyard_events"], "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID": ["model.master_dbt_models.stg_vidyard_event_joins"], "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID": ["model.master_dbt_models.stg_vidyard_event_joins"], "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId": ["model.master_dbt_models.stg_salesforce_opportunity"], "test.master_dbt_models.unique_stg_salesforce_account_accountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_accountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_ownerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_ownerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId": ["model.master_dbt_models.stg_salesforce_account"], "test.master_dbt_models.unique_stg_salesforce_contact_contactId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.not_null_stg_salesforce_contact_contactId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.unique_stg_salesforce_contact_accountId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.not_null_stg_salesforce_contact_accountId": ["model.master_dbt_models.stg_salesforce_contact"], "test.master_dbt_models.unique_stg_salesforce_lead_leadId": ["model.master_dbt_models.stg_salesforce_lead"], "test.master_dbt_models.not_null_stg_salesforce_lead_leadId": ["model.master_dbt_models.stg_salesforce_lead"], "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId": ["model.master_dbt_models.stg_salesforce_lead"], "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId": ["model.master_dbt_models.stg_salesforce_campaignmember"], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId": ["model.master_dbt_models.stg_salesforce_campaignmember"], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate": ["model.master_dbt_models.stg_salesforce_campaignmember"], "source.master_dbt_models.govideo_production.product_sessions": [], "source.master_dbt_models.govideo_production.users": [], "source.master_dbt_models.govideo_production.vidyard_com_sessions": [], "source.master_dbt_models.govideo_production.opened_extension": [], "source.master_dbt_models.govideo_production.global_session": [], "source.master_dbt_models.govideo_production.pageviews": [], "source.master_dbt_models.govideo_production.video_recorded_or_uploaded": [], "source.master_dbt_models.govideo_production.platform_video_shared": [], "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo": [], "source.master_dbt_models.govideo_production.vidyard_com_any_pageview": [], "source.master_dbt_models.govideo_production.sharing_share_combo": [], "source.master_dbt_models.zuora.account": [], "source.master_dbt_models.zuora.contact": [], "source.master_dbt_models.zuora.subscription": [], "source.master_dbt_models.zuora.product": [], "source.master_dbt_models.zuora.product_rate_plan": [], "source.master_dbt_models.zuora.rate_plan": [], "source.master_dbt_models.public.vidyard_organizations": [], "source.master_dbt_models.public.vidyard_users": [], "source.master_dbt_models.public.vidyard_user_groups": [], "source.master_dbt_models.public.vidyard_teams": [], "source.master_dbt_models.public.vidyard_team_memberships": [], "source.master_dbt_models.public.vidyard_org_metrics": [], "source.master_dbt_models.public.vidyard_videos": [], "source.master_dbt_models.public.vidyard_active_features": [], "source.master_dbt_models.public.vidyard_features": [], "source.master_dbt_models.public.vidyard_players": [], "source.master_dbt_models.public.vidyard_allotment_limits": [], "source.master_dbt_models.public.vidyard_allotment_types": [], "source.master_dbt_models.public.vidyard_hubs": [], "source.master_dbt_models.public.vidyard_events": [], "source.master_dbt_models.public.vidyard_event_joins": [], "source.master_dbt_models.public.vidyard_nps_surveys": [], "source.master_dbt_models.salesforce_production.opportunity": [], "source.master_dbt_models.salesforce_production.account": [], "source.master_dbt_models.salesforce_production.contact": [], "source.master_dbt_models.salesforce_production.campaign": [], "source.master_dbt_models.salesforce_production.lead": [], "source.master_dbt_models.salesforce_production.campaignmember": [], "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case": []}, "child_map": {"model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded": ["test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID", "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID"], "model.master_dbt_models.stg_govideo_production_pageviews": ["test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID", "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID"], "model.master_dbt_models.stg_govideo_production_vidyard_com_sessions": ["test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID", "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID"], "model.master_dbt_models.stg_govideo_production_opened_extension": ["test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID", "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID"], "model.master_dbt_models.stg_govideo_production_product_sessions": ["test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID", "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID", "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID"], "model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo": ["test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID", "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID"], "model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview": ["test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID", "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID"], "model.master_dbt_models.stg_govideo_production_sharing_share_combo": ["test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID", "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID"], "model.master_dbt_models.stg_govideo_production_global_session": ["test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID", "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID"], "model.master_dbt_models.stg_govideo_production_users": ["test.master_dbt_models.not_null_stg_govideo_production_users_userID", "test.master_dbt_models.unique_stg_govideo_production_users_userID"], "model.master_dbt_models.stg_zuora_subscription": ["model.master_dbt_models.fct_vidyard_pro_customers"], "model.master_dbt_models.stg_zuora_account": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_account_accountId", "test.master_dbt_models.unique_stg_zuora_account_accountId"], "model.master_dbt_models.stg_zuora_product": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_product_productId", "test.master_dbt_models.unique_stg_zuora_product_productId"], "model.master_dbt_models.stg_zuora_rate_plan": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID", "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID"], "model.master_dbt_models.stg_zuora_product_rate_plan": ["model.master_dbt_models.fct_vidyard_pro_customers", "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId", "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId"], "model.master_dbt_models.stg_zuora_contact": ["test.master_dbt_models.not_null_stg_zuora_contact_contactId", "test.master_dbt_models.unique_stg_zuora_contact_contactId"], "model.master_dbt_models.stg_vidyard_features": ["test.master_dbt_models.not_null_stg_vidyard_features_featureId", "test.master_dbt_models.unique_stg_vidyard_features_featureId"], "model.master_dbt_models.stg_vidyard_team_memberships": ["test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID", "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID", "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID", "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID", "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID", "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID"], "model.master_dbt_models.stg_vidyard_events": ["test.master_dbt_models.not_null_stg_vidyard_events_eventID", "test.master_dbt_models.unique_stg_vidyard_events_eventID"], "model.master_dbt_models.stg_vidyard_allotment_limits": ["test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID", "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID", "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID", "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID"], "model.master_dbt_models.stg_vidyard_nps_surveys": ["model.master_dbt_models.nps_survey_responses"], "model.master_dbt_models.stg_vidyard_allotment_types": ["test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID", "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID"], "model.master_dbt_models.stg_vidyard_event_joins": ["test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID", "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID"], "model.master_dbt_models.stg_vidyard_organizations": ["test.master_dbt_models.not_null_stg_vidyard_organizations_accountId", "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID", "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId", "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID", "test.master_dbt_models.unique_stg_vidyard_organizations_accountId", "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID", "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId", "test.master_dbt_models.unique_stg_vidyard_organizations_parentID"], "model.master_dbt_models.stg_vidyard_players": ["test.master_dbt_models.not_null_stg_vidyard_players_organizationID", "test.master_dbt_models.not_null_stg_vidyard_players_ownerID", "test.master_dbt_models.not_null_stg_vidyard_players_playerID", "test.master_dbt_models.unique_stg_vidyard_players_organizationID", "test.master_dbt_models.unique_stg_vidyard_players_ownerID", "test.master_dbt_models.unique_stg_vidyard_players_playerID"], "model.master_dbt_models.stg_vidyard_org_metrics": ["test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID", "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID", "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID", "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID"], "model.master_dbt_models.stg_vidyard_user_groups": ["test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID", "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID", "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID", "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID", "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID", "test.master_dbt_models.unique_stg_vidyard_user_groups_userID"], "model.master_dbt_models.stg_vidyard_active_features": ["test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID", "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID", "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID", "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID"], "model.master_dbt_models.stg_vidyard_teams": ["test.master_dbt_models.not_null_stg_vidyard_teams_accountID", "test.master_dbt_models.not_null_stg_vidyard_teams_teamID", "test.master_dbt_models.unique_stg_vidyard_teams_accountID", "test.master_dbt_models.unique_stg_vidyard_teams_teamID"], "model.master_dbt_models.stg_vidyard_videos": ["test.master_dbt_models.not_null_stg_vidyard_videos_organizationID", "test.master_dbt_models.not_null_stg_vidyard_videos_userID", "test.master_dbt_models.not_null_stg_vidyard_videos_videoID", "test.master_dbt_models.unique_stg_vidyard_videos_organizationID", "test.master_dbt_models.unique_stg_vidyard_videos_userID", "test.master_dbt_models.unique_stg_vidyard_videos_videoID"], "model.master_dbt_models.stg_vidyard_hubs": ["test.master_dbt_models.not_null_stg_vidyard_hubs_hubID", "test.master_dbt_models.unique_stg_vidyard_hubs_hubID"], "model.master_dbt_models.stg_vidyard_users": ["model.master_dbt_models.nps_survey_responses", "test.master_dbt_models.not_null_stg_vidyard_users_userId", "test.master_dbt_models.unique_stg_vidyard_users_userId"], "model.master_dbt_models.stg_salesforce_account": ["model.master_dbt_models.fct_sfdc_accounts_use_case", "test.master_dbt_models.not_null_stg_salesforce_account_accountId", "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId", "test.master_dbt_models.not_null_stg_salesforce_account_ownerId", "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId", "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId", "test.master_dbt_models.unique_stg_salesforce_account_accountId", "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId", "test.master_dbt_models.unique_stg_salesforce_account_ownerId", "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId", "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId"], "model.master_dbt_models.stg_salesforce_opportunity": ["model.master_dbt_models.fct_sfdc_accounts_use_case", "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId", "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId", "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId", "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId"], "model.master_dbt_models.stg_salesforce_campaign": [], "model.master_dbt_models.stg_salesforce_campaignmember": ["test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId", "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate", "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId"], "model.master_dbt_models.stg_salesforce_contact": ["test.master_dbt_models.not_null_stg_salesforce_contact_accountId", "test.master_dbt_models.not_null_stg_salesforce_contact_contactId", "test.master_dbt_models.unique_stg_salesforce_contact_accountId", "test.master_dbt_models.unique_stg_salesforce_contact_contactId"], "model.master_dbt_models.stg_salesforce_lead": ["test.master_dbt_models.not_null_stg_salesforce_lead_leadId", "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId", "test.master_dbt_models.unique_stg_salesforce_lead_leadId"], "model.master_dbt_models.fct_sfdc_accounts_use_case": [], "model.master_dbt_models.fct_vidyard_pro_customers": [], "model.master_dbt_models.nps_survey_responses": [], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_product_sessions_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_product_sessions_userID": [], "test.master_dbt_models.not_null_stg_govideo_production_users_userID": [], "test.master_dbt_models.unique_stg_govideo_production_users_userID": [], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_sessions_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_sessions_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_opened_extension_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_opened_extension_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_global_session_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_global_session_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_pageviews_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_pageviews_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_video_recorded_or_uploaded_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_video_recorded_or_uploaded_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_vidyard_com_any_pageview_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_vidyard_com_any_pageview_eventID": [], "test.master_dbt_models.not_null_stg_govideo_production_sharing_share_combo_eventID": [], "test.master_dbt_models.unique_stg_govideo_production_sharing_share_combo_eventID": [], "test.master_dbt_models.not_null_stg_zuora_account_accountId": [], "test.master_dbt_models.unique_stg_zuora_account_accountId": [], "test.master_dbt_models.unique_stg_zuora_contact_contactId": [], "test.master_dbt_models.not_null_stg_zuora_contact_contactId": [], "test.master_dbt_models.unique_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.not_null_stg_zuora_subscrip_subscriptionId": [], "test.master_dbt_models.unique_stg_zuora_product_productId": [], "test.master_dbt_models.not_null_stg_zuora_product_productId": [], "test.master_dbt_models.unique_stg_zuora_product_rate_plan_productRatePlanId": [], "test.master_dbt_models.not_null_stg_zuora_product_rate_plan_productRatePlanId": [], "test.master_dbt_models.unique_stg_zuora_rate_plan_ratePlanID": [], "test.master_dbt_models.not_null_stg_zuora_rate_plan_ratePlanID": [], "test.master_dbt_models.unique_stg_vidyard_organizations_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_organizations_parentID": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_parentID": [], "test.master_dbt_models.unique_stg_vidyard_organizations_ownerId": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_ownerId": [], "test.master_dbt_models.unique_stg_vidyard_organizations_accountId": [], "test.master_dbt_models.not_null_stg_vidyard_organizations_accountId": [], "test.master_dbt_models.unique_stg_vidyard_users_userId": [], "test.master_dbt_models.not_null_stg_vidyard_users_userId": [], "test.master_dbt_models.unique_stg_vidyard_user_groups_groupID": [], "test.master_dbt_models.not_null_stg_vidyard_user_groups_groupID": [], "test.master_dbt_models.unique_stg_vidyard_user_groups_userID": [], "test.master_dbt_models.not_null_stg_vidyard_user_groups_userID": [], "test.master_dbt_models.unique_stg_vidyard_user_groups_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_user_groups_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_teams_teamID": [], "test.master_dbt_models.not_null_stg_vidyard_teams_teamID": [], "test.master_dbt_models.unique_stg_vidyard_teams_accountID": [], "test.master_dbt_models.not_null_stg_vidyard_teams_accountID": [], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamMembershipID": [], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamMembershipID": [], "test.master_dbt_models.unique_stg_vidyard_team_memberships_teamID": [], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_teamID": [], "test.master_dbt_models.unique_stg_vidyard_team_memberships_userID": [], "test.master_dbt_models.not_null_stg_vidyard_team_memberships_userID": [], "test.master_dbt_models.unique_stg_vidyard_org_metrics_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_org_metrics_firstViewVideoID": [], "test.master_dbt_models.not_null_stg_vidyard_org_metrics_firstViewVideoID": [], "test.master_dbt_models.unique_stg_vidyard_videos_videoID": [], "test.master_dbt_models.not_null_stg_vidyard_videos_videoID": [], "test.master_dbt_models.unique_stg_vidyard_videos_userID": [], "test.master_dbt_models.not_null_stg_vidyard_videos_userID": [], "test.master_dbt_models.unique_stg_vidyard_videos_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_videos_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_active_features_activeFeatureID": [], "test.master_dbt_models.not_null_stg_vidyard_active_features_activeFeatureID": [], "test.master_dbt_models.unique_stg_vidyard_active_features_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_active_features_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_features_featureId": [], "test.master_dbt_models.not_null_stg_vidyard_features_featureId": [], "test.master_dbt_models.unique_stg_vidyard_players_playerID": [], "test.master_dbt_models.not_null_stg_vidyard_players_playerID": [], "test.master_dbt_models.unique_stg_vidyard_players_organizationID": [], "test.master_dbt_models.not_null_stg_vidyard_players_organizationID": [], "test.master_dbt_models.unique_stg_vidyard_players_ownerID": [], "test.master_dbt_models.not_null_stg_vidyard_players_ownerID": [], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_accountID": [], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_accountID": [], "test.master_dbt_models.unique_stg_vidyard_allotment_limits_allotmentLimitID": [], "test.master_dbt_models.not_null_stg_vidyard_allotment_limits_allotmentLimitID": [], "test.master_dbt_models.unique_stg_vidyard_allotment_types_allotmentTypeID": [], "test.master_dbt_models.not_null_stg_vidyard_allotment_types_allotmentTypeID": [], "test.master_dbt_models.unique_stg_vidyard_hubs_hubID": [], "test.master_dbt_models.not_null_stg_vidyard_hubs_hubID": [], "test.master_dbt_models.unique_stg_vidyard_events_eventID": [], "test.master_dbt_models.not_null_stg_vidyard_events_eventID": [], "test.master_dbt_models.unique_stg_vidyard_event_joins_eventJoinID": [], "test.master_dbt_models.not_null_stg_vidyard_event_joins_eventJoinID": [], "test.master_dbt_models.unique_stg_salesforce_opportunity_opportunityId": [], "test.master_dbt_models.not_null_stg_salesforce_opportunity_opportunityId": [], "test.master_dbt_models.not_null_stg_salesforce_opportunity_accountId": [], "test.master_dbt_models.not_null_stg_salesforce_opportunity_ownerId": [], "test.master_dbt_models.unique_stg_salesforce_account_accountId": [], "test.master_dbt_models.not_null_stg_salesforce_account_accountId": [], "test.master_dbt_models.unique_stg_salesforce_account_ownerId": [], "test.master_dbt_models.not_null_stg_salesforce_account_ownerId": [], "test.master_dbt_models.unique_stg_salesforce_account_vidyardAccountId": [], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardAccountId": [], "test.master_dbt_models.unique_stg_salesforce_account_csmOwnerId": [], "test.master_dbt_models.not_null_stg_salesforce_account_csmOwnerId": [], "test.master_dbt_models.unique_stg_salesforce_account_vidyardUserId": [], "test.master_dbt_models.not_null_stg_salesforce_account_vidyardUserId": [], "test.master_dbt_models.unique_stg_salesforce_contact_contactId": [], "test.master_dbt_models.not_null_stg_salesforce_contact_contactId": [], "test.master_dbt_models.unique_stg_salesforce_contact_accountId": [], "test.master_dbt_models.not_null_stg_salesforce_contact_accountId": [], "test.master_dbt_models.unique_stg_salesforce_lead_leadId": [], "test.master_dbt_models.not_null_stg_salesforce_lead_leadId": [], "test.master_dbt_models.not_null_stg_salesforce_lead_leadOwnerId": [], "test.master_dbt_models.unique_stg_salesforce_campaignmember_campaignMemberId": [], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_campaignMemberId": [], "test.master_dbt_models.not_null_stg_salesforce_campaignmember_createdDate": [], "source.master_dbt_models.govideo_production.product_sessions": ["model.master_dbt_models.stg_govideo_production_product_sessions"], "source.master_dbt_models.govideo_production.users": ["model.master_dbt_models.stg_govideo_production_users"], "source.master_dbt_models.govideo_production.vidyard_com_sessions": ["model.master_dbt_models.stg_govideo_production_vidyard_com_sessions"], "source.master_dbt_models.govideo_production.opened_extension": ["model.master_dbt_models.stg_govideo_production_opened_extension"], "source.master_dbt_models.govideo_production.global_session": ["model.master_dbt_models.stg_govideo_production_global_session"], "source.master_dbt_models.govideo_production.pageviews": ["model.master_dbt_models.stg_govideo_production_pageviews"], "source.master_dbt_models.govideo_production.video_recorded_or_uploaded": ["model.master_dbt_models.stg_govideo_production_video_recorded_or_uploaded"], "source.master_dbt_models.govideo_production.platform_video_shared": [], "source.master_dbt_models.govideo_production.video_creation_started_to_create_or_upload_a_video_combo": ["model.master_dbt_models.stg_govideo_production_video_creation_started_to_create_or_upload_a_video_combo"], "source.master_dbt_models.govideo_production.vidyard_com_any_pageview": ["model.master_dbt_models.stg_govideo_production_vidyard_com_any_pageview"], "source.master_dbt_models.govideo_production.sharing_share_combo": ["model.master_dbt_models.stg_govideo_production_sharing_share_combo"], "source.master_dbt_models.zuora.account": ["model.master_dbt_models.stg_zuora_account"], "source.master_dbt_models.zuora.contact": ["model.master_dbt_models.stg_zuora_contact"], "source.master_dbt_models.zuora.subscription": ["model.master_dbt_models.stg_zuora_subscription"], "source.master_dbt_models.zuora.product": ["model.master_dbt_models.stg_zuora_product"], "source.master_dbt_models.zuora.product_rate_plan": ["model.master_dbt_models.stg_zuora_product_rate_plan"], "source.master_dbt_models.zuora.rate_plan": ["model.master_dbt_models.stg_zuora_rate_plan"], "source.master_dbt_models.public.vidyard_organizations": ["model.master_dbt_models.stg_vidyard_organizations"], "source.master_dbt_models.public.vidyard_users": ["model.master_dbt_models.stg_vidyard_users"], "source.master_dbt_models.public.vidyard_user_groups": ["model.master_dbt_models.stg_vidyard_user_groups"], "source.master_dbt_models.public.vidyard_teams": ["model.master_dbt_models.stg_vidyard_teams"], "source.master_dbt_models.public.vidyard_team_memberships": ["model.master_dbt_models.stg_vidyard_team_memberships"], "source.master_dbt_models.public.vidyard_org_metrics": ["model.master_dbt_models.stg_vidyard_org_metrics"], "source.master_dbt_models.public.vidyard_videos": ["model.master_dbt_models.stg_vidyard_videos"], "source.master_dbt_models.public.vidyard_active_features": ["model.master_dbt_models.stg_vidyard_active_features"], "source.master_dbt_models.public.vidyard_features": ["model.master_dbt_models.stg_vidyard_features"], "source.master_dbt_models.public.vidyard_players": ["model.master_dbt_models.stg_vidyard_players"], "source.master_dbt_models.public.vidyard_allotment_limits": ["model.master_dbt_models.stg_vidyard_allotment_limits"], "source.master_dbt_models.public.vidyard_allotment_types": ["model.master_dbt_models.stg_vidyard_allotment_types"], "source.master_dbt_models.public.vidyard_hubs": ["model.master_dbt_models.stg_vidyard_hubs"], "source.master_dbt_models.public.vidyard_events": ["model.master_dbt_models.stg_vidyard_events"], "source.master_dbt_models.public.vidyard_event_joins": ["model.master_dbt_models.stg_vidyard_event_joins"], "source.master_dbt_models.public.vidyard_nps_surveys": ["model.master_dbt_models.stg_vidyard_nps_surveys"], "source.master_dbt_models.salesforce_production.opportunity": ["model.master_dbt_models.stg_salesforce_opportunity"], "source.master_dbt_models.salesforce_production.account": ["model.master_dbt_models.stg_salesforce_account"], "source.master_dbt_models.salesforce_production.contact": ["model.master_dbt_models.stg_salesforce_contact"], "source.master_dbt_models.salesforce_production.campaign": ["model.master_dbt_models.stg_salesforce_campaign"], "source.master_dbt_models.salesforce_production.lead": ["model.master_dbt_models.stg_salesforce_lead"], "source.master_dbt_models.salesforce_production.campaignmember": ["model.master_dbt_models.stg_salesforce_campaignmember"], "source.master_dbt_models.salesforce.fct_sfdc_accounts_use_case": []}}

>>>>>>> f04d23922e3e0a4a87d8205fec390f30ad021502
